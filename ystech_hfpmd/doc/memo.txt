0，编译、运行api样例程序，包括linux、windows。
1，研究hpf行情程序的目录结构，编译、运行。

1.首先完成客户端到数据服务器的连接。
2.测试下载行情信息。
3.格式化输出行情文件。
4.在linux下运行调试程序。
5.完成定时启动和关闭功能。
6.每天运行发布版本。
7.显示、记录所有行情字段。

8.每天分析、测试下载的行情。
9.复用公共代码misc，包括队列，线程，csv，日志，命令参数。
10.完成断线重连与订阅失败提醒功能。

11。上生产环境   ****

ex1:文件名字乱码    
    文件年月日（时分秒）        
    打印文件头          
    行情信息格式化（优化）

//五档行情没有打印
//把行情以浮点数表示
//命令行输入登录信息
//日志存放位置错误
//文件句柄打开关闭频繁
//格式化行情字符串
上生产环境
全局变量
//复用Auto_file
//复用Option选项
    

//第1周（20170710）
周1：学习hfp行情api文档
周2：研究样例行情程序的目录结构，编译、运行。
周3：编译运行样例程序（windows），客户端到行情服务器的连接。
周4：完成客户端到数据服务器的连接。
     测试下载行情信息。
     格式化输出行情文件。
周5: 在编译Linux下编译运行行情程序，

//第2周(20190715)
周1：完成定时启动和关闭功能。
     每天运行发布版本。
     显示、记录所有行情字段。
周2：复用公共代码misc，包括队列，线程
     定时器启动和关闭错误日志
     显示、记录所有行情字段。
周3：把获取到的行情写入csv文档
     分析，测试下载的行情
周4：完成断线重连
     完成CSV文件名字输出乱码，文件名按日期（年月日，时分秒）命名
     完成打印文件头
周5：完成命令行参数
     完成日志
     分析，测试下载行情
     
     
//第3周（20190722）
周1:linux下输出的买2-买4价格不正确，买价数组正确无法传递
    把下载的行情以浮点数表示
    测试，下载行情信息
    修改文件句柄关闭条件
    格式化行情字符串
    日志存放位置错误
    命令行输入登录信息
周2：复用Auto_file
     复用Option选项
     把行情程序上传到Git上
     把程序普通指针对象改为智能指针，简化程序代码
周4：使用docker编译行情程序
     把程序放入到服务器运行，定时运行。
<<<<<<< HEAD
周5: 在服务器上测试下载行情



//第4周（20190729）
周1：测试行情下载程序
周2：在生产环境上测试，下载行情程序
     打印程序运行时间，并以微秒表示
周3: 在生产环境下测试，下载行情程序
     把所有获取到的行情价格以元为单位，保留小数点后四位
     去掉打印行情里的contract_name字段
     打印行情的datatime
周4: 修改程序定时器
     在生产环境上测试程序
周5：测试运行行情程序



//第5周（20190805）
周1:
=======
     
>>>>>>> 320aa174a031ba28cffe96df51bfe566b8be4096
     
     
     
     
     