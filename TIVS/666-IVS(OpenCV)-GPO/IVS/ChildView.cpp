// ChildView.cpp : implementation of the CChildView class
#include "stdafx.h"
#include "IVS.h"
#include "MainFrm.h"
#include "Def_globali.h"
#include "Globals.h"
#include "Shield_access2OS.h"

#ifdef _DEBUG
  #define new DEBUG_NEW
#endif


BOOL                           debug         = FALSE;
wchar_t                        PC_name[30]   = L""; // Computer name read from system configuration

CSplash_screen*                info_wnd      = NULL;


#ifdef NEW_PASSW_MNGR  // New users/passwords manager
  CPassword_manager_v2*          password_mngr = NULL;
#else
  CPassword_manager*             password_mngr = NULL;
#endif


CLogger*                       logger        = NULL;
CBatch_manager*                batch_mngr    = NULL;

//  #ifdef BATCHLOG_PARAMETERS // When defined changes to parameters will be added to batch report 
CLogger*                       blparam_logger = NULL;
CLogger*                       blalarm_logger = NULL;
//  #endif

//  #ifdef BATCHLOG_EVENTS // When defined events/alarms will be added to batch report
//    blalarm_logger = new CLogger( BLALARM_FILE_NAME );
//  #endif


#ifdef ALARMLOG_SEPARATE // log alarms separately and add button to show them
  CLogger*                     alarm_logger  = NULL;
#endif


#ifdef WORKER_THREAD  // if defined uses worker threads to speed-up processing
  //UINT __cdecl processing_thread  ( LPVOID pParam );
  extern CEvent* processing_start[2];
  extern CEvent* processing_done [2];
  extern BYTE*   img_ptr;
#endif

#ifdef READ_CYCLES
  ADS_data_type          ADS_cycles; // ADS variable connected to cycles
  unsigned int           cycles;     // cycles read from PLC
  CTimer                 globaltimer;
  unsigned int           cycles_0;   // initial value
#endif


CFile_mngmt                    file_manager;

BOOL use_advanced_parameters = FALSE; // when set to true, advanced parameters are shown


extern UINT                    num_tlc;
extern UINT                    crcam;
extern Camera_struct           camera[NUM_TLC];

extern CAmpoule_filling_level* filling_level[NUM_TLC]; // filling level for ampoules objects
extern CParticle_inspection*   particle_insp[NUM_TLC]; // particle inspection
extern CCosmetic_inspection*   cosmetic_insp[NUM_TLC]; // cosmetic inspection
extern CFilling_level*         fillingl_insp[NUM_TLC]; // filling level inspection
extern CTip_inspection*        tip_insp     [NUM_TLC]; // ampoule's tip inspection
extern CBottom_inspection*     bottom_insp  [NUM_TLC]; // bottom inspection
extern CFOcolor_inspection*    focolor_insp [NUM_TLC]; // FO color inspection
extern CLQcolor_inspection*    lqcolor_insp [NUM_TLC]; // Liquid color inspection
extern CDRcolor_inspection*    drcolor_insp [NUM_TLC]; // dotring color inspection
extern COralFO_inspection*     oralfo_insp  [NUM_TLC]; // oral flip off inspection
extern CWaist_layer*           waistlayer_insp[NUM_TLC]; // waist-layer FD inspection
extern CSkinning*              skinning_insp  [NUM_TLC]; // skinning FD inspection

//extern CStopper_inspection*    stopper_insp   [NUM_TLC]; // PFS stopper inspection
//Pour on 20201130
extern CFlange_inspection*       flange_insp [NUM_TLC]; // PFS flange inspection
//Pour on 20201130
extern CPFStopper_inspection*    pfstopper_insp [NUM_TLC]; // PFS stopper inspection
extern CPFSidewall_inspection*   pfsidewall_insp[NUM_TLC]; // PFS sidewall inspection (area sequence)
//extern CPFCosmetic3_inspection*  pfcosmetic3_insp [NUM_TLC]; // PFS cosmetic3 (bottom A&B)


//extern ADS_data_type           prod_speed;

#ifdef HGA_DATAREC
  extern ADS_data_type          hgadata_param;
#endif

extern int pwd_levels[];


extern BOOL              test_process;  // if true TEST PROCESS BUTTON WILL BE VISIBLE/AVAILABLE

extern BOOL              run_mode;        // 0=stop mode / 1=run mode  for Sunho on 20200701

extern BOOL          f_run_automatic;

extern BOOL              stn1_part_back;     // In case of selectable TRUE/FALSE BACK/BOTTOM LIGHT particle station 1 

extern BOOL              show_rejects;       // FALSE=show all images / TRUE=show only rejects
extern BOOL              pseudo_colors;      // 0=gray levels / 1=pseudocolors
extern BOOL              liquid_mode;        // 0=freezedried mode / 1=liquid mode (COMBO MACHINE)
//extern int               npar_lqfdmode;
//extern BOOL              learn_reflections;
//extern BOOL              learn_models;
extern BOOL              learning;

extern BOOL              alarmemptypc1; // when true, alarm is triggered upon empty container detected

extern BOOL              nopart1; // Command line to disable particle 1
extern BOOL              nopart2; // Command line to disable particle 2
extern BOOL              nopart3; // Command line to disable particle 3



extern BOOL              inpdatarec_on;
extern BOOL              hgadatarec_on;
extern BOOL              datarec_on;

extern BOOL              hvdatarec_on;

//Pour marked 20180303 A20L
extern CParameter*       hvmax_err; 

//Pour added 20180303
extern CParameter*       hv1min_err;
extern CParameter*       hv1max_err;
extern CParameter*       hv2min_err;
extern CParameter*       hv2max_err;
extern CParameter*       hv3min_err;
extern CParameter*       hv3max_err;
extern CParameter*       hv4min_err;
extern CParameter*       hv4max_err;


extern BOOL              saveinsp_on;
extern BOOL              saveseq_on;
//Pour added on 20190513
//extern INT              imagesavemode;   //Pour added for save mode selection
//Pour added on 20190513
extern BOOL              show_back_light; // When true TOPRING light images are shown / otherwise show BACKLIGHT
extern BOOL              tipcap_tip;      // used only in combined tip/cap mode, when true = TIP mode / false = CAP mode
extern BOOL              tipcap_freerun;  // used only in combined tip/cap mode, when true = TIP/CAP free running enabled

extern UINT              lng;             // Current language
//extern wchar_t**         groupnames[6];   // 0=layout + other cameras groups //Pour marked 20200812

extern wchar_t**         groupnames[5];   // 0=layout + other cameras groups //Pour marked 20200812

extern circle_type       my_circle[MAXR_CIRCLES];

extern CButton_mod*      lqfdmode_txt;

//Pour 20201022
extern CMenu_button*     XTS1_1_btn;
extern CMenu_button*     XTS1_2_btn;
extern CMenu_button*     XTS1_3_btn;
extern CMenu_button*     XTS1_4_btn;
extern CMenu_button*     XTS2_1_btn;
extern CMenu_button*     XTS2_2_btn;
extern CMenu_button*     XTS2_3_btn;
extern CMenu_button*     XTS2_4_btn;
//Pour 20201022

extern CMenu_button*     inspection_btn;
extern CMenu_button*     chview_btn;
extern CMenu_button*     movie_btn;
extern CMenu_button*     recipe_btn;
extern CMenu_button*     exit_btn;
extern CMenu_button*     datarec_btn;

extern CMenu_button*     inspmode_btn;


extern CMenu_button*     inpdatarec_btn;
extern CMenu_button*     hvdatarec_btn;
extern CMenu_button*     hgadatarec_btn;

extern CMenu_button*     campwr_btn;

extern CMenu_button*     saveinsp_btn;
extern CMenu_button*     saveseq_btn;

extern CMenu_button*     loopinsp_btn;
extern CMenu_button*     saveimages_btn;
extern CMenu_button*     batch_btn;

extern CMenu_button*     lqfdmode_btn;

extern CMenu_button*     changemode_btn;

extern BYTE              freezemode_on; // used for C40

//Pour added for testing 20171114
extern CMenu_button*     idpassword_btn;
//Pour added for testing 20171114

extern char              serial_number[20+1];
extern update_data_type  uplist[MAX_UPLIST_NUM];
extern UINT              uplist_num;


extern CParameter* ptr_enable1_part1;
extern CParameter* ptr_enable1_part2;
extern CParameter* ptr_enable1_cosm;
extern CParameter* ptr_enable2_part1;
extern CParameter* ptr_enable2_part2;
extern CParameter* ptr_enable2_cosm;
extern CParameter* ptr_enable1_cont1;
extern CParameter* ptr_enable1_cont2;
extern CParameter* ptr_enable2_cont1;
extern CParameter* ptr_enable2_cont2;



#ifdef CFR21
  #include "CFR21.h"
  CCFR21*   login_wnd   = NULL;
  extern char User_str[MAX_LOG_STRING_LENGTH];
  extern CTimer timer_log;
#endif

#ifdef CPRINT
  #include "PrintToPDF.h"
#include "ChildView.h"
  CPrintToPDF*   Print_wnd   = NULL;
#endif



UINT thread_status = 0; // status of thread - 1=running - 0=stopped / B1=alarm_warning_3d /B(10+ind) individual camera thread
UINT thread_exit   = 0; // exit request     - 1=exit    - 0=exited
UINT trigger_label[NUMTRIGGER];

//CContainer_wnd* calibration_menu = NULL;
CMenu_button* calibration_menu = NULL;
CMenu_button*          hv_menu = NULL;



#ifdef IMAGE_DISPLAY
  //#include "Image_display.h"
  CImage_display*    image_dsp[NUM_TLC];
  CImage_layout*     layout_dsp = NULL;
#endif
    



//CTimer       timer;
CString      msg         = L"";
CChildView*  pView       = NULL;


/*
	#pragma pack(1)
	struct message_type
	{
    bool         on;
		char         msg[140+1];
		unsigned int param_1;
		int          param_2;
		double       param_3;
		char         param_4[20+1];
		unsigned int timer;
		//bool         active[MAX_NUM_ALARM+1];
	};
*/


ADS_data_type alarm_ads;
ADS_data_type warning_ads;

message_type* alarm_data;
message_type* warning_data;

ADS_data_type freezemode_ads;
//BOOL*         freezemode_on;


CText_box*    alarm_txt     = NULL;  // PLC alarm status/message
CText_box*    warning_txt   = NULL;  // PLC warning status/message
CText_box*    machine_txt   = NULL;  // general status of machine/software
CParameter*   f_closed_loop = NULL;

CParameter*   f_hvloop_a      = NULL;
//Pour added 20180302
CParameter*   f_hvloop_b      = NULL;
CParameter*   f_hvloop_c      = NULL;
CParameter*   f_hvloop_d      = NULL;


CChildView::CChildView()
{
  container_main = NULL;

  ZeroMemory( container_wnd, sizeof(container_wnd) );
	num_container = 0;

  ZeroMemory( menu_btn,      sizeof(menu_btn)      );
	num_menu_btn  = 0;

	ZeroMemory( parameter,     sizeof(parameter)     );
	num_params    = 0;

	ZeroMemory( toupdate,      sizeof(parameter)     );
	num_toupdate  = 0;

  ZeroMemory( filling_level, sizeof(filling_level) );


  parcat_1 = NULL;
  parcat_2 = NULL;

}





CChildView::~CChildView()
{

//	Deallocate();


	//TRACE("Distruzione CChildView completata\n");
	TRACE( L"CChildView destruction completed\n");
}







int CChildView::Destroy_menu( void )
{
	UINT i;

	for ( i=0 ; i<MAX_NUM_PARAMS ; i++ )
	{
    if ( parameter[i] )
		{
			parameter[i]->DestroyWindow();
			delete parameter[i];
		}
	}
	num_params = 0;


	for ( i=0 ; i<MAX_NUM_MENU_BTN ; i++ )
	{
  	if ( menu_btn[i] )
		{
			menu_btn[i]->DestroyWindow();
			delete menu_btn[i];
		}
	}
  num_menu_btn = 0;

/*	for ( i=1 ; i<MAX_NUM_CONTAINER ; i++ )
	{
  	if ( container_wnd[i] )
		{
			container_wnd[i]->DestroyWindow();
			delete container_wnd[i];
		}
	} */

/*	if ( container_main )
	{
		container_main->DestroyWindow();
		delete container_main;
	} */

  file_manager.Clear_all();

	TRACE( "CChildView::Destroy_menu completed\n" );

	return 0;
}




int CChildView::Deallocate( void )
{
	UINT i, j;

 
  #ifdef CFR21
	  if ( login_wnd )
	  {
		  login_wnd->DestroyWindow();
		  delete login_wnd;
  	}
  #endif

  #ifdef CPRINT
	  if ( Print_wnd ) delete Print_wnd;
  #endif

  for ( i=0; i<num_tlc; i++)
  {

    if ( particle_insp[i] )
    {
      delete particle_insp[i];
      particle_insp[i] = NULL;
    }

    if ( tip_insp[i] )
    {
      delete tip_insp[i];
      tip_insp[i] = NULL;
    }

    if ( bottom_insp[i] )
    {
      delete bottom_insp[i];
      bottom_insp[i] = NULL;
    }

    if ( focolor_insp[i] )
    {
      delete focolor_insp[i];
      focolor_insp[i] = NULL;
    }

    if ( lqcolor_insp[i] )
    {
      delete lqcolor_insp[i];
      lqcolor_insp[i] = NULL;
    }

    if ( drcolor_insp[i] )
    {
      delete drcolor_insp[i];
      drcolor_insp[i] = NULL;
    }

    if ( oralfo_insp[i] )
    {
      delete oralfo_insp[i];
      oralfo_insp[i] = NULL;
    }


    if ( fillingl_insp[i] )
    {
      delete fillingl_insp[i];
      fillingl_insp[i] = NULL;
    }

    if ( waistlayer_insp[i] )
    {
      delete waistlayer_insp[i];
      waistlayer_insp[i] = NULL;
    }

    if ( skinning_insp[i] )
    {
      delete skinning_insp[i];
      skinning_insp[i] = NULL;
    }


    if ( cosmetic_insp[i] )
    {
      delete cosmetic_insp[i];
      cosmetic_insp[i] = NULL;
    }

    if ( filling_level[i] )
    {
      delete filling_level[i];
      filling_level[i] = NULL;
    }

	    if ( pfsidewall_insp[i] )
    {
      delete pfsidewall_insp[i];
      pfsidewall_insp[i] = NULL;
    } 

    if ( pfstopper_insp[i] )
    {
      delete pfstopper_insp[i];
      pfstopper_insp[i] = NULL;
    } 

	//Pour 20201130
	    if ( flange_insp[i] )
    {
      delete flange_insp[i];
      flange_insp[i] = NULL;
    } 
	//Pour 20201130

    for ( j=0 ; j<MAXNUMTEXTROWS ; j++ ) if ( camera[i].text[j] ) 
    {
      delete camera[i].text[j];
      camera[i].text[j] = NULL;
    }

    if ( image_dsp[i] )
    {
      delete image_dsp[i];
      image_dsp[i] = NULL;
    }

  } 

  if ( layout_dsp )
  {
    delete layout_dsp;
    layout_dsp = NULL;
  }
  
  #ifdef BASLER_SDK
    Basler_terminate();
  #endif


	#ifdef BECKHOFF  
    if ( ADS_status>0 )
    {
      ADS_terminate();
      ADS_status = 0; // to let 3d exit
      /*Sleep(200);
      while ( ADS_status != 9999 )
      {
        Sleep( 10 );
        MSG msg;
        PeekMessage( &msg , NULL , 0 , 0 , PM_REMOVE );
      }
      ADS_status = 0; // to let 3d exit*/
    }
    
    ADS_terminate_updatelist();

  #endif

  if ( my_circle && my_circle[1].n )//Pour marked for changing circle to my_circle
  {
    for ( i=0 ; i<MAXR_CIRCLES ; i++ )
    {
      if ( my_circle[i].n && my_circle[i].x ) free( my_circle[i].x );
      if ( my_circle[i].n && my_circle[i].y ) free( my_circle[i].y );
    }
  }

  if ( batch_mngr )
  {
    delete( batch_mngr );
    batch_mngr = NULL;
  }

  if ( password_mngr )
  {
    delete( password_mngr );
    password_mngr = NULL;
  }

  if ( logger )
  {
    delete( logger );
    logger = NULL;
  }


    if ( blparam_logger )
  {
    delete( blparam_logger );
    blparam_logger = NULL;
  }

  if ( blalarm_logger )
  {
    delete( blalarm_logger );
    blalarm_logger = NULL;
  }


  #ifdef ALARMLOG_SEPARATE // log alarms separately and add button to show them
    if ( alarm_logger )
    {
      delete( alarm_logger );
      alarm_logger = NULL;
    }
  #endif


  if ( machine_txt ) delete( machine_txt   );
  if ( alarm_txt   ) delete( alarm_txt   );
  if ( warning_txt ) delete( warning_txt );

  if ( alarm_ads.val   ) free( alarm_ads.val   );
  if ( warning_ads.val ) free( warning_ads.val );

	for ( i=0 ; i<MAX_NUM_PARAMS ; i++ )
	{
    if ( parameter[i] )
		{
			parameter[i]->DestroyWindow();
			delete parameter[i];
		}
	}
	num_params = 0;


	for ( i=0 ; i<MAX_NUM_MENU_BTN ; i++ )
	{
  	if ( menu_btn[i] )
		{
			menu_btn[i]->DestroyWindow();
			delete menu_btn[i];
		}
	}

	for ( i=1 ; i<MAX_NUM_CONTAINER ; i++ )
	{
  	if ( container_wnd[i] )
		{
			container_wnd[i]->DestroyWindow();
			delete container_wnd[i];
		}
	}

	if ( container_main )
	{
		container_main->DestroyWindow();
		delete container_main;
	}


	if ( info_wnd )
	{
    if ( info_wnd->m_hWnd ) info_wnd->DestroyWindow();
		delete info_wnd;
	}

	TRACE( "CChildView::Deallocate completed\n" );

	return 0;
}

BEGIN_MESSAGE_MAP(CChildView, CWnd)
  ON_WM_PAINT()
  //ON_COMMAND( IDS_LOAD_IMAGE,    &CChildView::On_load_image    )
  ON_COMMAND( IDS_PROCESS_IMAGE, &CChildView::On_process_image )
  ON_MESSAGE( WM_INIT,           &CChildView::On_init_prog     )
	//Pour added 20180329
  //ON_MESSAGE( WM_MYMESSAGE,    &CChildView::On_my_message )
	//Pour added 20180329
  ON_WM_SHOWWINDOW()
  ON_WM_KEYDOWN()

END_MESSAGE_MAP()


// CALLBACK CHIAMATA CICLICAMENTE PER L'AGGIORNAMENTO DEI VALORI
// dwTime sembra riportare in ms il tempo di sistema con una cadenza legg pi?lenta
// di quella impostata (su M70 in debug 1014ms su 1000 impostati).
void CALLBACK EXPORT Timer_update( HWND hWnd, UINT nMsg, UINT nIDEvent, DWORD dwTime )
{
//	Beep( 1000, 50 );
//	TRACE("Callback chiamata: hWnd=%d - msg=%d - idEvent=%d - time=%d\n",hWnd,nMsg,nIDEvent,dwTime);

	/*
	struct msg_type
	{
		USHORT   val;
		char     msg[81];
	};
*/


	SYSTEMTIME time;
	//char str[100];
	wchar_t str[100+1];
	GetLocalTime( &time );
	//sprintf( str, "%02d/%02d/%04d %02d:%02d:%02d", time.wDay, time.wMonth, time.wYear, time.wHour, time.wMinute, time.wSecond );
	swprintf( str, 100, L"%02d/%02d/%04d %02d:%02d:%02d", time.wDay, time.wMonth, time.wYear, time.wHour, time.wMinute, time.wSecond );
	pView->container_main->date_time->SetWindowText( str ); 

  /*
  ADS_data_type run_cycles;
	if ( !ADS_init_parameter( ".RUN_CYCLES", &run_cycles, 4 ) )
	{
		if ( ADS_read_parameter( &run_cycles ) ) TRACE("ERRORE DURANTE LA LETTURA DI RUN_CYCLES\n");
    else                                     TRACE("<.run_cycles> = %d\n", *((UINT*)run_cycles.val));
	}
  else
	{
		TRACE("ERRORE DURANTE L'INIZIALIZZAZIONE DI RUN_CYCLES\n");
	}
  */

  /*
  #ifdef CFR21
    //SCRIVE L'UTENTE
    pView->container_main->User_st->SetWindowText( User_str ); 
    //faccio il controllo sul tempo
    if ( login_wnd->current_user!=-1 && timer_log.elapsed()>CFR21_AUTO_LOGOUT_TIME )
    {
      login_wnd->OnLoginLogout();
      TRACE ("Utente sloggato per timeout");
      timer_log.reset();
    }
  #endif
  */

	if ( alarm_data && !ADS_read_parameter( &alarm_ads ) )
	{
    //TRACE("Variabile <.alarm> inizializzata ed agganciata\n");
    if ( alarm_data->on ) // Allarme attivo!
    {
      //alarm_txt->SetText( alarm_data->msg, 0, TXT_RED );
      alarm_txt->SetText( L"SISTEMARE", 0, TXT_RED );
    }
    else
    {
      //alarm_txt->SetText( "No pending alarm", 0, TXT_GREEN );
      alarm_txt->SetText( L"VERIFICA No pending alarm", 0, TXT_GREEN );
    }

    //alarm_data->on = !alarm_data->on;
	}

  
	if ( warning_data && !ADS_read_parameter( &warning_ads ) )
	{

    if ( warning_data->on ) // Warning attivo!
    {
      //warning_txt->SetText( warning_data->msg, 0, TXT_YELLOW );
      warning_txt->SetText( L"SISTEMARE", 0, TXT_YELLOW );
    }
    else
    {
      //warning_txt->SetText( "No pending warning", 0, TXT_GREEN );
      warning_txt->SetText( L"No pending warning", 0, TXT_GREEN );
    }

    //warning_data->on = !warning_data->on;

    /*
	  pView->warning->Read_PLC_val();
		if ( warning_data->on ) pView->warning->pt_val->Update_text( warning_data->msg, 0x00000000, TXT_YELLOW  ); // 0x##BBGGRR
		else                    pView->warning->pt_val->Update_text( string_022[lng],   0x00000000, TXT_GREEN  ); // 0x##BBGGRR
    */
	}

  /*
	for ( int i=0 ; i<pView->num_toupdate ; i++ )
	{
		pView->toupdate[i]->Update_val_text();
	}
  */

  #ifdef BECKHOFF
/*
	// Aggiornamento statistiche
	num_prod_in->Read_PLC_val();
	UINT prod_in = *((UINT*)num_prod_in->val);
	sprintf( str, "%d", prod_in );
	num_prod_in->pt_val->SetWindowText( str );

	if ( prod_in > 0 )
	{
		num_goods->Read_PLC_val();
		UINT goods = *((UINT*)num_goods->val);
		sprintf( str, "%d (%4.2lf%%)", goods, 100.0*goods/prod_in );
		num_goods->pt_val->SetWindowText( str );

		num_rejects->Read_PLC_val();
		UINT rejs = *((UINT*)num_rejects->val);
		sprintf( str, "%d (%4.2lf%%)", rejs, 100.0*rejs/prod_in );
		num_rejects->pt_val->SetWindowText( str );

		num_1stpart_rej->Read_PLC_val();
		UINT n1stpart_rej = *((UINT*)num_1stpart_rej->val);
		sprintf( str, "%d (%4.2lf%%)", n1stpart_rej, 100.0*n1stpart_rej/prod_in );
		num_1stpart_rej->pt_val->SetWindowText( str );

		num_2ndpart_rej->Read_PLC_val();
		UINT n2ndpart_rej = *((UINT*)num_2ndpart_rej->val);
		sprintf( str, "%d (%4.2lf%%)", n2ndpart_rej, 100.0*n2ndpart_rej/prod_in );
		num_2ndpart_rej->pt_val->SetWindowText( str );

		num_filllev_rej->Read_PLC_val();
		UINT nfilllev_rej = *((UINT*)num_filllev_rej->val);
		sprintf( str, "%d (%4.2lf%%)", nfilllev_rej, 100.0*nfilllev_rej/prod_in );
		num_filllev_rej->pt_val->SetWindowText( str );
	}
	else // NO PRODUCT INSPECTED YET: ALL SET TO ZERO
	{
		num_goods->pt_val->SetWindowText      ( "0" );
		num_rejects->pt_val->SetWindowText    ( "0" );
		num_1stpart_rej->pt_val->SetWindowText( "0" );
		num_2ndpart_rej->pt_val->SetWindowText( "0" );
		num_filllev_rej->pt_val->SetWindowText( "0" );
	}*/

#endif // BECKHOFF

}


// CChildView message handlers

BOOL CChildView::PreCreateWindow(CREATESTRUCT& cs) 
{
	if (!CWnd::PreCreateWindow(cs))
		return FALSE;

	cs.dwExStyle |= WS_EX_CLIENTEDGE;
	cs.style &= ~WS_BORDER;
	cs.lpszClass = AfxRegisterWndClass(CS_HREDRAW|CS_VREDRAW|CS_DBLCLKS, 
		::LoadCursor(NULL, IDC_ARROW), reinterpret_cast<HBRUSH>(COLOR_WINDOW+1), NULL);

	return TRUE;
}


// *********************************************************************************************

// FUNZIONI WRAPPER DEI PULSANTI SUI GESTORI MEMBRO DI CCHILDVIEW

#ifdef CFR21
int LoginFunct( int inp )
{
TRACE("<Sono dentro alla function Login>\n");

//login_wnd ?creata sicuram, chiamo la create per questo oggetto
  login_wnd->OnLoginPressed();
  if (FileMode==0)
    login_wnd->AddToDay("LOGIN-LOGOUT");
  else login_wnd->Add_log("LOGIN-LOGOUT");

return 0;
}

int ShowLog( int inp )
{

if (!login_wnd->CheckAccess(LEVEL_UTILS))  return 1;

TRACE("<Sono dentro alla function ShowLog>\n");

//login_wnd ?creata sicuram, chiamo la create per questo oggetto
  login_wnd->Show_log( );

  if (FileMode==0)
    login_wnd->AddToDay("SHOW-LOG");
  else login_wnd->Add_log("SHOW-LOG");

return 0;
}
#endif

#ifdef CPRINT

 int PrintPDF( int inp )
 {   
   Print_wnd->CreateFile();

 return 0;
 }

#endif


int On_exit_btn( int inp )
{

	pView->Close_all_menus();


  #ifdef CFR21
    if ( login_wnd->PreOperation( LEVEL_EXIT, "EXIT" ) ) return 0;
  #endif

  pView->On_exit_prog();
  //TRACE ("  USCITO!  \n");
  TRACE ("*** EXITED! ***\n");
	return( 0 );
}






int Recipe_management( int inp )
{
  //char msg[200];
  //wchar_t msg[200];

	pView->Close_all_menus();

  CRecipe_manager recipe_wnd( pView );
  if ( recipe_wnd.DoModal() == IDOK )
  {
    TRACE( L"Choosen <%s>\n", recipe_wnd.recipe_name );
    //      sprintf( msg, string_974[lng], recipe_wnd.recipe_name, field_header[3].text, num_recipe_controls, hplate_num  );
    //machine_txt->SetText( msg, 0, TXT_GREEN );
    //Sleep(1000);
    //machine_txt->SetText( msg, 0, COLORE_CONTAIN );
    //TRACE( L"Recipe_management: %s\n", msg );
  }

  CString txt;
  #ifdef SHOW_BATCHNUMBER  // show current batch number in machine_txt field
	txt.Format( string_063[lng], file_manager.recipe_name, batch_mngr->current.code );
  #else
    txt.Format( string_062[lng], file_manager.recipe_name );
  #endif
  if ( machine_txt ) machine_txt->SetText( txt, 0, TXT_GREEN );


  //Inspection_startstop( 20 ); // Ferma ispezione
  //Sleep( 1000 );

  //int user_level = 0;
  //if ( password_mngr ) user_level = password_mngr->current_level;

  //  int user_level = password_mngr->current_level;

  //if ( user_level < 1 )
  //{

 // }




/*  else
  {
    //char szFilters[]= "Recipes (*.txt)|*.txt||";
    wchar_t szFilters[]= L"Recipes (*.txt)|*.txt||";
    CFileDialog selfile(TRUE,NULL,NULL,OFN_HIDEREADONLY|OFN_FILEMUSTEXIST,szFilters,pView);
    selfile.m_ofn.lpstrInitialDir = MAIN_DIRECTORY; // SG_INPUT_PATH;
    if ( selfile.DoModal() == IDOK )
    {
      //TRACE("Scelto <%s>\n", selfile.GetFileName() );
      TRACE( L"Choosen <%s>\n", selfile.GetFileName() );

      //Sleep( 1000 );
      //Inspection_startstop( 10 ); // Riavvia l'ispezione

//      sprintf( msg, string_974[lng], selfile.GetFileName().GetBuffer(), field_header[3].text, num_recipe_controls, hplate_num  );
      machine_txt->SetText( msg, 0, TXT_GREEN );
      Sleep(1000);
      machine_txt->SetText( msg, 0, COLORE_CONTAIN );

      //TRACE("Recipe_management: %s\n", msg);
      TRACE( L"Recipe_management: %s\n", msg );
    }

  }
*/

  return 0; 

}

//Pour added 20180329
/* 
// *********************************************************************************************
#ifdef HV_DATAREC

LRESULT CChildView::On_my_message(WPARAM wParam, LPARAM lParam)
{

	    //if ( hvblock4_ptr.handle ) 
	if ( hvdatarec_on )
  {
	   Message_box( msg_err, MBOX_ERROR );//for testing 20180329 by Pour
	}
	return TRUE;
}
#endif//HV_DATAREC
// *********************************************************************************************
*/
//Pour added 20180329


// *********************************************************************************************


LRESULT CChildView::On_init_prog(WPARAM wParam, LPARAM lParam)
{
  HDC hDC = ::GetDC(NULL);
	int cxframe = GetSystemMetrics(SM_CXFRAME);
	int cyframe = GetSystemMetrics(SM_CYFRAME);

  #ifndef _DEBUG
    ASSERT( OFFS_COORDX == cxframe );
    ASSERT( OFFS_COORDY == cyframe );
    ::ReleaseDC(NULL, hDC);
  #endif

  // DEVMODE dsp_settings;
  // VERIFY( EnumDisplaySettings( NULL, ENUM_CURRENT_SETTINGS, &dsp_settings ) );



/*  for ( int i=0 ; i<10 ; i++ )
  {
    CString msg;
    msg.Format("secondo messaggio n.%d",i+1);
    if ( logger ) logger->Add_string( &msg );
    Sleep(800);
    TRACE("add %d\n",i+1);
  } */


  //machine_txt = NULL;  // general status of machine/software


  /*
  wchar_t*  wc = L"testo unicode";
  char*     ac = "testo ASCII";
  TRACE( L"UNICODE: %s\n", wc );
  TRACE( L"AtoW: %s\n", AtoW(ac) );
  TRACE(  "WtoA: %s\n", WtoA(wc) );
  */


	DWORD name_lenght = 100;
	swprintf( PC_name, 29, L"undefined name" );
	if ( GetComputerName( PC_name, &name_lenght ) )
	{
		_wcsupr( PC_name ); // Make it all uppercase
    #ifdef _DEBUG
		  wcscat( PC_name, L" (debug)" );
    #endif
    #ifdef CFR21
      strcpy( User_str, NO_USER );
    #endif
  }
	else
	{
		swprintf( msg_err, 200, L"Unable to read computer name: Error n.%d", GetLastError() );
	  Message_box( msg_err, MBOX_ERROR );
	}

  #ifdef NEW_LOGGER      // New log 
    logger = new CLogger( NEWLOG_FILE_NAME );

    #ifdef ALARMLOG_SEPARATE // log alarms separately and add button to show them
      alarm_logger = new CLogger( NEWALARMLOG_FILE_NAME );
    #endif

  #else
    logger = new CLogger( LOG_FILE_NAME );

    #ifdef ALARMLOG_SEPARATE // log alarms separately and add button to show them
      alarm_logger = new CLogger( ALARMLOG_FILE_NAME );
    #endif

  #endif


	    #ifdef BATCHLOG_PARAMETERS // When defined changes to parameters will be added to batch report 
    blparam_logger = new CLogger( BLPARAM_FILE_NAME );
  #endif

  #ifdef BATCHLOG_EVENTS // When defined events/alarms will be added to batch report
    blalarm_logger = new CLogger( BLALARM_FILE_NAME );
  #endif


  //if ( logger ) logger->Trim_numlines();



  // PC SPECIFIC INITIALIZATION
  //if ( !wcsncmp( PC_name, L"N56VZ", 5 ) ) // NB
  if ( !wcsncmp( PC_name, L"N56", 3 ) || !wcsncmp( PC_name, L"MIAIR13", 7 ) || !wcsncmp( PC_name, L"DESKTOP-GKK6F9B", 15 ) ) // NB
  {
    #ifdef DEBUGPC
      wcscpy( PC_name, DEBUGPC );
      test_process = TRUE;
    #else
      wcscpy( PC_name, L"PC1" );
    #endif
    debug = 1; // debugging mode active!
    TRACE( L"Running on N56VZ - simulating %s\n", PC_name );

    /*
    #ifdef TIVS_A40
      wcscpy( PC_name, L"PC1" );
      debug = 1; // debugging mode active!
      TRACE("Running on N56VZ - simulating PC1\n");
    #endif

    #ifdef TIVS_F40
      wcscpy( PC_name, L"PC1" );
      debug = 1; // debugging mode active!
      TRACE("Running on N56VZ - simulating PC1\n");
    #endif
    */
    #ifdef FILLEV
      wcscpy( PC_name, L"PC-FILLLEV" );
      //debug = 1; // debugging mode active!
      TRACE("Running on N56VZ - simulating PC-FILLLEV\n");
    #endif
     
    //wcscpy( PC_name, L"PC2" );
    //TRACE("Running on N56VZ - simulating PC2\n");
  }

  if ( IS_PC1 ) // ( !wcsncmp( PC_name, L"PC1", 3 ) ) // PC1
  {
    num_tlc = NUM_TLC_PC1;
    /*#ifdef FILLEV
      num_tlc = 1;
    #endif*/
    TRACE("Running on PC1\n");
  }

  if ( IS_PC2 ) // ( !wcsncmp( PC_name, L"PC2", 3 ) ) // PC2
  {
    num_tlc = NUM_TLC_PC2;

    #ifdef TIVS_F40

      #if STN1==CAKESIDE_ARBACK  
//        num_tlc += 4;
      #endif
      #if STN3==CAKETOP_ARDIRECT  
        num_tlc += 4;
      #endif
      #ifdef NOTHIRDSTN_FDPC2 // ONLY on YAOPHARMA no TOPCAKE on PC2
        num_tlc -= 4;
      #endif

    #endif // TIVS_F40

/*  #ifdef NOTHIRDSTN_FDPC2 // ONLY on YAOPHARMA no TOPCAKE on PC2
      num_tlc -= 4;
    #endif  */

    TRACE("Running on PC2\n");
  }

  /*
  #ifdef TIVS_S40 // MODEL TIVS-S40
 //   wcscpy( PC_name, DEBUGPC );
    test_process = TRUE;
 //   debug = 1; // debugging mode active!
  #endif
  */

  if ( !wcsncmp( PC_name, L"PC-FILLLEV", 10 ) ) // FILLING LEVEL
  {
    num_tlc = 1;
    TRACE("Running on filling level PC\n");
  }


  /*
  CString txt;
  txt.Format( L"inspect_part[%d]", 123 );
  Results_manager result( txt.GetBuffer(), 1000, 3 );
  for ( int i=0 ; i<100 ; i++ )
  {
    result.Insert(    1.0+i, 0 );
    result.Insert(  100.0+i, 1 );
    result.Insert( 1000.0+i, 2 );
  }
  result.Create_csv(L"test",TRUE);
  result.Save_csv();
  */




	// Assegnazione puntatori
	CMainFrame* pFrame = (CMainFrame*) theApp.m_pMainWnd;
	pView      = &pFrame->m_wndView;

//	GetClientRect( &area_view );
	Beep( 1000 , 40 );

	// Creazione della finestra di inizializzazione
	info_wnd = new CSplash_screen;
  info_wnd->Create( IDD_INFO_WINDOW, this );
  if ( info_wnd && info_wnd->m_hWnd )
  {
    info_wnd->GetDlgItem( IDC_TEXT_1 )->SetWindowText( L"" );
    info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( L"" );
//    if ( debug /*!wcsncmp( PC_name, L"N56VZ", 5 )*/ ) // Hide on NB
//    {
//      info_wnd->ShowWindow( SW_HIDE );
//    }
  }




	CString cmdline = theApp.m_lpCmdLine;
	cmdline.MakeUpper(); // forced UPPERCASE

  // commandline to avoid splash screen showing (useful for debugging)
	if ( cmdline.Find(L"NOSPLASH")>=0 ) info_wnd->ShowWindow( SW_HIDE );

	if ( cmdline.Find(L"TESTPROCESS")>=0 ) test_process=TRUE;


  // commandline to enable advanced menu, for now only to adjust tracking percentage
	if ( cmdline.Find(L"USEADVPARAM")>=0 ) use_advanced_parameters = TRUE;


  lng = ENGLISH; // Lingua di default

	// Verifico l'eventuale selezione di una lingua diversa
	if ( cmdline.Find(L"CHN")>=0 || cmdline.Find(L"CHINESE")>=0 ) lng = CHINESE;

	if ( cmdline.Find(L"ESP")>=0 || cmdline.Find(L"SPANISH")>=0 ) lng = SPANISH;

	if ( cmdline.Find(L"TUR")>=0 || cmdline.Find(L"TURKISH")>=0 ) lng = TURKISH;
  
	if ( cmdline.Find(L"RUS")>=0 || cmdline.Find(L"RUSSIAN")>=0 ) lng = RUSSIAN;
  
//	if ( cmdline.Find(L"ESP")>=0 || cmdline.Find(L"SPANISH")>=0 ) lng = SPANISH;
  
  
  ASSERT( lng>=0 && lng<NLANGS );

  BOOL use_password = TRUE;
	if ( cmdline.Find(L"NOPWDMNGR")>=0 ) use_password = FALSE;


	if ( cmdline.Find(L"NOPART1")>=0 ) nopart1 = TRUE;
	if ( cmdline.Find(L"NOPART2")>=0 ) nopart2 = TRUE;
	if ( cmdline.Find(L"NOPART3")>=0 ) nopart3 = TRUE;


	if ( cmdline.Find(L"ALARMEMPTYPC1")>=0 )
  {
    alarmemptypc1 = TRUE;
    logger->Add_string(L"Machine Alarm for empty containers on PC1 ENABLED");
  }

  CTimer timer;

  // Verifico l'eventuale selezione di un ritardo di avvio
  int dly_pos = cmdline.Find(L"DELAY=");
	if ( dly_pos>=0 )
	{
		wchar_t* dly_str = cmdline.GetBuffer(0);
		int delay = 0;
		if ( swscanf( dly_str+dly_pos+6,L"%d", &delay ) == 1 )
		{
			TRACE( "Read start delay of %ds from command line\n", delay );
   	  timer.reset();
      int timer_old = 0;
      while ( timer.elapsed() < delay && !F1_PUSHED )
      {
      	MSG pmsg; 
        PeekMessage( &pmsg, NULL, 0, 0, PM_REMOVE );
        if ( timer.elapsed_sec() != timer_old )
        {
          timer_old = timer.elapsed_sec();
        	msg.Format(L"");	
          if ( info_wnd && info_wnd->m_hWnd ) info_wnd->GetDlgItem( IDC_TEXT_1 )->SetWindowText( msg );
	        msg.Format( string_016[lng], timer_old );
 	        if ( info_wnd && info_wnd->m_hWnd ) info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );

          UpdateWindow();
        }
	      Sleep( 2 );
      }
		}
		else TRACE( "ERROR: Unable to read start delay value\n" );
	} 




	Prepare_palette(); // Prepare/load displaying palettes

  // Build batch manager object
  batch_mngr = new CBatch_manager();

//  use_password = TRUE;

  #ifdef NEW_PASSW_MNGR  // New users/passwords manager
    if ( use_password ) password_mngr = new CPassword_manager_v2();
  #else
    if ( use_password ) password_mngr = new CPassword_manager();
  #endif

  if ( password_mngr ) 
  {
    //int lev = password_mngr->current_level;
    //ASSERT( lev == 0 );


    /*
  	//if ( cmdline.Find("setpwdsu")>=0 )
  	if ( cmdline.Find(L"setpwdsu")>=0 )
    {
      password_mngr->current_user = 3; // SUPERUSER_LEVEL;
//      password_mngr->current_level = password_mngr->usrdb[].lev;
      password_mngr->set_new_level();
    }
    */
/*
    char buffer[] = "messaggio di prova molto lungo per superare i trentadue caratteri della chiave";
    password_mngr->encrypt( (BYTE*) buffer, strlen(buffer) );
    password_mngr->decrypt( (BYTE*) buffer, strlen(buffer) );
  */

    /*
    ZeroMemory( input_folder,  MAX_LENGHT_PATH );
    ZeroMemory( output_folder, MAX_LENGHT_PATH );
    ZeroMemory( password_mngr->usrdb, sizeof(password_mngr->usrdb) ); 
    */

//    password_mngr->Load_data();

   // password_mngr->Save_data();

//    password_mngr->Load_data();


    //password_mngr->encrypt( (BYTE*) password_mngr->usrdb, sizeof(password_mngr->usrdb) );
    //password_mngr->decrypt( (BYTE*) password_mngr->usrdb, sizeof(password_mngr->usrdb) );
    //TRACE("%d\n", sizeof(password_mngr->usrdb) );
    //TRACE("%d\n", sizeof(access_info)*4        ); 
    

//    TRACE("");

/*    password_mngr->Save_data(); */
/*    ZeroMemory( input_folder,  MAX_LENGHT_PATH );
    ZeroMemory( output_folder, MAX_LENGHT_PATH );
    ZeroMemory( password_mngr->usrdb, sizeof(password_mngr->usrdb) );
    password_mngr->Load_data();  */

    //password_mngr->Browse_folders();
  }

  //SG_init_folders(); // attenzione che sia dopo la costruzione di password_mngr!


  //xxxx

//  UINT value = GetPrivateProfileInt("Section", "Key", DEFAULT_VALUE, "program.ini");

  /*
  #ifndef _DEBUG
    #error TOGLIERE COMMENTO BECKHOFF!
  #endif 
  */

  ZeroMemory( filling_level, sizeof(filling_level) );
  ZeroMemory( particle_insp, sizeof(particle_insp) );
  ZeroMemory( cosmetic_insp, sizeof(cosmetic_insp) );
  ZeroMemory( fillingl_insp, sizeof(fillingl_insp) );
  ZeroMemory( tip_insp,      sizeof(tip_insp     ) );
  ZeroMemory( bottom_insp,   sizeof(bottom_insp  ) );
  ZeroMemory( focolor_insp,  sizeof(focolor_insp ) );
  ZeroMemory( lqcolor_insp,  sizeof(lqcolor_insp ) );
  ZeroMemory( drcolor_insp,  sizeof(drcolor_insp ) );
  ZeroMemory( oralfo_insp,   sizeof(oralfo_insp  ) );
    
  ZeroMemory( waistlayer_insp, sizeof(waistlayer_insp) );
  ZeroMemory( skinning_insp,   sizeof(skinning_insp  ) );




//  #ifndef _DEBUG

  #ifdef BECKHOFF  
    if ( debug || ADS_init() ) 
	  {
		  ADS_status = 0; // Disattivo la comm
		  if ( !debug ) Message_box( ADS_error );
	  }
	  else
	  {
		  ADS_status = 1; // Inizializzazione ADS OK
      ADS_register_trigger_callback();

      // Check if NEW Machine serial_number has to be written/changed
	  //Pour removed Serial number checking 20171115
	  /*
      int sn_pos = cmdline.Find(L"SERIAL_NUMBER=");
      if ( sn_pos>=0 )
      {
        wchar_t* sn_str = cmdline.GetBuffer(0)+sn_pos+wcslen(L"SERIAL_NUMBER=");

        // OLD CODE FOR OLD FORMAT
        //if ( sn_str[ 9] == L' ' ) sn_str[ 9]=L'\0'; // format: aaaa-nnnv 9 ch long
        //if ( sn_str[10] == L' ' ) sn_str[10]=L'\0'; // format: aaaa-nnnnv or aaaa-nnnvv 10 ch long
        //if ( AfxIsValidString(sn_str) && ( wcslen(sn_str)==9 || wcslen(sn_str)==10 ) )

        if ( sn_str[11] == L' ' ) sn_str[11]=L'\0'; // format: aaaa-nnnnv or aaaa-nnnvv 10 ch long
        if ( AfxIsValidString(sn_str) && ( wcslen(sn_str)==11 ) )
        {
          ADS_data_type sernum;
          if ( !ADS_init_parameter( ".SERIAL_NUMBER", &sernum, 20 ) )
          {
            _snprintf( (char*)sernum.val, 20, WtoA(sn_str) );
            if ( ADS_write_parameter( &sernum ) ) Message_box( L"Cannot write required serial number to PLC", MBOX_ERROR );
            else 
            {
              wchar_t txt[200+1];
              swprintf( txt, 200, L"Serial number of machine set to <%s>", sn_str );
              TRACE( txt );
              Message_box( txt, MBOX_INFO );
            }
          }
          else Message_box( L"Cannot read serial number from PLC", MBOX_ERROR );
          ADS_clean_parameter( &sernum );
        }
        else Message_box( L"ERROR: Unable to read required serial number from command line\n" ); 
      } 

      ADS_read_serialnumber();
      ASSERT( serial_number && AfxIsValidString(serial_number) );
      if ( strncmp( serial_number, MACHINE_ID, 20 ) )
      {
        CString name( MACHINE_ID );
        swprintf( msg_err, 200, L"ERROR: PLC MACHINE NAME <%s>\r\nIS DIFFERENT FROM SOFTWARE NAME <%s>", AtoW(serial_number), CString( MACHINE_ID ) ); // name ); // AtoW(MACHINE_ID) );
        Message_box( msg_err, MBOX_ERROR );
      }
      else
      {
        CString txt;

        // Read from PLC and prepare string with PLC ( string .SW_DESCRIPTION )
        ADS_data_type PLC_version;
        ADS_init_parameter( ".SW_VERSION", &PLC_version, 10 );

        CString sernum(MACHINE_ID);
        #ifdef _DEBUG
          txt.Format( L"Machine <%s> Model <%s> PLC version <%s> IVS version <%s> DEBUG", sernum, MODEL_NAME, AtoW((char*)PLC_version.val), VERSION_PC );
        #else
          txt.Format( L"Machine <%s> Model <%s> PLC version <%s> IVS version <%s> RELEASE", sernum, MODEL_NAME, AtoW((char*)PLC_version.val), VERSION_PC );
        #endif

        ADS_clean_parameter( &PLC_version );
        if (logger) logger->Add_string( &txt );
      }
	  */
	  //Pour removed Serial number checking 20171115

      /*
      // Check if NEW Machine serial_number has to be written/changed
      sn_pos = cmdline.Find(L"PGMEM=");
      if ( sn_pos>=0 )
      {
        wchar_t* sn_str = cmdline.GetBuffer(0)+sn_pos+wcslen(L"SERIAL_NUMBER=");
        if ( sn_str[ 9] == L' ' ) sn_str[ 9]=L'\0'; // format: aaaa-nnnv 9 ch long
        if ( sn_str[10] == L' ' ) sn_str[10]=L'\0'; // format: aaaa-nnnnv or aaaa-nnnvv 10 ch long
        if ( AfxIsValidString(sn_str) && ( wcslen(sn_str)==9 || wcslen(sn_str)==10 ) )
        { */
	  //Pour removed for FMC 20171115
      //#ifdef CRCODE
      //  ADS_data_type crcode;
      //  if ( IS_PC1 && !ADS_init_parameter( ".CRCODE", &crcode, 2, TRUE /*silent*/ ) )
      //  {
      //    if ( *((USHORT*)(crcode.val)) != CRCODE ) exit( 1354 );
      //    //TRACE( "PLC=%d - IVS=%d\n", *((USHORT*)(crcode.val)), CRCODE );
      //    ADS_clean_parameter( &crcode );
      //  }
      //#endif
	  //Pour removed for FMC 20171115
      #ifdef READ_CYCLES
        // Initialize cycles
        if ( ADS_init_parameter( ".CYCLES", &ADS_cycles, 4 ) )
  	    {
          msg.Format( L"Error in getting handle of <CYCLES>" );
    	    Message_box( msg, MBOX_ERROR );
	      }
        else
        {
          cycles_0 = cycles = ADS_read_int( &ADS_cycles );
          globaltimer.reset();
          TRACE("Initial read of cycles= %d / %d\n", cycles_0, cycles);
        }
      #endif


	  }
  #endif


//  #endif 



    

  ZeroMemory( ::my_circle, sizeof(::my_circle) );


  // FOR REYOUNG MACHINES CHANGE PASSWORD LEVEL REQUIRED FOR LOADING RECIPES TO 2
  #if SERIAL_N==201400037 || SERIAL_N==201400038 || SERIAL_N==201400039 || SERIAL_N==201400041 || SERIAL_N==201400045
    pwd_levels[8] = 2;
  #endif

  // For Guangdong Sunho Pharmaceutical Co.Ltd maintenance cannot delete recipes, change level to 3
  #if SERIAL_N==201400057 || SERIAL_N==201600003 || SERIAL_N==201400054
    pwd_levels[10] = 3;
  #endif

  // COMPUTE MINIMUM PASSWORD LEVEL REQUIRED TO ACCESS RECIPE WINDOW
  //pwd_levels[2] = pwd_levels[8];
  //if ( pwd_levels[2] > pwd_levels[ 9] ) pwd_levels[2] = pwd_levels[ 9];
  //if ( pwd_levels[2] > pwd_levels[10] ) pwd_levels[2] = pwd_levels[10];



  #ifdef WORKER_THREAD  // if defined uses worker threads to speed-up processing
    img_ptr = NULL;
    AfxBeginThread( processing_thread , LPVOID(0) , THREAD_PRIORITY_HIGHEST ); // first worker thread
    AfxBeginThread( processing_thread , LPVOID(1) , THREAD_PRIORITY_HIGHEST ); // second worker thread
  #endif



 // ADS_write_value( "CAROUSEL_HEIGHT_MNGR.CH_MIN_mm", 123.4, CTYPE_LREAL ); // Force flag into PLC high to enable/run FO camera


  #if defined THIRD_DEVIATOR // IF REQUIRED, ENABLE THIRD DEVIATOR INTO PLC
    ADS_write_value( ".F_3RDDEV", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high to enable 3rd deviator
  #endif

  #ifdef INPSCREW_ALARM // if defined enables input screw alarm in PLC
    ADS_write_value( ".F_INPSCREW_ALARM", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high 
  #endif

  #ifdef OUTTURNTABLE_SENSOR // if defined enables stopping when output turntable is full
    ADS_write_value( ".F_OUTTURNTABLE_SENSOR", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high 
  #endif

  #if defined REINSPECT_TRAY2
    ADS_write_value( ".F_RM_ENABLE", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high to enable/run dev2 for manual reinspection
  #endif

  #if defined FO_COLOR || defined NEWCAP_ORALCAP // IF REQUIRED, ENABLE FO_CAMERA INTO PLC
    ADS_write_value( ".F_FOCAMERA", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high to enable/run FO camera
  #endif

  #if defined LIQUID_COLOR // IF REQUIRED, ENABLE LQ_CAMERA INTO PLC
    ADS_write_value( ".F_LQCAMERA", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high to enable/run FO camera
  #endif

  #ifdef FILLEV 
  	Create_display_fillev();
    Create_menu_fillev();
  #endif

  #ifdef STOPPER_CTRL 
    AfxBeginThread( alarm_warning_3d , LPVOID(0), THREAD_PRIORITY_LOWEST );
  	Create_display_stopper_ctrl();
    Create_menu_stopper_ctrl();
  #endif


  #ifdef TIVS_A60
    AfxBeginThread( alarm_warning_3d , LPVOID(0), THREAD_PRIORITY_LOWEST );   // THREAD_PRIORITY_TIME_CRITICAL THREAD_PRIORITY_HIGHEST THREAD_PRIORITY_ABOVE_NORMAL THREAD_PRIORITY_NORMAL THREAD_PRIORITY_BELOW_NORMAL THREAD_PRIORITY_LOWEST THREAD_PRIORITY_IDLE
    if ( PathFileExists( LAYOUT_FILENAME ) ) layout_dsp = new CImage_layout( LAYOUT_FILENAME );
	  Create_display_TIVS_A60();
    Create_menu_TIVS_A60();
    //ADS_create_updatelist();
	ADS_create_updatelist_new(); //Pour added 20171115 changed the width of display
    Change_view(0); // first view

    #ifdef SYNCH_PARTIC  // If enabled synch of cameras A/D B/E C/F enabled in HW
      int pos = cmdline.Find(L"SYNCHCAM=");
      if ( IS_PC1 && pos>=0 )
      {
        int val = 0;

        CString txt;
        if ( logger )
        {
          txt.Format( L"SYNCHCAM command detected (%s)", cmdline );
          logger->Add_string( &txt );
        }
        //CString test=cmdline.Right(cmdline.GetLength()-pos-9);
        //pos+=9;
        swscanf( cmdline.Right(cmdline.GetLength()-pos-9).GetBuffer(0), L"%d", &val );

        if ( val>=10 && val<100 )
        {
          int val1 = -1;
          int val2 = -1;

          val1 = val / 10;
          val2 = val - val1*10;

          if ( val1>0 && val1<10 && val2>0 && val2<10 )
          {
            ADS_write_value("SYNCH_FLASHES.DELAY1",  val1, CTYPE_INT );
            ADS_write_value("SYNCH_FLASHES.DELAY2",  val2, CTYPE_INT );

            if ( logger )
            {
              txt.Format( L"delay1 set to %d - delay2 set to %d", val1, val2 );
              logger->Add_string( &txt );
            }


            TRACE("SYNCHCAM=%d detected - val1=%d - val2=%d\n", val, val1, val2 );
          }
        }

      }
    #endif

    #ifdef FO_COLOR
      precalc_circles(); // precalculate all circles required for processing
      precalc_ATNLUT();
    #endif
    #ifdef DOUBLE_REJET // When defined double reject on output is enabled (also in PLC SW)
      ADS_write_value( ".F_DOUBLE_REJECT", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high 
    #endif

	  //Pour removed 20180821
	  /*
    #ifdef HV_LEAKTEST   // If defined enables parameters and functions for HV leak test unit
      ADS_write_value( ".F_HVLK", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high 
    #endif
	*/
	  //Pour removed 20180821

    #ifdef NEW_TIP_V30 // new tip control developed for Kelun
      precalc_ATNLUT();
    #endif
  #endif

  #ifdef TIVS_A40
    AfxBeginThread( alarm_warning_3d , LPVOID(0), THREAD_PRIORITY_LOWEST );   // THREAD_PRIORITY_TIME_CRITICAL THREAD_PRIORITY_HIGHEST THREAD_PRIORITY_ABOVE_NORMAL THREAD_PRIORITY_NORMAL THREAD_PRIORITY_BELOW_NORMAL THREAD_PRIORITY_LOWEST THREAD_PRIORITY_IDLE
    if ( PathFileExists( LAYOUT_FILENAME ) ) layout_dsp = new CImage_layout( LAYOUT_FILENAME );
	  Create_display_TIVS_A40();
    Create_menu_TIVS_A40();
//	  Create_display_TIVS40_LQ();
//    Create_menu_TIVS40_LQ();    //Pour added for reminder 20171113
//    ADS_create_updatelist();
    ADS_create_updatelist_new();
    Change_view(0); // first view

    #ifdef NEWCAP_V21          // add new functions for V2.1 new_cap inspection
      ADS_write_value( "TRIGGER_DOUBLE_CAP.FREE_RUN", FALSE, CTYPE_BOOL8 ); // Force free_run flag for cap false (to fix problem for Guorui 201706)
    #endif


    #ifdef SYNCH_PARTIC  // If enabled synch of cameras A/D B/E C/F enabled in HW
      int pos = cmdline.Find(L"SYNCHCAM=");
      if ( IS_PC1 && pos>=0 )
      {
        int val = 0;

        CString txt;
        if ( logger )
        {
          txt.Format( L"SYNCHCAM command detected (%s)", cmdline );
          logger->Add_string( &txt );
        }
        //CString test=cmdline.Right(cmdline.GetLength()-pos-9);
        //pos+=9;
        swscanf( cmdline.Right(cmdline.GetLength()-pos-9).GetBuffer(0), L"%d", &val );

        if ( val>=10 && val<100 )
        {
          int val1 = -1;
          int val2 = -1;

          val1 = val / 10;
          val2 = val - val1*10;

          if ( val1>0 && val1<10 && val2>0 && val2<10 )
          {
            ADS_write_value("SYNCH_FLASHES.DELAY1",  val1, CTYPE_INT );
            ADS_write_value("SYNCH_FLASHES.DELAY2",  val2, CTYPE_INT );

            if ( logger )
            {
              txt.Format( L"delay1 set to %d - delay2 set to %d", val1, val2 );
              logger->Add_string( &txt );
            }


            TRACE("SYNCHCAM=%d detected - val1=%d - val2=%d\n", val, val1, val2 );
          }
        }

      }
    #endif


    #ifdef FO_COLOR
      precalc_circles(); // precalculate all circles required for processing
      precalc_ATNLUT();
    #endif
  #endif


  #ifdef TIVS_C40

/*    #if STN1==CAKESIDE_ARBACK  
      ADS_write_value( ".F_WAISTLAYERED", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high to enable/run area scan bk cameras
    #endif

    #if SERIAL_N==201400020 // LUYE PHARMA Yantai - old cap
      ADS_write_value( "TRIGGER_DOUBLE_CAP.FREE_RUN", FALSE, CTYPE_BOOL8 ); // Force free_run flag for cap false (to fix problem for Guorui 201706)
    #endif

    #ifdef NEWCAP_V21          // add new functions for V2.1 new_cap inspection
      ADS_write_value( "TRIGGER_DOUBLE_CAP.FREE_RUN", FALSE, CTYPE_BOOL8 ); // Force free_run flag for cap false (to fix problem for Guorui 201706)
    #endif*/

    AfxBeginThread( alarm_warning_3d , LPVOID(0), THREAD_PRIORITY_LOWEST );   // THREAD_PRIORITY_TIME_CRITICAL THREAD_PRIORITY_HIGHEST THREAD_PRIORITY_ABOVE_NORMAL THREAD_PRIORITY_NORMAL THREAD_PRIORITY_BELOW_NORMAL THREAD_PRIORITY_LOWEST THREAD_PRIORITY_IDLE
    if ( PathFileExists( LAYOUT_FILENAME ) ) layout_dsp = new CImage_layout( LAYOUT_FILENAME );
    precalc_circles(); // precalculate all circles required for processing
    precalc_ATNLUT();
    Create_display_TIVS_C40();
    Create_menu_TIVS_C40();
    ADS_create_updatelist_new();
    Change_view(0); // first view
  #endif


  #ifdef TIVS_C60
    AfxBeginThread( alarm_warning_3d , LPVOID(0), THREAD_PRIORITY_LOWEST );   // THREAD_PRIORITY_TIME_CRITICAL THREAD_PRIORITY_HIGHEST THREAD_PRIORITY_ABOVE_NORMAL THREAD_PRIORITY_NORMAL THREAD_PRIORITY_BELOW_NORMAL THREAD_PRIORITY_LOWEST THREAD_PRIORITY_IDLE
    if ( PathFileExists( LAYOUT_FILENAME ) ) layout_dsp = new CImage_layout( LAYOUT_FILENAME );
    precalc_circles(); // precalculate all circles required for processing
    precalc_ATNLUT();
    Create_display_TIVS_C60();
    Create_menu_TIVS_C60();
    ADS_create_updatelist_new();
    Change_view(0); // first view
  #endif


  #ifdef TIVS_F40

    #if STN1==CAKESIDE_ARBACK  
      ADS_write_value( ".F_WAISTLAYERED", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high to enable/run area scan bk cameras
    #endif

    #ifdef NEWCAP_V21          // add new functions for V2.1 new_cap inspection
      ADS_write_value( "TRIGGER_DOUBLE_CAP.FREE_RUN", FALSE, CTYPE_BOOL8 ); // Force free_run flag for cap false (to fix problem for Guorui 201706)
    #endif

    AfxBeginThread( alarm_warning_3d , LPVOID(0), THREAD_PRIORITY_LOWEST );   // THREAD_PRIORITY_TIME_CRITICAL THREAD_PRIORITY_HIGHEST THREAD_PRIORITY_ABOVE_NORMAL THREAD_PRIORITY_NORMAL THREAD_PRIORITY_BELOW_NORMAL THREAD_PRIORITY_LOWEST THREAD_PRIORITY_IDLE
    if ( PathFileExists( LAYOUT_FILENAME ) ) layout_dsp = new CImage_layout( LAYOUT_FILENAME );
    precalc_circles(); // precalculate all circles required for processing
    precalc_ATNLUT();
    Create_display_TIVS_F40();
    Create_menu_TIVS_F40();
//    Create_display_TIVS40_FD();
//    Create_menu_TIVS40_FD();

//    ADS_create_updatelist();
    ADS_create_updatelist_new();


    Change_view(0); // first view
  #endif

	  #ifdef TIVS_F20

    #if STN1==CAKESIDE_ARBACK  
      ADS_write_value( ".F_WAISTLAYERED", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high to enable/run area scan bk cameras
    #endif

    #ifdef NEWCAP_V21          // add new functions for V2.1 new_cap inspection
      ADS_write_value( "TRIGGER_DOUBLE_CAP.FREE_RUN", FALSE, CTYPE_BOOL8 ); // Force free_run flag for cap false (to fix problem for Guorui 201706)
    #endif

    AfxBeginThread( alarm_warning_3d , LPVOID(0), THREAD_PRIORITY_LOWEST );   // THREAD_PRIORITY_TIME_CRITICAL THREAD_PRIORITY_HIGHEST THREAD_PRIORITY_ABOVE_NORMAL THREAD_PRIORITY_NORMAL THREAD_PRIORITY_BELOW_NORMAL THREAD_PRIORITY_LOWEST THREAD_PRIORITY_IDLE
    if ( PathFileExists( LAYOUT_FILENAME ) ) layout_dsp = new CImage_layout( LAYOUT_FILENAME );
    precalc_circles(); // precalculate all circles required for processing
    precalc_ATNLUT();
    Create_display_TIVS_F20();
    Create_menu_TIVS_F20();
//    Create_display_TIVS40_FD();
//    Create_menu_TIVS40_FD();

//    ADS_create_updatelist();
    ADS_create_updatelist_new();


    Change_view(0); // first view
  #endif


  #ifdef TIVS_C20
    AfxBeginThread( alarm_warning_3d , LPVOID(0), THREAD_PRIORITY_LOWEST );   // THREAD_PRIORITY_TIME_CRITICAL THREAD_PRIORITY_HIGHEST THREAD_PRIORITY_ABOVE_NORMAL THREAD_PRIORITY_NORMAL THREAD_PRIORITY_BELOW_NORMAL THREAD_PRIORITY_LOWEST THREAD_PRIORITY_IDLE
    if ( PathFileExists( LAYOUT_FILENAME ) ) layout_dsp = new CImage_layout( LAYOUT_FILENAME );
    precalc_circles(); // precalculate all circles required for processing
    precalc_ATNLUT();
    Create_display_TIVS_C20();
    Create_menu_TIVS_C20();
    //ADS_create_updatelist();
	ADS_create_updatelist_new();
    Change_view(0); // first view
  #endif


	//Pour added 20180523
	  #ifdef TIVS_A20
    AfxBeginThread( alarm_warning_3d , LPVOID(0), THREAD_PRIORITY_LOWEST );   // THREAD_PRIORITY_TIME_CRITICAL THREAD_PRIORITY_HIGHEST THREAD_PRIORITY_ABOVE_NORMAL THREAD_PRIORITY_NORMAL THREAD_PRIORITY_BELOW_NORMAL THREAD_PRIORITY_LOWEST THREAD_PRIORITY_IDLE
    if ( PathFileExists( LAYOUT_FILENAME ) ) layout_dsp = new CImage_layout( LAYOUT_FILENAME );
    //precalc_circles(); // precalculate all circles required for processing
    //precalc_ATNLUT();
    Create_display_TIVS_A20();
    Create_menu_TIVS_A20();
//    ADS_create_updatelist();
    ADS_create_updatelist_new();
    Change_view(0); // first view
  #endif
	//Pour added 20180523


  #ifdef TIVS_A20L
    AfxBeginThread( alarm_warning_3d , LPVOID(0), THREAD_PRIORITY_LOWEST );   // THREAD_PRIORITY_TIME_CRITICAL THREAD_PRIORITY_HIGHEST THREAD_PRIORITY_ABOVE_NORMAL THREAD_PRIORITY_NORMAL THREAD_PRIORITY_BELOW_NORMAL THREAD_PRIORITY_LOWEST THREAD_PRIORITY_IDLE
    if ( PathFileExists( LAYOUT_FILENAME ) ) layout_dsp = new CImage_layout( LAYOUT_FILENAME );
    //precalc_circles(); // precalculate all circles required for processing
    //precalc_ATNLUT();
    Create_display_TIVS_A20L();
    Create_menu_TIVS_A20L();
//    ADS_create_updatelist();
    ADS_create_updatelist_new();
    Change_view(0); // first view
  #endif


	#ifdef TIVS_S40
    AfxBeginThread( alarm_warning_3d , LPVOID(0), THREAD_PRIORITY_LOWEST );   // THREAD_PRIORITY_TIME_CRITICAL THREAD_PRIORITY_HIGHEST THREAD_PRIORITY_ABOVE_NORMAL THREAD_PRIORITY_NORMAL THREAD_PRIORITY_BELOW_NORMAL THREAD_PRIORITY_LOWEST THREAD_PRIORITY_IDLE
    if ( PathFileExists( LAYOUT_FILENAME ) ) layout_dsp = new CImage_layout( LAYOUT_FILENAME );
    Create_display_TIVS_S40();
    Create_menu_TIVS_S40();
    ADS_create_updatelist_new();
    Change_view(0); // first view
    //precalc_circles(); // precalculate all circles required for processing
    precalc_ATNLUT();
	#endif


		#ifdef TIVS_S60
    AfxBeginThread( alarm_warning_3d , LPVOID(0), THREAD_PRIORITY_LOWEST );   // THREAD_PRIORITY_TIME_CRITICAL THREAD_PRIORITY_HIGHEST THREAD_PRIORITY_ABOVE_NORMAL THREAD_PRIORITY_NORMAL THREAD_PRIORITY_BELOW_NORMAL THREAD_PRIORITY_LOWEST THREAD_PRIORITY_IDLE
    if ( PathFileExists( LAYOUT_FILENAME ) ) layout_dsp = new CImage_layout( LAYOUT_FILENAME );
    Create_display_TIVS_S60();
    Create_menu_TIVS_S60();
    ADS_create_updatelist_new();
    Change_view(0); // first view
    //precalc_circles(); // precalculate all circles required for processing
    precalc_ATNLUT();
	#endif





//Pour added TIVS-A40L 20180124
	#ifdef TIVS_A40L
    AfxBeginThread( alarm_warning_3d , LPVOID(0), THREAD_PRIORITY_LOWEST );   // THREAD_PRIORITY_TIME_CRITICAL THREAD_PRIORITY_HIGHEST THREAD_PRIORITY_ABOVE_NORMAL THREAD_PRIORITY_NORMAL THREAD_PRIORITY_BELOW_NORMAL THREAD_PRIORITY_LOWEST THREAD_PRIORITY_IDLE
    if ( PathFileExists( LAYOUT_FILENAME ) ) layout_dsp = new CImage_layout( LAYOUT_FILENAME );
    //precalc_circles(); // precalculate all circles required for processing
    //precalc_ATNLUT();
    Create_display_TIVS_A40L();
    Create_menu_TIVS_A40L();
//    ADS_create_updatelist();
    ADS_create_updatelist_new();
    Change_view(0); // first view
  #endif

//Pour added TIVS-A40L 20180124

//  if ( password_mngr ) password_mngr->set_new_level();
//  Invalidate( TRUE );

//  TRACE( L"Create_menu() completed\n");
//  TRACE("Create_menu() completata\n");

//	Create_display();
//  TRACE("Create_display() completata\n");
//  TRACE( L"Create_display() completed\n");

  // Inizializzazione comunicazione DIGICROWN
//  if ( !strncmp(PC_name,"PC1",3) ) DGCROWN_communication_init();

  // Inizializzazione decodifica ricette in ingresso
//  SG_init_fields();

  // Inizializzazione strutture dati per elaborazione
//  gb_compute( 1.0 );
//  sp_prepare_cf();


//  SG_init_fields();
//  timer.reset();
//  SG_read_input_recipe( "o_2c280602.txt" );
//  TRACE("Tempo lettura e decodifica %d us\n", timer.elapsed_us() );
//  SG_terminate_fields();


//  app_timer = SetTimer( 1 , 1000 , Timer_update ); // Creazione timer di aggiornamento a 1 secondo
  
  #ifdef CRCAM
    crcam = crcam & 0xFFFF;
    TRACE("crcam=%08X - CRCAM=%08X\n",crcam,CRCAM);
    if ( IS_PC1 && CRCAM!=crcam && !debug ) // Only on PC1 
    {
      CString msg;
      msg.Format( L"Error n.4563/%d", CRCAM-crcam );
      Message_box( msg, MBOX_ERROR );
      if ( !debug ) exit( 2354 ); // If debugging mode NOT active
    }
  #endif


	#ifdef CFR21
    //finestra di log
    login_wnd = new CCFR21;
  #endif

	#ifdef CPRINT
    Print_wnd = new CPrintToPDF;
  #endif

/*
  #ifdef BASLER_SDK
    Basler_init();
    //TRACE("<Basler_init> completata\n");
    TRACE( L"Basler_init() completed\n");
  #endif
  */

  if ( info_wnd && info_wnd->m_hWnd ) info_wnd->DestroyWindow();

	//Beep( 1000 , 40 );

	Invalidate();
  //TRACE("Prima Invalidate completata\n");
  TRACE( L"First Invalidate completed\n" );


	//recipe_wnd = NULL;
	if ( container_main /*container_main*/ )
	{
    //recipe_wnd = new CRecipe_manager; // Creazione del gestore di ricette

  	CRect container_re, recipe_re; 
	  container_main->GetWindowRect( &container_re ); // leggo le coordinate del menu generale
	  //recipe_wnd->GetWindowRect( &recipe_re );        // leggo le coordinate della finestra ricette

    #ifdef CHILD_ALIGN_LEFT
	    int offset_x = container_re.left - recipe_re.right - 4;
	    int offset_y = container_re.top  - recipe_re.top;
    #endif

    #ifdef CHILD_ALIGN_BELOW
	    int offset_x = container_re.left   - recipe_re.left + 0;
	    int offset_y = container_re.bottom - recipe_re.top  + 2;
    #endif

    #ifndef offset_x
      #define offset_x 0
    #endif
    
    #ifndef offset_y
      #define offset_y 0
    #endif

	  
//    recipe_re.OffsetRect( offset_x, offset_y );
//	  recipe_wnd->MoveWindow( &recipe_re );
	}
  TRACE( L"<container_main> created\n");
//  TRACE("Creazione <container_main> completata\n");

	// Carico i parametri di default
	if ( file_manager.Load_all( DEFAULT_FILE ) )
	{
		msg.Format( string_026[lng], file_manager.msg_err );
    Message_box( msg, MBOX_ERROR );
    //#ifdef TIVS_C40 // MODEL TIVS-C40 - Update freezemode_on after loading recipe
    #if defined TIVS_C40 || defined TIVS_C60  // if combo machine - Update freezemode_on after loading recipe
      if ( IS_PC1 ) Change_mode( -1 ); // Only update according to current value
    #endif
	} 
//  TRACE("Caricamento <default.ips> completato\n");
  TRACE( L"Startup parameters loaded from <default.ips>\n");

  // Caricamento o acquisizione fondo e verifica luminosit?
  //Get_background( 0+256 ); // body + try to load from disk
  //Get_background( 1+256 ); // neck + try to load from disk


//	TRACE("On_init completed. IsWindowVisible()=%d, parent=%d\n", IsWindowVisible(), GetParent()->IsWindowVisible() );
	TRACE( L"On_init_prog completed. IsWindowVisible()=%d, parent=%d\n", IsWindowVisible(), GetParent()->IsWindowVisible() );
//  VERIFY( SetWindowPos(&CWnd::wndBottom, 0, 0, 0, 0, SWP_NOMOVE|SWP_NOSIZE|SWP_NOACTIVATE) );


//  On_exit_prog();

//  AfxGetMainWnd()->RedrawWindow();

  if ( password_mngr ) 
  {
  	if ( cmdline.Find(L"SETPWDSU")>=0 )
    {
      password_mngr->current_user = 3; // SUPERUSER_LEVEL;
    }
    password_mngr->set_new_level();
  }


  #ifdef SHOW_BATCHNUMBER  // show current batch number in machine_txt field
    msg.Format( string_061[lng], file_manager.recipe_name, batch_mngr->current.code );
  #else
    msg.Format( string_060[lng], file_manager.recipe_name );
  #endif

  if ( machine_txt ) machine_txt->SetText( msg, 0, TXT_GREEN );


  TRACE("CChildView::On_init_prog completed succesfully\n");
	return TRUE;
	// TODO: Add your message handler code here

}



void CChildView::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	// TODO: Add your message handler code here and/or call default
//	TRACE("CChildView::OnKeyDown: Premuto %d - nRep=%d, nFlags=%d\n", nChar, nRepCnt, nFlags );
	TRACE( L"CChildView::OnKeyDown: pushed=%d - nRep=%d, nFlags=%d\n", nChar, nRepCnt, nFlags );

	CWnd::OnKeyDown(nChar, nRepCnt, nFlags);
}


/* Close all existing menus (to display recipe window) */
void CChildView::Close_all_menus(void)
{
	if ( container_main /*container_main*/ )
	{
		for ( int i=0 ; i<container_main->n_children ; i++ ) container_main->children[i]->Hide();
	}
  pView->RedrawWindow();

}




/* Create menu for all functions/parameters */
void CChildView::Create_menu_stopper_ctrl(void)
{

  CRect rett;
  GetClientRect( &rett );

	rett.top    =    OFFS_COORDY;
  rett.bottom = rett.top + 160;
	rett.left   =    OFFS_COORDY;
  rett.right  =   rett.Width();

  num_container = 0;

	// --------        CONTENITORE BASE - Livello 0       ------------
	container_main = new CContainer_main( L"menu base", rett, this, IDD_CONTAINER );
	container_main->ShowWindow( SW_SHOW );

	CRect container_re; 
  container_main->GetWindowRect( &container_re ); // leggo le coordinate del menu generale


  #define BRD_SUP       14

  #define COLA_SX      440
  #define COLB_SX      (COLA_SX+SPACE_X+BTN_DIMX)
  #define COLC_SX      (COLB_SX+SPACE_X+BTN_DIMX)
  #define COLD_SX      (COLA_SX-SPACE_X-BTN_DIMX)

  #define SPACE_X       14
  #define SPACE_Y       14
  #define BTN_DIMX     250 // BUTTONS WIDTH
  #define BTN_DIMY      58 // BUTTONS HEIGHT


	// * * * *    PRIMA COLONNA      * * * *
	CMenu_button::hook_pos = CMenu_button::bottom_left; // child di livello 1 allineati sotto e a sinistra

	// AUTOMATION BUTTON (num_menu_btn=0)
  rett.top    =                BRD_SUP;
  rett.bottom = rett.top    + BTN_DIMY;
  rett.left   =                COLA_SX;
  rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_900[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[0] );
  //if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;

  //container_main->GetWindowRect( &container_re ); // leggo le coordinate del menu generale


 	// INSPECTION BUTTON  (num_menu_btn=1)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_902[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*740*/ ); // regolo dimensione sottomenu parametri ispezione
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[1] );
  num_menu_btn++;

  //container_main->GetWindowRect( &container_re ); // leggo le coordinate del menu generale

	// * * * *     SECONDA COLONNA      * * * *
	// PULSANTE RICETTE  (num_menu_btn=2)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLB_SX;
	rett.right  = rett.left   + BTN_DIMX;
	recipe_btn = menu_btn[num_menu_btn] = new CMenu_button( string_120[lng], container_main, &Recipe_management );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[2] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;

	// PULSANTE AVVIO/ARRESTO INSPECTION  (num_menu_btn=3)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	inspection_btn = menu_btn[num_menu_btn] = new CMenu_button( string_150[lng], container_main, &Inspection_startstop  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[3] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;

  container_main->GetWindowRect( &container_re ); // leggo le coordinate del menu generale

	// * * * *     TERZA COLONNA      * * * *

	// PULSANTE UTILITA'/FUNZIONI  (num_menu_btn=4)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLC_SX;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_130[lng], container_main );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*450*/ );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[4] );
  num_menu_btn++;

  container_main->GetWindowRect( &container_re ); // leggo le coordinate del menu generale
  TRACE("new dim %dx%d\n", container_re.Width(), container_re.Height() );

	// PULSANTE DI USCITA  (num_menu_btn=5)
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;

	exit_btn = menu_btn[num_menu_btn] = new CMenu_button( string_140[lng], container_main, &On_exit_btn );

  //container_main->GetWindowRect( &container_re ); // leggo le coordinate del menu generale
  //TRACE("new dim %dx%d\n", container_re.Width(), container_re.Height() );

  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[5] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;
  
 // container_main->GetWindowRect( &container_re ); // leggo le coordinate del menu generale
 // TRACE("new dim %dx%d\n", container_re.Width(), container_re.Height() );
  

  /*
	// * * * *     TO LEFT DISPLAY SWITCH  (num_menu_btn=6)    * * * *
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLD_SX;
	rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], container_main, &Change_view, -1 );
  menu_btn[num_menu_btn]->MoveWindow( &rett );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;
  */
  container_main->GetWindowRect( &container_re ); // leggo le coordinate del menu generale
  TRACE("new dim %dx%d\n", container_re.Width(), container_re.Height() );
  container_re.DeflateRect( 0, 0, 0, 150 );
  container_main->MoveWindow( container_re );
  


	/*
  // * * * *     LEFT BOTTOM BATCHES   (num_menu_btn=7)   * * * *
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_1300[lng], container_main );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[6] );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;
  */

  #undef BRD_SUP
  #undef COLA_SX
  #undef COLB_SX
  #undef COLC_SX
  #undef SPACE_X
  #undef SPACE_Y
  #undef BTN_DIMX
  #undef BTN_DIMY

	CParameter::dim_ctrl.cy      = 25; // Regolo la dimensione verticale
	CContainer_wnd::mode         = CContainer_wnd::top_left;
	CContainer_wnd::use_ext_rect = false;
	CMenu_button::hook_pos       = CMenu_button::top_right; // child di livello >1 allineati a destra


	//CRect container_re; 


  // ***************************************************************************
  //
  //                        AUTOMATION PARAMETERS
  //
  // ***************************************************************************

  if ( IS_PC1 )
  {

    // *******  SUB-MENU FOR CAROUSEL - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1510[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".PRODSPEED",                    CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1532[lng], string_pcm[lng],   350.0,    10.0,  500.0, &file_manager  ); // Jog high speed (pcs/min)
    //if ( password_mngr ) password_mngr->insert_hmi( parameter[num_params-1], pwd_levels[7] );

    parameter[num_params++] = new CParameter( ".JOGSPEED",                     CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1536[lng], string_pcm[lng],   150.0,    10.0,  500.0, &file_manager  ); // Jog low speed (pcs/min)
    parameter[num_params++] = new CParameter( ".ACCELERATION",                 CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1210[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // acceleration
    parameter[num_params++] = new CParameter( ".DECELERATION",                 CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1212[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // deceleration
    parameter[num_params++] = new CParameter( ".JERK",                         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1208[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // jerk
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( "STARWHEEL_AXIS.ZEROPOS",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1540[lng], string_unit[lng],  -0.850,    -4.0,    4.0, &file_manager  ); // Carousel zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    
    parameter[num_params  ] = new CParameter( "INPUT_BELT.SPEED",              CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1550[lng], string_hz[lng],     25.0,     0.0,   80.0, &file_manager  ); // Carousel zero position (units)
    parameter[num_params++]->format_spc = L"%.1lf";

    parameter[num_params  ] = new CParameter( "OUTPUT_BELT.SPEED",        CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1552[lng], string_hz[lng],     25.0,    0.0,   80.0, &file_manager  ); // Carousel zero position (units)
    parameter[num_params++]->format_spc = L"%.1lf";

    num_menu_btn++;

    /*
    // *******  SUB-MENU FOR GRIPPERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1610[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1610[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".OPEN_OFFSET",       CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1620[lng], string_step[lng],   55.4,   -1.0,    60.1, &file_manager  ); // Grippers opening phase
    parameter[num_params++] = new CParameter( ".ANT_OPEN_MAX",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1622[lng], string_step[lng],    0.5,    0.0,     2.0, &file_manager  ); // Grippers opening advance 
    parameter[num_params++] = new CParameter( ".OPEN_PRESSURE",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1624[lng], string_unit[lng],    3.5,    0.0,     8.0, &file_manager  ); // Grippers opening pressure
    parameter[num_params++] = new CParameter( ".CLOSE_OFFSET",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1630[lng], string_step[lng],   46.7,   -1.0,    60.1, &file_manager  ); // Grippers closing phase
    parameter[num_params++] = new CParameter( ".ANT_CLOSE_MAX",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1632[lng], string_step[lng],    0.5,    0.0,     2.0, &file_manager  ); // Grippers closing advance 
    parameter[num_params++] = new CParameter( ".CLOSE_PRESSURE",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1634[lng], string_unit[lng],    1.5,    0.0,     8.0, &file_manager  ); // Grippers closing pressure 
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GRIPPERS",  CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1612[lng],              L"",      0,      0,       1, &file_manager ); // check opening/closing
    parameter[num_params++] = new CParameter( ".GROPEN_DELAY",      CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1614[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for opening error
    parameter[num_params++] = new CParameter( ".GRCLOSE_DELAY",     CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1616[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for closing error
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params  ] = new CParameter( ".F_CLOSED_LOOP",     CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1636[lng],              L"",      0,      0,       1                ); // closed loop
    f_closed_loop = parameter[num_params++];
    ASSERT( f_closed_loop==parameter[num_params-1] );

    num_menu_btn++;
    */


    // *******  SUB-MENU FOR DEVIATORS/OUTPUT - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1640[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1640[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); //380 );
    int main_menu_btn = num_menu_btn;

    parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_330[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    parameter[num_params++] = new CParameter( ".F_ENABLE_LIGHTCHK",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_332[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MAX_WIDTH", CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1639[lng], string_step[lng],    0.9,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MIN_WIDTH", CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1638[lng], string_step[lng],    0.1,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GOODS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1660[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output goods
    parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS1",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1662[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects1 
    //parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS2",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1664[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects2

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "PRODUCT_FLOW.LOAD_VAL",           CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1654[lng], string_unit[lng],      0,      0,  1023  ); // Loading initial value
    parameter[num_params++] = new CParameter( ".F_REJECT_SIMULATE",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1656[lng],              L"",      0,      0,     1  ); // rejects simulation
    num_menu_btn++;

    // DELAYS
    menu_btn[num_menu_btn] = new CMenu_button( string_1750[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1750[lng] );
    //menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    //parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_330[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn-1]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1752[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1754[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1756[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1758[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej1 full
    //parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1760[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej2 full
    //parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1762[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej2 full
    num_menu_btn++;

    // DISTANCES
    menu_btn[num_menu_btn] = new CMenu_button( string_1653[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1653[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV1",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1641[lng], string_step[lng],   77.50,  20.0, 100.0, &file_manager  ); // Distance input photosens - first deviator 
    //parameter[num_params++] = new CParameter( ".DIST_DEV1_DEV2",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1645[lng], string_step[lng],    4.00,   1.0,  10.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_GOOD",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1642[lng], string_step[lng],   82.75,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ1",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1643[lng], string_step[lng],   87.77,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    //parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ2",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1644[lng], string_step[lng],   95.09,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWI",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1646[lng], string_step[lng],    2.3,    0.0,   4.0, &file_manager  ); // Main starwheel suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWO",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1648[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Main starwheel blowing lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDI",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1650[lng], string_step[lng],    1.3,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDO",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1652[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels blowing lenght (steps)
    num_menu_btn++;

    /*
    // *******  SUB-MENU FOR FIRST SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1700[lng], menu_btn[0]->child );
    //UINT nmbt = num_menu_btn-1;

    file_manager.Add_separator( string_1700[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "SEND_SPIN_PARAMETERS.RUN",                 CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1710[lng],              L"",      1,      0,     1                 ); // send data
 
    menu_btn[num_menu_btn+1]  = new CMenu_button( string_1710[lng],  menu_btn[num_menu_btn]->child, &Send_spin_parameters      ); // ATTENTION TO num_menu_btn!!!

    menu_btn[num_menu_btn]->child->posy += 30; // Set vertical position
    parameter[num_params++] = new CParameter( ".ALIGN_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1718[lng],              L"",      1,      0,     1, &file_manager  ); // enable alignment spin cycle
    parameter[num_params++] = new CParameter( ".SPIN1_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 1
    parameter[num_params++] = new CParameter( ".VEL1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],   1000,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   3000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN1",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY1",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN1_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle1
    num_menu_btn++;

    num_menu_btn++; // for send_spin_parameters


    // *******  SUB-MENU FOR SECOND SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1701[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1701[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN2_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 2
    parameter[num_params++] = new CParameter( ".VEL2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    800,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN2",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     12,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY2",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN2_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle2
    num_menu_btn++;


    // *******  SUB-MENU FOR THIRD SPINNING - num_menu_btn=  ******* 
    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM
      menu_btn[num_menu_btn] = new CMenu_button( string_1707[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1707[lng] );
    #else
      menu_btn[num_menu_btn] = new CMenu_button( string_1703[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1703[lng] );
    #endif
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN3_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 2
    parameter[num_params++] = new CParameter( ".VEL3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    180,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN3",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],      4,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY3",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for cosmetic
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN_LINE",     CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup
    num_menu_btn++;

    */


    // *******  SUB-MENU FOR EJECTOR MASKS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1668[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1668[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( ".F_ENABLE_SPINCHK",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1666[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV2_SPINCHK",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1667[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
   
    parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE1",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1670[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1672[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1674[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1675[lng],  L"",   0,   0,   1, &file_manager ); // 
    
    /*
    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM  // Station 3 is for particle
      parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1673[lng],  L"",   0,   0,   1, &file_manager ); // 
    #else // Normal cosmetic
      parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1678[lng],  L"",   0,   0,   1, &file_manager ); // 
    #endif
     */

    num_menu_btn++;

    // *******  SUB-MENU FOR TRIGGERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1690[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1690[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params  ] = new CParameter( ".TIPCAP_TRIGGER_PHASE",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1691[lng], string_step[lng], 0.10, 0.0, 0.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";

    num_menu_btn++;


    // *******  SUB-MENU FOR CALIBRATION/ADVANCED PARAMETERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1800[lng], menu_btn[0]->child );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[7] );
    file_manager.Add_separator( string_1800[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    calibration_menu = menu_btn[num_menu_btn];
    main_menu_btn = num_menu_btn;
    num_menu_btn++;


    // ABC phases
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1809[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1809[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".INPUT_PHASE_A",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1810[lng], string_step[lng],   1.50,    0.0,   3.0, &file_manager  ); // Input phase for A valves
    parameter[num_params++] = new CParameter( ".INPUT_PHASE_B",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1812[lng], string_step[lng],   2.50,    0.0,   3.0, &file_manager  ); // Input phase for B valves
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCA",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1820[lng], string_step[lng],   2.50,    0.0,   4.0, &file_manager  ); // Input cam phase for A cameras
    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCB",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1822[lng], string_step[lng],   3.50,    0.0,   4.0, &file_manager  ); // Input cam phase for B cameras
    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCC",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1824[lng], string_step[lng],   0.50,    0.0,   4.0, &file_manager  ); // Input cam phase for C cameras
    num_menu_btn++;


    // Spin offsets and distances
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1848[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1848[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".DIST_LOAD_TCA",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1860[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and tip/cap cameras
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1A",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1864[lng], string_unit[lng],    7,    0,   15, &file_manager  ); // Distance between input and first part A
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1B",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1865[lng], string_unit[lng],    7,    0,   15, &file_manager  ); // Distance between input and first part B
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1C",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1866[lng], string_unit[lng],    8,    0,   15, &file_manager  ); // Distance between input and first part C
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1D",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1867[lng], string_unit[lng],    8,    0,   15, &file_manager  ); // Distance between input and first part D
    num_menu_btn++;





    // *******  SUB-MENU FOR BATCH - num_menu_btn=7  ******* 
/*    menu_btn[num_menu_btn] = new CMenu_button( string_1310[lng], menu_btn[7]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position */

    menu_btn[num_menu_btn++] = new CMenu_button( string_1310[lng],  menu_btn[7]->child, &Reset_statistics      ); 

    if ( batch_mngr )
    {
      // batch start/stop
      menu_btn[num_menu_btn++] = new CMenu_button( string_1304[lng],  menu_btn[7]->child, &Batch_startstop     ); 
      batch_btn = menu_btn[num_menu_btn-1];
      if ( batch_mngr->current.status ) batch_btn->SetWindowTextW( string_1306[lng] );

      // batch print/report
      menu_btn[num_menu_btn++] = new CMenu_button( string_1308[lng],  menu_btn[7]->child, &Batch_report        ); 
    }

  }



  
//    ASSERT(menu_btn[num_menu_btn]==NULL);


  // ***************************************************************************
  //
  //                           PARAMETRI DI ISPEZIONE/MISURA
  //
  // ***************************************************************************

	parameter[num_params++] = new CParameter( &show_rejects,  CTYPE_BOOL8, 0, menu_btn[1]->child, string_2124[lng],   0,                1,  0,   0, NULL            );
	parameter[num_params++] = new CParameter( &pseudo_colors, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2122[lng],   0,                1,  0,   0, NULL, &Set_LUT  );

  // -----------------------------   S O T T O M E N U     O F     E A C H     C A M E R A    ---------------------------------------------
	for ( UINT i=0 ; i<num_tlc ; i++ ) // Sotto gruppo parametri telecamere - Livello 1 - menu_btn[20,21,22]
  {
    wchar_t msg[50+1];
//    swprintf( msg, string_810[lng], i+1 );
    swprintf( msg, 50, string_800[lng], i, camera[i].name );
	  menu_btn[num_menu_btn] = new CMenu_button( msg, menu_btn[1]->child );
	  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*300*/ );
    file_manager.Add_separator( msg );

    parameter[num_params++] = new CParameter( &camera[i].shutter,    CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
    parameter[num_params++] = new CParameter( &camera[i].frame_rate, CTYPE_REAL,  0, menu_btn[num_menu_btn]->child, string_2066[lng], string_fps [lng],   50.0,               0.0,            6000.0, &file_manager, &Set_camera, i );
    num_menu_btn++;

    int menu_btn_par = num_menu_btn-1;

    if ( i<3 ) // tip/cap dedicated parameters
    {
      parameter[num_params++] = new CParameter( &camera[i].trigger,    CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
      if ( tip_insp[i] ) tip_insp[i]->Add_menu_parameters( menu_btn[num_menu_btn-1]->child );
    }

  }

  menu_btn[1]->child->posy += 10; // Set vertical position

  // particle start/stop learning - show learning
	parameter[num_params++] = new CParameter( &learning,    CTYPE_BOOL8, 0, menu_btn[1]->child, string_2052[lng], 0,  0,  0, 1, NULL, &Learn_reflections );

  //menu_btn[1]->child->posy += 10; // Set vertical position

  // Add reflections sub-menu
  int refl_menu = num_menu_btn;
  menu_btn[num_menu_btn++] = new CMenu_button( string_2034[lng], menu_btn[1]->child );
	menu_btn[refl_menu]->child->new_size( 320, 100 );

  menu_btn[num_menu_btn++] = new CMenu_button( string_2054[lng], menu_btn[refl_menu]->child, &Show_reflections   );
  menu_btn[num_menu_btn++] = new CMenu_button( string_2042[lng], menu_btn[refl_menu]->child, &Filter_reflections );
  menu_btn[num_menu_btn++] = new CMenu_button( string_2036[lng], menu_btn[refl_menu]->child, &Export_reflections );
  menu_btn[num_menu_btn++] = new CMenu_button( string_2038[lng], menu_btn[refl_menu]->child, &Import_reflections );


  // ***************************************************************************
  //
	//               ADD FUNCTIONS/UTILITIES	( container menu_btn[4] )
  //
  // ***************************************************************************

  parameter[num_params++] = new CParameter( ".O_MACHINE_LIGHT", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_124[lng], L"", 0, 0, 1 ); // machine lights

  parameter[num_params++] = new CParameter( ".F_RUN_BELTS",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_128[lng], L"", 1, 0, 1 ); // run belt/s

  menu_btn[num_menu_btn] = new CMenu_button( string_160[lng], menu_btn[4]->child, &Movie_startstop   );
	movie_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
  }

	menu_btn[num_menu_btn] = new CMenu_button( string_170[lng], menu_btn[4]->child, &Save_images       );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveimages_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

//	parameter[num_params++] = new CParameter( &datarec_on, CTYPE_BOOL8, 0, menu_btn[4]->child, string_2130[lng], 0,  0,  0, 1, NULL, NULL );
	menu_btn[num_menu_btn] = new CMenu_button( string_304[lng], menu_btn[4]->child, &Data_record       );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  datarec_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

	menu_btn[num_menu_btn] = new CMenu_button( string_320[lng], menu_btn[4]->child, &Save_inspections  ); // Save Inspections
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveinsp_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

	menu_btn[num_menu_btn] = new CMenu_button( string_324[lng], menu_btn[4]->child, &Save_sequences  ); // Save Sequences
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveseq_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  //#ifdef DEBUGPC //_DEBUG
  if ( test_process )
  {
	  //menu_btn[num_menu_btn++] = new CMenu_button( string_172[lng],  menu_btn[4]->child, &Load_images       );
    menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[4]->child, &Test_process      ); 
    //menu_btn[num_menu_btn++] = new CMenu_button( string_912[lng],  menu_btn[4]->child, &Sequence_acquire  ); 
  }
  //#endif
  
}





/* Create menu for all functions/parameters */
void CChildView::Create_menu_TIVS_A60(void)
{

  CRect rett;
  GetClientRect( &rett );

	rett.top    =    OFFS_COORDY;
  rett.bottom = rett.top + 360;
	rett.left   = OFFS_COORDY;
  rett.right  = rett.Width();

  num_container = 0;

	// --------        CONTENITORE BASE - Livello 0       ------------
	container_main = new CContainer_main( L"menu base", rett, this, IDD_CONTAINER );
	container_main->ShowWindow( SW_SHOW );


  #define BRD_SUP       14

  #define COLA_SX      440
  #define COLB_SX      (COLA_SX+SPACE_X+BTN_DIMX)
  #define COLC_SX      (COLB_SX+SPACE_X+BTN_DIMX)
  #define COLD_SX      (COLA_SX-SPACE_X-BTN_DIMX)

  #define SPACE_X       14
  #define SPACE_Y       14
  #define BTN_DIMX     250 // BUTTONS WIDTH
  #define BTN_DIMY      58 // BUTTONS HEIGHT


	// * * * *    PRIMA COLONNA      * * * *
	CMenu_button::hook_pos = CMenu_button::bottom_left; // child di livello 1 allineati sotto e a sinistra

	// AUTOMATION BUTTON (num_menu_btn=0)
  rett.top    =                BRD_SUP;
  rett.bottom = rett.top    + BTN_DIMY;
  rett.left   =                COLA_SX;
  rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_900[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[0] );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;

 	// INSPECTION BUTTON  (num_menu_btn=1)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_902[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*740*/ ); // regolo dimensione sottomenu parametri ispezione
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[1] );
  num_menu_btn++;

	// * * * *     SECONDA COLONNA      * * * *
	// PULSANTE RICETTE  (num_menu_btn=2)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLB_SX;
	rett.right  = rett.left   + BTN_DIMX;
	recipe_btn = menu_btn[num_menu_btn] = new CMenu_button( string_120[lng], container_main, &Recipe_management );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[2] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;

	// PULSANTE AVVIO/ARRESTO INSPECTION  (num_menu_btn=3)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	inspection_btn = menu_btn[num_menu_btn] = new CMenu_button( string_150[lng], container_main, &Inspection_startstop  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[3] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;


	// * * * *     TERZA COLONNA      * * * *

	// PULSANTE UTILITA'/FUNZIONI  (num_menu_btn=4)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLC_SX;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_130[lng], container_main );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*450*/ );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[4] );
  num_menu_btn++;

	// PULSANTE DI USCITA  (num_menu_btn=5)
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
	exit_btn = menu_btn[num_menu_btn] = new CMenu_button( string_140[lng], container_main, &On_exit_btn );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[5] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;
  
	// * * * *     TO LEFT DISPLAY SWITCH  (num_menu_btn=6)    * * * *
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLD_SX;
	rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], container_main, &Change_view, -1 );
  menu_btn[num_menu_btn]->MoveWindow( &rett );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;


	// * * * *     LEFT BOTTOM BATCHES   (num_menu_btn=7)   * * * *
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_1300[lng], container_main );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[6] );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;


  #undef BRD_SUP
  #undef COLA_SX
  #undef COLB_SX
  #undef COLC_SX
  #undef SPACE_X
  #undef SPACE_Y
  #undef BTN_DIMX
  #undef BTN_DIMY

	CParameter::dim_ctrl.cy      = 25; // Regolo la dimensione verticale
	CContainer_wnd::mode         = CContainer_wnd::top_left;
	CContainer_wnd::use_ext_rect = false;
	CMenu_button::hook_pos       = CMenu_button::top_right; // child di livello >1 allineati a destra


  // ***************************************************************************
  //
  //                        AUTOMATION PARAMETERS
  //
  // ***************************************************************************

  parcat_1 = L"PLC";
  parcat_2 = NULL;

  if ( IS_PC1 ) // ( !wcsncmp( PC_name, L"PC1", 3 ) ) 
  {

    // *******  SUB-MENU FOR CAROUSEL - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1510[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".PRODSPEED",                 CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1532[lng], string_pcm[lng],   350.0,    10.0,  700.0, &file_manager  ); // Jog high speed (pcs/min)
    //if ( password_mngr ) password_mngr->insert_hmi( parameter[num_params-1], pwd_levels[7] );

    parameter[num_params++] = new CParameter( ".JOGSPEED",                  CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1536[lng], string_pcm[lng],   150.0,    10.0,  500.0, &file_manager  ); // Jog low speed (pcs/min)
    parameter[num_params++] = new CParameter( ".ACCELERATION",              CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1210[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // acceleration
    parameter[num_params++] = new CParameter( ".DECELERATION",              CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1212[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // deceleration
    parameter[num_params++] = new CParameter( ".JERK",                      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1208[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // jerk
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.TARGET_HEIGHT_MM",  CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1504[lng], string_mm[lng], 455.3, 300.0, 700.0, &file_manager  ); // Carousel target height
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.ZEROPOS",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1540[lng], string_unit[lng],  -0.850,    -4.0,    6.0, &file_manager  ); // Carousel zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "INPSCREW_AXIS.ZEROPOS",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1542[lng], string_unit[lng],  -0.743,    -4.0,    6.0, &file_manager  ); // Input screw zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";

#if SERIAL_N!=201800012  //for HAOSEN project 20180925
    parameter[num_params  ] = new CParameter( "INPSTARWHEEL_AXIS.ZEROPOS",  CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1548[lng], string_degrees[lng],  0.1,   -15.0,   15.0, &file_manager  ); // Input screw zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
#endif

    parameter[num_params  ] = new CParameter( "TRACKER_AXIS.ZEROPOS",       CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1544[lng], string_unit[lng],   3.500,    -4.0,    6.0, &file_manager  ); // Tracker zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";

#if SERIAL_N!=201800012 && SERIAL_N!=201800003	//Pour added for version of HAOSEN 20180925
    parameter[num_params++] = new CParameter( "INPSTARWHEEL_AXIS.NUMHOLES", CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1560[lng], string_unit[lng],      66,       1,    120, &file_manager  ); // Number of holes in input starwheel
#endif
	//Pour added for version of HAOSEN 20180925

	//Pour added for TIVS-A60L 20180821
#ifdef HV_LEAKTEST

	parameter[num_params  ] = new CParameter( "HVTRANSPORT_AXIS.ZEROPOS",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3510[lng], string_unit[lng],   0.50,    -2.0,    2.0, &file_manager  ); // HV transport zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
	//Pour marked for 2 servo motors 20180830
	parameter[num_params  ] = new CParameter( "HVSORTING_AXIS.ZEROPOS",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3510a[lng], string_unit[lng],   0.50,    -2.0,    2.0, &file_manager  ); // HV sorting axis zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params++] = new CParameter( "DEVIBRATOR.SPEED",              CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3570[lng], string_percent[lng],  25.0,   0.0,  100.0, &file_manager  ); // Devibrator speed in percent
	//to be defined
	//parameter[num_params  ] = new CParameter( "HVPUMP.SPEED",           CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1550a[lng], string_hz[lng],     25.0,     0.0,   80.0, &file_manager  ); // frequency of fan
    //parameter[num_params++]->format_spc = L"%.1lf";

#endif //HV_LEAKTEST
	//Pour added for TIVS-A60L 20180821

    if ( use_advanced_parameters )
    {
      parameter[num_params  ] = new CParameter( ".TRACK_PERC",              CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1562[lng], string_percent[lng], 62.5,      10,     90, NULL           ); // Tracking percentage 
      parameter[num_params++]->format_spc = L"%.1lf";
    }

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
	//Pour marked on 20201121
    parameter[num_params  ] = new CParameter( "INPUT_BELT.SPEED",           CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1550[lng], string_hz[lng],     25.0,     0.0,   80.0, &file_manager  ); // Carousel zero position (units)
    parameter[num_params++]->format_spc = L"%.1lf";

	#ifdef INPUTBELT_SENSOR // Id defined set input sensor delays
    parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY1",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1764[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
    parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY2",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1766[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    #endif


	//Pour added 20180821
#ifdef HV_LEAKTEST
	//parameter[num_params  ] = new CParameter( "HVPUMP.SPEED",           CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1550a[lng], string_hz[lng],     25.0,     0.0,   80.0, &file_manager  ); // frequency of fan
    //parameter[num_params++]->format_spc = L"%.1lf";
#endif
	//Pour added 20180821
    #if SERIAL_N==201300701 || SERIAL_N==201800012 || SERIAL_N==201800003 || SERIAL_N==201900027
      parameter[num_params  ] = new CParameter( "OUTPUT_BELT.SPEED",        CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1552[lng], string_hz[lng],     25.0,    0.0,   80.0, &file_manager  ); // Carousel zero position (units)
      parameter[num_params++]->format_spc = L"%.1lf";
    #endif

    num_menu_btn++;

	//Pour added for TIVS-A60L 20180821

	#ifdef HV_LEAKTEST
	    // *******  SUB-MENU FOR HV LT - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_3520[lng], menu_btn[0]->child );
    hv_menu = menu_btn[num_menu_btn];
    file_manager.Add_separator( string_3520[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position  

    parameter[num_params++] = new CParameter( ".F_HV_ENABLE",                 CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3504[lng],              L"",      1,      0,        1, &file_manager  ); // enable HV functions into PLC
    parameter[num_params  ] = new CParameter( "HV_MANAGER.HVREAD_W",          CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3533[lng], string_unit[lng],   0.50,    0.1,     0.9,  &file_manager  ); // HV read phase width
    parameter[num_params++]->format_spc = L"%.2lf";

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( ".HVBLOCK_1.O_VOLTAGE_SET",   CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3540[lng], string_kvolt[lng],   0,  0.0,   20.0, &file_manager  ); // HV set voltage for HV1
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_2.O_VOLTAGE_SET",   CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3542[lng], string_kvolt[lng],   0,  0.0,   20.0, &file_manager  ); // HV set voltage for HV2
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_3.O_VOLTAGE_SET",   CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3544[lng], string_kvolt[lng],   0,  0.0,   20.0, &file_manager  ); // HV set voltage for HV3
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_4.O_VOLTAGE_SET",   CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3546[lng], string_kvolt[lng],   0,  0.0,   20.0, &file_manager  ); // HV set voltage for HV4
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

//Pour changed 20180301
    parameter[num_params  ] = new CParameter( ".HVBLOCK_1.THRESHOLD_MIN",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3550[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV1 min
	hv1min_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
	parameter[num_params  ] = new CParameter( ".HVBLOCK_1.THRESHOLD_MAX",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3550a[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV1 max
	hv1max_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_2.THRESHOLD_MIN",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3552[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV2 min
	hv2min_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
	parameter[num_params  ] = new CParameter( ".HVBLOCK_2.THRESHOLD_MAX",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3552a[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV2 max
	hv2max_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_3.THRESHOLD_MIN",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3554[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV3 min
	hv3min_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
	parameter[num_params  ] = new CParameter( ".HVBLOCK_3.THRESHOLD_MAX",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3554a[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV3 max
	hv3max_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_4.THRESHOLD_MIN",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3556[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV4 min
	hv4min_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
	parameter[num_params  ] = new CParameter( ".HVBLOCK_4.THRESHOLD_MAX",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3556a[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV4 max
	hv4max_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params  ] = new CParameter( "HVSPIN_MOTOR.SPEED",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3522[lng], string_hz[lng],  25.0,  0.0,   80.0, &file_manager  ); // Spinning speed of HV belt
    parameter[num_params++]->format_spc = L"%.1lf";

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_HV1_LOOP",                 CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3506[lng],         L"",      1,      0,      1, &file_manager  ); // enable HV functions into PLC
    f_hvloop_a = parameter[num_params-1];
	parameter[num_params++] = new CParameter( ".F_HV2_LOOP",                 CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3506b[lng],         L"",      1,      0,      1, &file_manager  ); // enable HV functions into PLC
    f_hvloop_b = parameter[num_params-1];
	parameter[num_params++] = new CParameter( ".F_HV3_LOOP",                 CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3506c[lng],         L"",      1,      0,      1, &file_manager  ); // enable HV functions into PLC
    f_hvloop_c = parameter[num_params-1];
	parameter[num_params++] = new CParameter( ".F_HV4_LOOP",                 CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3506d[lng],         L"",      1,      0,      1, &file_manager  ); // enable HV functions into PLC
    f_hvloop_d = parameter[num_params-1];

    RECT area;
    menu_btn[num_menu_btn]->child->GetWindowRect(&area);
    area.top -= 210;//Pour changed from 60 to 210 20180301
	area.bottom -=210;
    menu_btn[num_menu_btn]->child->MoveWindow(&area);
    num_menu_btn++;

    menu_btn[num_menu_btn] = new CMenu_button( string_3560[lng], menu_btn[num_menu_btn-1]->child, &HVdata_record );
    hvdatarec_btn = menu_btn[num_menu_btn];
    num_menu_btn++;
#endif //HV_LEAKTEST

	//Pour added for TIVS-A60L 20180821


    // *******  SUB-MENU FOR GRIPPERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1610[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1610[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".OPEN_OFFSET",       CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1620[lng], string_step[lng],   55.4,   -1.0,    90.1, &file_manager  ); // Grippers opening phase
    parameter[num_params++] = new CParameter( ".ANT_OPEN_MAX",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1622[lng], string_step[lng],    0.5,    0.0,     2.0, &file_manager  ); // Grippers opening advance 
    parameter[num_params++] = new CParameter( ".OPEN_PRESSURE",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1624[lng], string_unit[lng],    3.5,    0.0,     8.0, &file_manager  ); // Grippers opening pressure
    parameter[num_params++] = new CParameter( ".CLOSE_OFFSET",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1630[lng], string_step[lng],   46.7,   -1.0,    90.1, &file_manager  ); // Grippers closing phase
    parameter[num_params++] = new CParameter( ".ANT_CLOSE_MAX",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1632[lng], string_step[lng],    0.5,    0.0,     2.0, &file_manager  ); // Grippers closing advance 
    parameter[num_params++] = new CParameter( ".CLOSE_PRESSURE",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1634[lng], string_unit[lng],    1.5,    0.0,     8.0, &file_manager  ); // Grippers closing pressure 
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GRIPPERS",  CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1612[lng],              L"",      0,      0,       1, &file_manager ); // check opening/closing
    parameter[num_params++] = new CParameter( ".GROPEN_DELAY",      CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1614[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for opening error
    parameter[num_params++] = new CParameter( ".GRCLOSE_DELAY",     CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1616[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for closing error
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params  ] = new CParameter( ".F_CLOSED_LOOP",     CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1636[lng],              L"",      0,      0,       1                ); // closed loop
    f_closed_loop = parameter[num_params++];
    ASSERT( f_closed_loop==parameter[num_params-1] );

    num_menu_btn++;

    // *******  SUB-MENU FOR DEVIATORS/OUTPUT - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1640[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1640[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); //380 );
    int main_menu_btn = num_menu_btn;

    parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_330[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes

	//Pour added for seperately doors alarm 20180830
#ifdef HV_LEAKTEST
	parameter[num_params++] = new CParameter( ".F_ALARM_HVDOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_330a[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
#endif //HV_LEAKTEST
	//Pour added for seperately doors alarm 20180830

    parameter[num_params++] = new CParameter( ".F_ENABLE_LIGHTCHK",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_332[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MAX_WIDTH", CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1639[lng], string_step[lng],    0.9,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MIN_WIDTH", CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1638[lng], string_step[lng],    0.1,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GOODS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1660[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output goods
    parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS1",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1662[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects1 
    
    #ifdef DOUBLE_REJET     
      parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS2",          CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1664[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects2
    #endif

	//Pour added on 20190620
	#ifdef THIRD_REJET
	  parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS3",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1664a[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects3
	#endif
	//Pour added on 20190620


    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "PRODUCT_FLOW.LOAD_VAL",           CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1654[lng], string_unit[lng],      0,      0,  1023  ); // Loading initial value
    parameter[num_params++] = new CParameter( ".F_REJECT_SIMULATE",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1656[lng],              L"",      0,      0,     1  ); // rejects simulation
    num_menu_btn++;

    // DELAYS
    menu_btn[num_menu_btn] = new CMenu_button( string_1750[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1750[lng] );
    //menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    //parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_330[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn-1]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1754[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1755[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to restart after goods full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1758[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1759[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to restart after rej1 full

    #ifdef DOUBLE_REJET     
      parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY1",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1760[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej2 full
      parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY2",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1762[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej2 full
    #endif

	#ifdef THIRD_REJET     
      parameter[num_params++] = new CParameter( "MACHINE.REJ3_DELAY1",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1760a[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej3 full
      parameter[num_params++] = new CParameter( "MACHINE.REJ3_DELAY2",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1762a[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej3 full
    #endif
	  
    #ifdef INPUTBELT_SENSOR // Id defined set input sensor delays
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY1",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1764[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY2",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1766[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    #endif

	//Pour added for MAX quantity of HVrejection 20180525
	#ifdef HV_LEAKTEST
	parameter[num_params++] = new CParameter( ".MAX_CONTINUOUSREJECTS",          CTYPE_INT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1762b[lng], string_msec[lng], 20,   0, 100, &file_manager  ); // Max number of HV rejection
	#endif

    #ifdef FALLEN_CONTAINER // If defined, use code to check fallen containers/set delay/enable alarm
      parameter[num_params++] = new CParameter( "ALARMS_CHECK.FALLEN_DELAY",     CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1769[lng], string_msec[lng],   300,   0, 1000000, &file_manager  ); // Delay to trigger fallen container alarm
    #endif      
    num_menu_btn++;

    // DISTANCES
    menu_btn[num_menu_btn] = new CMenu_button( string_1653[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1653[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV1",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1641[lng], string_step[lng],   77.50,  20.0, 127.0, &file_manager  ); // Distance input photosens - first deviator 
    #ifdef DOUBLE_REJET
	#if defined THIRD_REJET// For TIVS-L60L only, TAIJI
	parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV2",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1641a[lng], string_step[lng],   77.50,  20.0, 200.0, &file_manager  ); // Distance input photosens - second deviator 
    parameter[num_params++] = new CParameter( ".DIST_DEV2_DEV3",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1645a[lng], string_step[lng],    4.00,   1.0,  18.0, &file_manager  ); // Distance second deviator - third deviator	
	#elif SERIAL_N == 201600007  || SERIAL_N == 201900020  || SERIAL_N == 202000021
	parameter[num_params++] = new CParameter( ".DIST_DEV1_DEV2",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1645[lng], string_step[lng],    4.00,   1.0,  10.0, &file_manager  ); // Distance first deviator - second deviator
	parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV3",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1647[lng], string_step[lng],   77.50,  20.0, 200.0, &file_manager  ); // Distance input photosens - first deviator of HV
	#else
	parameter[num_params++] = new CParameter( ".DIST_DEV1_DEV2",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1645[lng], string_step[lng],    4.00,   1.0,  10.0, &file_manager  ); // Distance first deviator - second deviator
    #endif //
	#endif
	//Pour added for sampling function for Kexing on 20200919
	#if SERIAL_N == 202000022 || SERIAL_N == 202000028
	parameter[num_params++] = new CParameter( ".DIST_DEV1_DEV2",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1645[lng], string_step[lng],    4.00,   1.0,  10.0, &file_manager  ); // Distance first deviator - second deviator
	parameter[num_params++] = new CParameter( ".DIST_DEV1_DEV3",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1645b[lng], string_step[lng],    4.00,   1.0,  20.0, &file_manager  ); // Distance first deviator -third deviator
	parameter[num_params++] = new CParameter( ".SAMPLING_RATE",              CTYPE_REAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1657[lng], string_unit[lng],    1.0,   0.0,  100.0, &file_manager  ); // Sampling rate
	//parameter[num_params++] = new CParameter( ".NUM_SAMPLING",               CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1658[lng], string_unit[lng], 20000,   0, 1000000, &file_manager  ); // Sampling number
	#endif
	//Pour added for sampling function for Kexing on 20200919

    parameter[num_params++] = new CParameter( ".DIST_LOAD_GOOD",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1642[lng], string_step[lng],   82.75,   1.0, 127.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ1",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1643[lng], string_step[lng],   87.77,   1.0, 127.0, &file_manager  ); // Distance first deviator - second deviator
    #ifdef DOUBLE_REJET
	#if defined HV_LEAKTEST
	parameter[num_params++] = new CParameter( ".DIST_LOAD_HVGOOD",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1644a[lng], string_step[lng],   95.09,   1.0, 200.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ2",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1644b[lng], string_step[lng],   95.09,   1.0, 200.0, &file_manager  ); // Distance first deviator - HV reject deviator
	parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ3",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1644c[lng], string_step[lng],   95.09,   1.0, 200.0, &file_manager  ); // Distance first deviator - HV good deviator
    #else
    parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ2",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1644[lng], string_step[lng],   95.09,   1.0, 200.0, &file_manager  ); // Distance first deviator - second deviator
	#endif 

	#endif

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWI",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1646[lng], string_step[lng],    2.3,    0.0,   4.0, &file_manager  ); // Main starwheel suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWO",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1648[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Main starwheel blowing lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDI",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1650[lng], string_step[lng],    1.3,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDO",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1652[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels blowing lenght (steps)

#ifdef HV_LEAKTEST
	parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_DV2RI",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1988[lng], string_step[lng],    2.3,    0.0,   4.0, &file_manager  ); // Main starwheel suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_DV2RO",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1990[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Main starwheel blowing lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_DV2LI",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1992[lng], string_step[lng],    1.3,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_DV2LO",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1994[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels blowing lenght (steps)

#endif //HV_LEAKTEST
    num_menu_btn++;


    // *******  SUB-MENU FOR FIRST SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1700[lng], menu_btn[0]->child );
    //UINT nmbt = num_menu_btn-1;

    file_manager.Add_separator( string_1700[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "SEND_SPIN_PARAMETERS.RUN",                 CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1710[lng],              L"",      1,      0,     1                 ); // send data
 
    menu_btn[num_menu_btn+1]  = new CMenu_button( string_1710[lng],  menu_btn[num_menu_btn]->child, &Send_spin_parameters      ); // ATTENTION TO num_menu_btn!!!

    menu_btn[num_menu_btn]->child->posy += 30; // Set vertical position
    parameter[num_params++] = new CParameter( ".ALIGN_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1718[lng],              L"",      1,      0,     1, &file_manager  ); // enable alignment spin cycle
    parameter[num_params++] = new CParameter( ".F_CHECK_LAM",            CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1730[lng],              L"",      1,      0,     1, NULL           ); // enable LAM error detection
    parameter[num_params++] = new CParameter( ".SPIN1_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 1
    parameter[num_params++] = new CParameter( ".VEL1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],   1000,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   3000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
	#if SERIAL_N==202000008  || SERIAL_N==202000009 || SERIAL_N==202000010   || SERIAL_N==201900101
	parameter[num_params++] = new CParameter( ".NTURN1",                 CTYPE_REAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
	#else
    parameter[num_params++] = new CParameter( ".NTURN1",                 CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
	#endif
    parameter[num_params++] = new CParameter( ".DELAY1",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN1_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle1
    num_menu_btn++;

    num_menu_btn++; // for send_spin_parameters


    // *******  SUB-MENU FOR SECOND SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1701[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1701[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN2_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 2
    parameter[num_params++] = new CParameter( ".VEL2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    800,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
	#if SERIAL_N==202000008  || SERIAL_N==202000009 || SERIAL_N==202000010//  || SERIAL_N==201900101
    parameter[num_params++] = new CParameter( ".NTURN2",                 CTYPE_REAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     12,      1,   100, &file_manager  ); // number of revolutions
	#else
	parameter[num_params++] = new CParameter( ".NTURN2",                 CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     12,      1,   100, &file_manager  ); // number of revolutions
	#endif
    parameter[num_params++] = new CParameter( ".DELAY2",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN2_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle2
    num_menu_btn++;


    // *******  SUB-MENU FOR THIRD SPINNING - num_menu_btn=  ******* 
    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM
      menu_btn[num_menu_btn] = new CMenu_button( string_1707[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1707[lng] );
    #else
      menu_btn[num_menu_btn] = new CMenu_button( string_1703[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1703[lng] );
    #endif
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN3_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin3
    parameter[num_params++] = new CParameter( ".VEL3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    180,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
	#if SERIAL_N==202000008  || SERIAL_N==202000009 || SERIAL_N==202000010  || SERIAL_N==201900101
    parameter[num_params++] = new CParameter( ".NTURN3",                 CTYPE_REAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],      4,      1,   100, &file_manager  ); // number of revolutions
	#else
	parameter[num_params++] = new CParameter( ".NTURN3",                 CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],      4,      1,   100, &file_manager  ); // number of revolutions
	#endif
	parameter[num_params++] = new CParameter( ".DELAY3",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for spin3
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN_LINE",     CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup
    num_menu_btn++;


    // *******  SUB-MENU FOR EJECTOR MASKS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1668[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1668[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_ENABLE_SPINCHK",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1666[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 
    #ifdef DOUBLE_REJET // When defined double reject on output is enabled (also in PLC SW)
      parameter[num_params++] = new CParameter( ".F_DEV2_SPINCHK",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1667[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 
    #endif

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
   
    parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE1",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1670[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1672[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1674[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1675[lng],  L"",   0,   0,   1, &file_manager ); // 

	//Pour added on 20200914
	    #ifdef OPACITY_CTRL
      parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_2280[lng],  L"",   0,   0,   1, &file_manager ); // 
      parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1674[lng],  L"",   0,   0,   1, &file_manager ); // 
    #else
      parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1674[lng],  L"",   0,   0,   1, &file_manager ); // 
      parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1675[lng],  L"",   0,   0,   1, &file_manager ); // 
    #endif
	//Pour added on 20200914

    

    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM  // Station 3 is for particle
      ADS_write_value( ".F_PARTICLE_3", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high to fix counting for particles/particle3
      parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1673[lng],  L"",   0,   0,   1, &file_manager ); // 
    #else // Normal cosmetic
      parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1678[lng],  L"",   0,   0,   1, &file_manager ); // 
    #endif
   
    parameter[num_params++] = new CParameter( ".F_ENABLE_TIPCAP",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1680[lng],  L"",   0,   0,   1, &file_manager ); // 
    //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
    #ifdef FO_COLOR
      parameter[num_params++] = new CParameter( ".F_ENABLE_FOCOLOR",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1774[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    #endif
   
    
    #ifdef DOUBLE_REJET // When defined double reject on output is enabled (also in PLC SW)
      //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
      parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE1",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1682[lng],  L"",   0,   0,   1, &file_manager ); // 
      parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE2",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1683[lng],  L"",   0,   0,   1, &file_manager ); // 
      //parameter[num_params++] = new CParameter( ".F_DEV2_FILLING1",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1684[lng],  L"",   0,   0,   1, &file_manager ); // 
      //parameter[num_params++] = new CParameter( ".F_DEV2_FILLING2",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1685[lng],  L"",   0,   0,   1, &file_manager ); // 

	  //Pour added on 202020914
	      #ifdef OPACITY_CTRL
      parameter[num_params++] = new CParameter( ".F_DEV2_FILLING1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_2282[lng],  L"",   0,   0,   1, &file_manager ); // 
      parameter[num_params++] = new CParameter( ".F_DEV2_FILLING2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1684[lng],  L"",   0,   0,   1, &file_manager ); // 
    #else
      parameter[num_params++] = new CParameter( ".F_DEV2_FILLING1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1684[lng],  L"",   0,   0,   1, &file_manager ); // 
      parameter[num_params++] = new CParameter( ".F_DEV2_FILLING2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1685[lng],  L"",   0,   0,   1, &file_manager ); // 
    #endif
	  //Pour added on 202020914


      #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM  // Station 3 is for particle
        parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1687[lng],  L"",   0,   0,   1, &file_manager ); // 
      #else // Normal cosmetic
        parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1686[lng],  L"",   0,   0,   1, &file_manager ); // 
      #endif

      parameter[num_params++] = new CParameter( ".F_DEV2_TIPCAP",       CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1688[lng],  L"",   0,   0,   1, &file_manager ); // 
      //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
      #ifdef FO_COLOR
        parameter[num_params++] = new CParameter( ".F_DEV2_FOCOLOR",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1784[lng],  L"",   0,   0,   1, &file_manager ); // FO color
      #endif
    #endif //DOUBLE_REJET
  
    num_menu_btn++;

    // *******  SUB-MENU FOR TRIGGERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1690[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1690[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params  ] = new CParameter( ".TIPCAP_TRIGGER_PHASE",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1691[lng], string_step[lng], 0.10, 0.0, 0.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
    #ifdef FO_COLOR
      parameter[num_params  ] = new CParameter( ".FOCOLOR_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1692[lng], string_step[lng],  0.2, 0.0, 0.95, &file_manager  );
      parameter[num_params++]->format_spc = L"%.2lf";
    #endif
    parameter[num_params  ] = new CParameter( ".PART1_TRIGGER_PHASE",      CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1697[lng], string_step[lng], 0.11, 0.0, 5.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".PART2_TRIGGER_PHASE",      CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1698[lng], string_step[lng], 0.12, 0.0, 5.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";

    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM  // Station 3 is for particle
      parameter[num_params  ] = new CParameter( ".PART3_TRIGGER_PHASE",       CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1698b[lng], string_step[lng], 0.13, 0.0, 5.91, &file_manager  );
    #else // Normal cosmetic
      parameter[num_params  ] = new CParameter( ".PART3_TRIGGER_PHASE",       CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1699[lng], string_step[lng], 0.13, 0.0, 3.91, &file_manager  );
    #endif
    parameter[num_params++]->format_spc = L"%.2lf";

    num_menu_btn++;


    // *******  SUB-MENU FOR CALIBRATION/ADVANCED PARAMETERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1800[lng], menu_btn[0]->child );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[7] );
    file_manager.Add_separator( string_1800[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    calibration_menu = menu_btn[num_menu_btn];
    main_menu_btn = num_menu_btn;
    num_menu_btn++;


    // ABC phases
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1809[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1809[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".INPUT_PHASE_A",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1810[lng], string_step[lng],   1.50,    0.0,   3.0, &file_manager  ); // Input phase for A valves
    parameter[num_params++] = new CParameter( ".INPUT_PHASE_B",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1812[lng], string_step[lng],   2.50,    0.0,   3.0, &file_manager  ); // Input phase for B valves
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

#ifdef HV_LEAKTEST
	//Pour added 20180821
	parameter[num_params++] = new CParameter( ".INPUT_HV_PHASE_A",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1810a[lng], string_step[lng],   1.50,    0.0,   3.0, &file_manager  ); // Input HV phase for A valves
    parameter[num_params++] = new CParameter( ".INPUT_HV_PHASE_B",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1812a[lng], string_step[lng],   2.50,    0.0,   3.0, &file_manager  ); // Input HV phase for B valves
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
	//Pour added 20180821
#endif//HV_LEAKTEST

    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCA",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1820[lng], string_step[lng],   4.50,    0.0,   6.0, &file_manager  ); // Input cam phase for A cameras
    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCB",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1822[lng], string_step[lng],   3.50,    0.0,   6.0, &file_manager  ); // Input cam phase for B cameras
    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCC",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1824[lng], string_step[lng],   2.50,    0.0,   6.0, &file_manager  ); // Input cam phase for C cameras
    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCD",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1825[lng], string_step[lng],   1.50,    0.0,   6.0, &file_manager  ); // Input cam phase for D cameras
    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCE",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1826[lng], string_step[lng],   0.50,    0.0,   6.0, &file_manager  ); // Input cam phase for E cameras
    num_menu_btn++;

    // Carousel height encoder parameters
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1828[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1828[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MAX_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1830[lng], string_mm[lng],    562.0,  200.0,    700.0, &file_manager  ); // Maximum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MIN_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1832[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Minimum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_mm[lng],    557.0,  200.0,    700.0, &file_manager  ); // Top point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_ec[lng],  9480033,      0, 16777215, &file_manager  ); // Top point height (ec)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Low point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_ec[lng],  9569182,      0, 16777215, &file_manager  ); // Low point height (ec)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    num_menu_btn++;

    // Spin offsets and distances
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1848[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1848[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
	/*
	//Pour added on 20200422
	menu_btn[num_menu_btn]->child->GetWindowRect(&area);
	area.top -= 40; //Pour changed from 60 to 210 20180301
	area.bottom -=40;
    menu_btn[num_menu_btn]->child->MoveWindow(&area);
	//Pour added on 20200422
	*/
    parameter[num_params++] = new CParameter( ".SPIN1_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1850[lng], string_unit[lng],    8,    0,   15, &file_manager  ); // Spin1 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN2_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1852[lng], string_unit[lng],    4,    0,   15, &file_manager  ); // Spin2 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN3_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1854[lng], string_unit[lng],    1,    0,   15, &file_manager  ); // Spin3 offset (motors)
    parameter[num_params++] = new CParameter( ".ALIGN_OFFSET",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1856[lng], string_step[lng], 50.0,  0.0, 90.0, &file_manager  ); // Align offset (steps)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".PART1_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1801[lng], string_step[lng], 40.0,  0.0, 90.0, &file_manager  ); // datarecord particle1 offset (heads)
    parameter[num_params++] = new CParameter( ".PART2_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1802[lng], string_step[lng], 24.0,  0.0, 90.0, &file_manager  ); // datarecord particle2 offset (heads)
    parameter[num_params++] = new CParameter( ".PART3_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1803[lng], string_step[lng], 12.0,  0.0, 90.0, &file_manager  ); // datarecord particle3/cosmetic offset (heads)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".DIST_LOAD_TCA",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1860[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and tip/cap cameras
    //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
    #ifdef FO_COLOR
      parameter[num_params++] = new CParameter( ".DIST_LOAD_FO",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1861[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and FO color camera
    #endif
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1A",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1864[lng], string_unit[lng],    7,    0,   15, &file_manager  ); // Distance between input and first part A
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1B",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1865[lng], string_unit[lng],    7,    0,   15, &file_manager  ); // Distance between input and first part B
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1C",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1866[lng], string_unit[lng],    8,    0,   15, &file_manager  ); // Distance between input and first part C
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1D",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1867[lng], string_unit[lng],    8,    0,   15, &file_manager  ); // Distance between input and first part D
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1E",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1868[lng], string_unit[lng],    8,    0,   15, &file_manager  ); // Distance between input and first part C
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1F",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1869[lng], string_unit[lng],    8,    0,   15, &file_manager  ); // Distance between input and first part D

	#ifdef HV_LEAKTEST
	parameter[num_params++] = new CParameter( ".DIST_LOAD_HV1",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3534[lng], string_step[lng],   80,   30,  150, &file_manager  ); // Distance between input and HV1 result in machine steps
	parameter[num_params++] = new CParameter( ".DIST_LOAD_HV2",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3534b[lng], string_step[lng],   80,   30,  150, &file_manager  ); // Distance between input and HV2 result in machine steps
	parameter[num_params++] = new CParameter( ".DIST_LOAD_HV3",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3534c[lng], string_step[lng],   80,   30,  150, &file_manager  ); // Distance between input and HV3 result in machine steps
	parameter[num_params++] = new CParameter( ".DIST_LOAD_HV4",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3534d[lng], string_step[lng],   80,   30,  150, &file_manager  ); // Distance between input and HV4 result in machine steps
	#endif
    num_menu_btn++;





    // *******  SUB-MENU FOR BATCH - num_menu_btn=7  ******* 
/*    menu_btn[num_menu_btn] = new CMenu_button( string_1310[lng], menu_btn[7]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position */

    menu_btn[num_menu_btn++] = new CMenu_button( string_1310[lng],  menu_btn[7]->child, &Reset_statistics      ); 

    if ( batch_mngr )
    {
      // batch start/stop
      menu_btn[num_menu_btn++] = new CMenu_button( string_1304[lng],  menu_btn[7]->child, &Batch_startstop     ); 
      batch_btn = menu_btn[num_menu_btn-1];
      if ( batch_mngr->current.status ) batch_btn->SetWindowTextW( string_1306[lng] );

      // batch print/report
      menu_btn[num_menu_btn++] = new CMenu_button( string_1308[lng],  menu_btn[7]->child, &Batch_report        ); 
    }

  }



  
//    ASSERT(menu_btn[num_menu_btn]==NULL);


  // ***************************************************************************
  //
  //                           PARAMETRI DI ISPEZIONE/MISURA
  //
  // ***************************************************************************

	//menu_btn[1]->child->new_size( 320, 300+NUM_TLC*50 ); // dimensioni sottofinestra parametri ispezione

	// SUB-MENU for
//  menu_btn[1]->child->posy += 10; // Set vertical position
//	menu_btn[6] = new CMenu_button( string_1050[lng], menu_btn[0]->child );
//	menu_btn[1]->child->new_size( 320, 440 );
  
  //parameter[num_params++] = new CParameter( &num_img,       CTYPE_DINT,  0, menu_btn[1]->child, string_2032[lng],   string_uni[lng], 20,  5,  50, &file_manager );
	//parameter[num_params++] = new CParameter( &free_run,      CTYPE_BOOL8, 0, menu_btn[1]->child, string_2050[lng],   0,                1,  0,   0, &file_manager );
	//parameter[num_params++] = new CParameter( &learn_refl,    CTYPE_BOOL8, 0, menu_btn[1]->child, string_2124[lng],   0,                1,  0,   0, NULL,          &Learn_reflections );

  parcat_1 = L"INSPECTION";
  parcat_2 = NULL;


	parameter[num_params++] = new CParameter( &show_rejects,  CTYPE_BOOL8, 0, menu_btn[1]->child, string_2124[lng],   0,                1,  0,   0, NULL            );

	parameter[num_params++] = new CParameter( &pseudo_colors, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2122[lng],   0,                1,  0,   0, NULL, &Set_LUT  );



  #ifdef NEWCAP_DOUBLE
    ADS_write_value( ".F_DOUBLE_CAP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  	parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
    parameter[num_params++] = new CParameter( "TRIGGER_DOUBLE_CAP.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
  #endif


  #ifdef NEW_TRIPLE_TIP
    ADS_write_value( ".F_TRIPLE_TIP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  	//parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
    //parameter[num_params++] = new CParameter( "TRIGGER_DOUBLE_CAP.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
  #endif


  // -----------------------------   S O T T O M E N U     O F     E A C H     C A M E R A    ---------------------------------------------
	for ( UINT i=0 ; i<num_tlc ; i++ ) // Sotto gruppo parametri telecamere - Livello 1 - menu_btn[20,21,22]
  {
    wchar_t msg[50+1];
//    swprintf( msg, string_810[lng], i+1 );
    swprintf( msg, 50, string_800[lng], i, camera[i].name );
	  menu_btn[num_menu_btn] = new CMenu_button( msg, menu_btn[1]->child );
	  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*300*/ );
    file_manager.Add_separator( msg );

    parcat_1 = msg;
    parcat_2 = NULL;


    parameter[num_params++] = new CParameter( &camera[i].shutter,    CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
    parameter[num_params++] = new CParameter( &camera[i].frame_rate, CTYPE_REAL,  0, menu_btn[num_menu_btn]->child, string_2066[lng], string_fps [lng],   50.0,               0.0,            6000.0, &file_manager, &Set_camera, i );
    num_menu_btn++;

    int menu_btn_par = num_menu_btn-1;
    if ( IS_PC1 ) 
    {
      if ( i>=tlcgroupPC1[0][0] && i<=tlcgroupPC1[0][1] ) // tip/cap dedicated parameters
      {
        parameter[num_params++] = new CParameter( &camera[i].trigger,    CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
        #ifdef NEW_TRIPLE_TIP
          if ( i==0 ) parameter[num_params++] = new CParameter( "TRIGGER_TRIPLE_TIP.FREE_RUN",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[menu_btn_par]->child, string_606[lng],  L"",   0,   0,   1, NULL ); // 
        #endif
        if ( tip_insp[i] ) tip_insp[i]->Add_menu_parameters( menu_btn[num_menu_btn-1]->child );
      }

      if ( i>=tlcgroupPC1[1][0] && i<=tlcgroupPC1[1][1] ) //i>=3 && i<=6 )       // particle dedicated parameters
      {
        if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( fillingl_insp[i] ) fillingl_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
      #ifdef FO_COLOR
        if ( i==9 )  // FO color dedicated parameters
        {
          parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
          if ( focolor_insp[i] ) focolor_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        }
      #endif
    }

    if ( IS_PC2 ) 
    {
      if ( i>=tlcgroupPC2[0][0] && i<=tlcgroupPC2[0][1] ) // ( i<4 )
      {
        if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( fillingl_insp[i] ) fillingl_insp[i]->Add_menu_parameters_f( menu_btn[menu_btn_par]->child );
      }

      if ( i>=tlcgroupPC2[1][0] && i<=tlcgroupPC2[1][1] ) // else
      {
        if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( fillingl_insp[i] ) fillingl_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }
    }

  }


  #ifndef NEW_PARTICLE // For new particle DON'T ADD learning menu

  menu_btn[1]->child->posy += 10; // Set vertical position

  // particle start/stop learning - show learning
	parameter[num_params++] = new CParameter( &learning,    CTYPE_BOOL8, 0, menu_btn[1]->child, string_2052[lng], 0,  0,  0, 1, NULL, &Learn_reflections );

  //menu_btn[1]->child->posy += 10; // Set vertical position

  // Add reflections sub-menu

  int refl_menu = num_menu_btn;
  menu_btn[num_menu_btn++] = new CMenu_button( string_2034[lng], menu_btn[1]->child );
	menu_btn[refl_menu]->child->new_size( 320, 100 );

  menu_btn[num_menu_btn++] = new CMenu_button( string_2054[lng], menu_btn[refl_menu]->child, &Show_reflections   );
  menu_btn[num_menu_btn++] = new CMenu_button( string_2042[lng], menu_btn[refl_menu]->child, &Filter_reflections );
  menu_btn[num_menu_btn++] = new CMenu_button( string_2036[lng], menu_btn[refl_menu]->child, &Export_reflections );
  menu_btn[num_menu_btn++] = new CMenu_button( string_2038[lng], menu_btn[refl_menu]->child, &Import_reflections );
  
  #endif // NEW_PARTICLE - For new particle DON'T ADD learning menu
  
  if ( IS_PC2 ) 
  {
  RECT area;
  menu_btn[1]->child->GetWindowRect(&area);
  //area.top    -= 30;
  //area.bottom -= 30;
  //Pour added for testing 20190107 for HZB
  area.top    -= 100;
  area.bottom -= 100;
  menu_btn[1]->child->MoveWindow(&area);
  }

  /*
  #if STN3==COSMETIC_BACK
    if ( IS_PC2 )
    {
      menu_btn[1]->child->GetWindowRect(&area);
      area.top    -= 50;
      area.bottom -= 50;
      menu_btn[1]->child->MoveWindow(&area);
    }
  #endif
  */




  // ***************************************************************************
  //
	//               ADD FUNCTIONS/UTILITIES	( container menu_btn[4] )
  //
  // ***************************************************************************

/*  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], menu_btn[4]->child, &Change_view       );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;  */

  parameter[num_params++] = new CParameter( ".O_MACHINE_LIGHT", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_124[lng], L"", 0, 0, 1 ); // machine lights

  parameter[num_params++] = new CParameter( ".F_RUN_BELTS",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_128[lng], L"", 1, 0, 1 ); // run belt/s

  // FOR REYOUNG MACHINES ADD VACUUM PUMP CONTROL 
//  #if SERIAL_N==201400037 || SERIAL_N==201400038 || SERIAL_N==201400039 || SERIAL_N==201400041 || SERIAL_N==201400045
  #ifdef VACUUM_PUMP // if defined add button connected to output 6th board/4th output
    parameter[num_params++] = new CParameter( ".O_VACUUM_PUMP",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_340[lng], L"", 1, 0, 1 ); // run vacuum pump
    //parameter[num_params++] = new CParameter( ".F_CYCLE_CAMPWR", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_342[lng], L"", 1, 0, 1 ); // reset camera power
    menu_btn[num_menu_btn++] = new CMenu_button( string_342[lng], menu_btn[4]->child, &Cycle_campwr   );
    campwr_btn = menu_btn[num_menu_btn-1];
  #endif

	//Pour added 20180821
#ifdef HV_LEAKTEST
	parameter[num_params++] = new CParameter( "DEVIBRATOR.RUN",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_3568[lng], L"", 1, 0, 1 ); // run devibrator
#endif
	//Pour HV_LEAKTEST
  menu_btn[num_menu_btn] = new CMenu_button( string_160[lng], menu_btn[4]->child, &Movie_startstop   );
	movie_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  //Pour marked on 20200427
    #ifdef ALARMLOG_SEPARATE // log alarms separately and add button to show them
  if ( password_mngr )
  { 
	menu_btn[num_menu_btn] = new CMenu_button( string_104[lng], menu_btn[4]->child, &Show_alarmlog  );
	password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );//MAINTENANCE_LEVEL
	num_menu_btn++;
  }
  #endif

  #ifdef NEW_LOGGER // log alarms separately and add button to show them
    //if ( password_mngr )
  //{
    menu_btn[num_menu_btn] = new CMenu_button( string_3900[lng], menu_btn[4]->child, &Show_log  );
	//password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );//MAINTENANCE_LEVEL
	num_menu_btn++;
	//}
  #endif


  #ifdef NEW_PASSW_MNGR  // New users/passwords manager
	/*
  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
  }
  */
    if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], OPERATOR_LEVEL );//SUPERVISOR_LEVEL
    num_menu_btn++;
    //menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
	menu_btn[num_menu_btn] = new CMenu_button( string_1036[lng], menu_btn[4]->child);
	password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
	
    file_manager.Add_separator( string_1036[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
	parameter[num_params++] = new CParameter( &password_mngr->chgpwd_days, CTYPE_INT ,  0, menu_btn[num_menu_btn]->child, string_1037[lng], string_day[lng],  90,  1,  360, &file_manager);
	parameter[num_params++] = new CParameter( &password_mngr->logout_timeout, CTYPE_INT ,  0, menu_btn[num_menu_btn]->child, string_1038[lng], string_minute[lng],  10,  1,  30, &file_manager);
	parameter[num_params++] = new CParameter( &password_mngr->annotate_on, CTYPE_BOOL8, 0, menu_btn[num_menu_btn]->child, string_1035[lng], L"", 0, 0, 1 ); 
	num_menu_btn++;
    menu_btn[num_menu_btn] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
	num_menu_btn++;
  }

  #else
  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
  }
  #endif

	menu_btn[num_menu_btn] = new CMenu_button( string_170[lng], menu_btn[4]->child, &Save_images       );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveimages_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  /* INITIALLY DISABLED: CHECK FOR A60 BEFORE RE-ENABLING
	menu_btn[num_menu_btn] = new CMenu_button( string_304[lng], menu_btn[4]->child, &Data_record       );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  datarec_btn = menu_btn[num_menu_btn];
  num_menu_btn++;
  */

  //Pour enabled for testing on 20190723
 //INITIALLY DISABLED: CHECK FOR A60 BEFORE RE-ENABLING
  menu_btn[num_menu_btn] = new CMenu_button( string_304[lng], menu_btn[4]->child, &Data_record       );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  datarec_btn = menu_btn[num_menu_btn];
  num_menu_btn++;
  //Pour enabled for testing on 20190723


//  #ifdef SAVE_IMAGES

  	menu_btn[num_menu_btn] = new CMenu_button( string_320[lng], menu_btn[4]->child, &Save_inspections  );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
    saveinsp_btn = menu_btn[num_menu_btn];
    num_menu_btn++;

    menu_btn[num_menu_btn] = new CMenu_button( string_324[lng], menu_btn[4]->child, &Save_sequences  );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
    saveseq_btn = menu_btn[num_menu_btn];
    num_menu_btn++;

//  #endif

  #ifdef GRIPPER_STATISTICS
  if ( IS_PC1 )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_8150[lng], menu_btn[4]->child, &Grippers_statistics );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
    num_menu_btn++;
  }
  #endif

  //#ifdef DEBUGPC //_DEBUG
  if ( test_process )
  {
	  //menu_btn[num_menu_btn++] = new CMenu_button( string_172[lng],  menu_btn[4]->child, &Load_images       );
    menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[4]->child, &Test_process      ); 
    //menu_btn[num_menu_btn++] = new CMenu_button( string_912[lng],  menu_btn[4]->child, &Sequence_acquire  ); 
  }
  //#endif
  
  //menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[4]->child, &Test_process      ); 


 //  ASSERT ( menu_btn[19]==NULL );
 

}



/* Create menu for all functions/parameters */
void CChildView::Create_menu_TIVS_A40(void) //Create_menu_TIVS40_LQ(void)
{

  CRect rett;
  GetClientRect( &rett );

	rett.top    =    OFFS_COORDY;
  rett.bottom = rett.top + 360;
	rett.left   = OFFS_COORDY;
  rett.right  = rett.Width();

  num_container = 0;

	// --------        CONTENITORE BASE - Livello 0       ------------
	container_main = new CContainer_main( L"menu base", rett, this, IDD_CONTAINER );
	container_main->ShowWindow( SW_SHOW );


  #define BRD_SUP       14

  #define COLA_SX      440
  #define COLB_SX      (COLA_SX+SPACE_X+BTN_DIMX)
  #define COLC_SX      (COLB_SX+SPACE_X+BTN_DIMX)
  #define COLD_SX      (COLA_SX-SPACE_X-BTN_DIMX)

  #define SPACE_X       14
  #define SPACE_Y       14
  #define BTN_DIMX     250 // BUTTONS WIDTH
  #define BTN_DIMY      58 // BUTTONS HEIGHT


	// * * * *    PRIMA COLONNA      * * * *
	CMenu_button::hook_pos = CMenu_button::bottom_left; // child di livello 1 allineati sotto e a sinistra

	// AUTOMATION BUTTON (num_menu_btn=0)
  rett.top    =                BRD_SUP;
  rett.bottom = rett.top    + BTN_DIMY;
  rett.left   =                COLA_SX;
  rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_900[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[0] );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;

 	// INSPECTION BUTTON  (num_menu_btn=1)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_902[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*740*/ ); // regolo dimensione sottomenu parametri ispezione
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[1] );
  num_menu_btn++;

	// * * * *     SECONDA COLONNA      * * * *
	// PULSANTE RICETTE  (num_menu_btn=2)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLB_SX;
	rett.right  = rett.left   + BTN_DIMX;
	recipe_btn = menu_btn[num_menu_btn] = new CMenu_button( string_120[lng], container_main, &Recipe_management );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[2] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;

	// PULSANTE AVVIO/ARRESTO INSPECTION  (num_menu_btn=3)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	inspection_btn = menu_btn[num_menu_btn] = new CMenu_button( string_150[lng], container_main, &Inspection_startstop  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[3] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;


	// * * * *     TERZA COLONNA      * * * *

	// PULSANTE UTILITA'/FUNZIONI  (num_menu_btn=4)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLC_SX;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_130[lng], container_main );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*450*/ );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[4] );
  num_menu_btn++;

	// PULSANTE DI USCITA  (num_menu_btn=5)
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
	exit_btn = menu_btn[num_menu_btn] = new CMenu_button( string_140[lng], container_main, &On_exit_btn );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[5] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;
  
	// * * * *     TO LEFT DISPLAY SWITCH  (num_menu_btn=6)    * * * *
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLD_SX;
	rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], container_main, &Change_view, -1 );
  menu_btn[num_menu_btn]->MoveWindow( &rett );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;


	// * * * *     LEFT BOTTOM BATCHES   (num_menu_btn=7)   * * * *
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_1300[lng], container_main );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[6] );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;


  #undef BRD_SUP
  #undef COLA_SX
  #undef COLB_SX
  #undef COLC_SX
  #undef SPACE_X
  #undef SPACE_Y
  #undef BTN_DIMX
  #undef BTN_DIMY

	CParameter::dim_ctrl.cy      = 25; // Regolo la dimensione verticale
	CContainer_wnd::mode         = CContainer_wnd::top_left;
	CContainer_wnd::use_ext_rect = false;
	CMenu_button::hook_pos       = CMenu_button::top_right; // child di livello >1 allineati a destra


  // ***************************************************************************
  //
  //                        AUTOMATION PARAMETERS
  //
  // ***************************************************************************

  parcat_1 = L"PLC";
  parcat_2 = NULL;

  if ( IS_PC1 ) // ( !wcsncmp( PC_name, L"PC1", 3 ) ) 
  {

    // *******  SUB-MENU FOR CAROUSEL - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1510[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".PRODSPEED",                    CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1532[lng], string_pcm[lng],   350.0,    10.0,  500.0, &file_manager  ); // Jog high speed (pcs/min)
    //if ( password_mngr ) password_mngr->insert_hmi( parameter[num_params-1], pwd_levels[7] );

    parameter[num_params++] = new CParameter( ".JOGSPEED",                     CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1536[lng], string_pcm[lng],   150.0,    10.0,  500.0, &file_manager  ); // Jog low speed (pcs/min)
    parameter[num_params++] = new CParameter( ".ACCELERATION",                 CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1210[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // acceleration
    parameter[num_params++] = new CParameter( ".DECELERATION",                 CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1212[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // deceleration
    parameter[num_params++] = new CParameter( ".JERK",                         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1208[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // jerk
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.TARGET_HEIGHT_MM",  CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1504[lng], string_mm[lng], 455.3, 300.0, 700.0, &file_manager  ); // Carousel target height
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.ZEROPOS",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1540[lng], string_unit[lng],  -0.850,    -4.0,    4.0, &file_manager  ); // Carousel zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "INPSCREW_AXIS.ZEROPOS",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1542[lng], string_unit[lng],  -0.743,    -4.0,    4.0, &file_manager  ); // Input screw zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "TRACKER_AXIS.ZEROPOS",          CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1544[lng], string_unit[lng],   3.500,    -4.0,    4.0, &file_manager  ); // Tracker zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    
    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.SECFDBK_ZEROPOS", CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1546[lng], string_unit[lng],   0.000,    -4.0,    4.0, &file_manager  ); // Cam zero position second feedback (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    if ( use_advanced_parameters )
    {
      parameter[num_params  ] = new CParameter( ".TRACK_PERC",              CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1562[lng], string_percent[lng], 62.5,      10,     90, NULL           ); // Tracking percentage 
      parameter[num_params++]->format_spc = L"%.1lf";
    }

    parameter[num_params  ] = new CParameter( "INPUT_BELT.SPEED",              CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1550[lng], string_hz[lng],     25.0,     0.0,   80.0, &file_manager  ); // Input belt speed (Hz)
    parameter[num_params++]->format_spc = L"%.1lf";

    #ifdef OUTPUT_BELT    // if defined output belt management and parameters enabled
      ADS_write_value( ".F_OUTPUTBELT", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
      parameter[num_params  ] = new CParameter( "OUTPUT_BELT.SPEED",        CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1552[lng], string_hz[lng],     25.0,    0.0,   80.0, &file_manager  ); // Output belt speed (Hz)
      parameter[num_params++]->format_spc = L"%.1lf";
    #endif

    #if SERIAL_N==201300701
      parameter[num_params  ] = new CParameter( "OUTPUT_BELT.SPEED",        CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1552[lng], string_hz[lng],     25.0,    0.0,   80.0, &file_manager  ); // Output belt speed (Hz)
      parameter[num_params++]->format_spc = L"%.1lf";
    #endif

    num_menu_btn++;


    // *******  SUB-MENU FOR GRIPPERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1610[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1610[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".OPEN_OFFSET",       CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1620[lng], string_step[lng],   55.4,   -1.0,    60.1, &file_manager  ); // Grippers opening phase
    parameter[num_params++] = new CParameter( ".ANT_OPEN_MAX",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1622[lng], string_step[lng],    0.5,    0.0,     2.0, &file_manager  ); // Grippers opening advance 
    parameter[num_params++] = new CParameter( ".OPEN_PRESSURE",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1624[lng], string_unit[lng],    3.5,    0.0,     8.0, &file_manager  ); // Grippers opening pressure
    parameter[num_params++] = new CParameter( ".CLOSE_OFFSET",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1630[lng], string_step[lng],   46.7,   -1.0,    60.1, &file_manager  ); // Grippers closing phase
    parameter[num_params++] = new CParameter( ".ANT_CLOSE_MAX",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1632[lng], string_step[lng],    0.5,    0.0,     2.0, &file_manager  ); // Grippers closing advance 
    parameter[num_params++] = new CParameter( ".CLOSE_PRESSURE",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1634[lng], string_unit[lng],    1.5,    0.0,     8.0, &file_manager  ); // Grippers closing pressure 
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GRIPPERS",  CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1612[lng],              L"",      0,      0,       1, &file_manager ); // check opening/closing
    parameter[num_params++] = new CParameter( ".GROPEN_DELAY",      CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1614[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for opening error
    parameter[num_params++] = new CParameter( ".GRCLOSE_DELAY",     CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1616[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for closing error
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params  ] = new CParameter( ".F_CLOSED_LOOP",     CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1636[lng],              L"",      0,      0,       1                ); // closed loop
    f_closed_loop = parameter[num_params++];
    ASSERT( f_closed_loop==parameter[num_params-1] );

    num_menu_btn++;

    // *******  SUB-MENU FOR DEVIATORS/OUTPUT - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1640[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1640[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); //380 );
    int main_menu_btn = num_menu_btn;

    parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_330[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    parameter[num_params++] = new CParameter( ".F_ENABLE_LIGHTCHK",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_332[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MAX_WIDTH", CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1639[lng], string_step[lng],    0.9,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MIN_WIDTH", CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1638[lng], string_step[lng],    0.1,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GOODS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1660[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output goods
    parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS1",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1662[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects1 
    parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS2",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1664[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects2

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "PRODUCT_FLOW.LOAD_VAL",           CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1654[lng], string_unit[lng],      0,      0,  1023  ); // Loading initial value
    parameter[num_params++] = new CParameter( ".F_REJECT_SIMULATE",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1656[lng],              L"",      0,      0,     1  ); // rejects simulation
    num_menu_btn++;

    // DELAYS
    menu_btn[num_menu_btn] = new CMenu_button( string_1750[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1750[lng] );
    //menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    //parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_330[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn-1]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1752[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1754[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1756[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1758[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1760[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej2 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1762[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej2 full
    #ifdef INPUTBELT_SENSOR // Id defined set input sensor delays
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY1",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1764[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY2",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1766[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    #endif
    #ifdef FALLEN_CONTAINER // If defined, use code to check fallen containers/set delay/enable alarm
      parameter[num_params++] = new CParameter( "ALARMS_CHECK.FALLEN_DELAY",     CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1769[lng], string_msec[lng],   300,   0, 1000000, &file_manager  ); // Delay to trigger fallen container alarm
    #endif      
    num_menu_btn++;

    // DISTANCES
    menu_btn[num_menu_btn] = new CMenu_button( string_1653[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1653[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV1",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1641[lng], string_step[lng],   77.50,  20.0, 100.0, &file_manager  ); // Distance input photosens - first deviator 
    parameter[num_params++] = new CParameter( ".DIST_DEV1_DEV2",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1645[lng], string_step[lng],    4.00,   1.0,  10.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_GOOD",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1642[lng], string_step[lng],   82.75,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ1",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1643[lng], string_step[lng],   87.77,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ2",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1644[lng], string_step[lng],   95.09,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWI",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1646[lng], string_step[lng],    2.3,    0.0,   4.0, &file_manager  ); // Main starwheel suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWO",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1648[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Main starwheel blowing lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDI",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1650[lng], string_step[lng],    1.3,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDO",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1652[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels blowing lenght (steps)
    num_menu_btn++;


    // *******  SUB-MENU FOR FIRST SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1700[lng], menu_btn[0]->child );
    //UINT nmbt = num_menu_btn-1;

    file_manager.Add_separator( string_1700[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "SEND_SPIN_PARAMETERS.RUN",                 CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1710[lng],              L"",      1,      0,     1                 ); // send data
 
    menu_btn[num_menu_btn+1]  = new CMenu_button( string_1710[lng],  menu_btn[num_menu_btn]->child, &Send_spin_parameters      ); // ATTENTION TO num_menu_btn!!!

    menu_btn[num_menu_btn]->child->posy += 30; // Set vertical position
    parameter[num_params++] = new CParameter( ".ALIGN_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1718[lng],              L"",      1,      0,     1, &file_manager  ); // enable alignment spin cycle
    parameter[num_params++] = new CParameter( ".F_CHECK_LAM",            CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1730[lng],              L"",      1,      0,     1, NULL           ); // enable LAM error detection
    parameter[num_params++] = new CParameter( ".SPIN1_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 1
    parameter[num_params++] = new CParameter( ".VEL1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],   1000,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   3000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN1",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY1",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN1_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle1
    num_menu_btn++;

    num_menu_btn++; // for send_spin_parameters


    // *******  SUB-MENU FOR SECOND SPINNING - num_menu_btn=  ******* 

    #if STN2==PARTICLE_BACK || STN2==PARTICLE_BOTTOM
      menu_btn[num_menu_btn] = new CMenu_button( string_1701[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1701[lng] );
    #else
      menu_btn[num_menu_btn] = new CMenu_button( string_1703[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1703[lng] );
    #endif
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );


/*    menu_btn[num_menu_btn] = new CMenu_button( string_1701[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1701[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );*/

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN2_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 2
    parameter[num_params++] = new CParameter( ".VEL2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    800,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN2",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     12,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY2",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN2_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle2
    num_menu_btn++;


    // *******  SUB-MENU FOR THIRD SPINNING - num_menu_btn=  ******* 

    #if STN2==COSMETIC_BACK
      menu_btn[num_menu_btn] = new CMenu_button( string_1701[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1701[lng] );
    #else
      #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM
        menu_btn[num_menu_btn] = new CMenu_button( string_1707[lng], menu_btn[0]->child );
        file_manager.Add_separator( string_1707[lng] );
      #else
        menu_btn[num_menu_btn] = new CMenu_button( string_1703[lng], menu_btn[0]->child );
        file_manager.Add_separator( string_1703[lng] );
      #endif
    #endif
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN3_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin3
    parameter[num_params++] = new CParameter( ".VEL3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    180,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN3",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],      4,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY3",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for spin3
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN_LINE",     CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup
    num_menu_btn++;


    // *******  SUB-MENU FOR EJECTOR MASKS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1668[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1668[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_ENABLE_SPINCHK",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1666[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_SPINCHK",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1667[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
   
    parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE1",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1670[lng],  L"",   0,   0,   1, &file_manager ); // 


    parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1672[lng],  L"",   0,   0,   1, &file_manager ); // 

/*    #if STN2==PARTICLE_BACK || STN2==PARTICLE_BOTTOM  // Station 2 is for particle
      parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1672[lng],  L"",   0,   0,   1, &file_manager ); // 
    #else // Normal cosmetic
      parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1678[lng],  L"",   0,   0,   1, &file_manager ); // 
    #endif*/

    #ifdef OPACITY_CTRL
      parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_2280[lng],  L"",   0,   0,   1, &file_manager ); // 
      parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1674[lng],  L"",   0,   0,   1, &file_manager ); // 
    #else
      parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1674[lng],  L"",   0,   0,   1, &file_manager ); // 
      parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1675[lng],  L"",   0,   0,   1, &file_manager ); // 
    #endif

    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM  // Station 3 is for particle

      #if STN2==COSMETIC_BACK  // Station 2 is for cosmetic
        parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1678[lng],  L"",   0,   0,   1, &file_manager ); // 
      #else // Normal cosmetic
        ADS_write_value( ".F_PARTICLE_3", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high to fix counting for particles/particle3
        parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1673[lng],  L"",   0,   0,   1, &file_manager ); // 
      #endif

    #else // Normal cosmetic
      parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1678[lng],  L"",   0,   0,   1, &file_manager ); // 
    #endif

/*
    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM  // Station 3 is for particle
      ADS_write_value( ".F_PARTICLE_3", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high to fix counting for particles/particle3
      parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1673[lng],  L"",   0,   0,   1, &file_manager ); // 
    #else // Normal cosmetic
      parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1678[lng],  L"",   0,   0,   1, &file_manager ); // 
    #endif
 */  
    parameter[num_params++] = new CParameter( ".F_ENABLE_TIPCAP",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1680[lng],  L"",   0,   0,   1, &file_manager ); // 
    //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
    #ifdef FO_COLOR
      parameter[num_params++] = new CParameter( ".F_ENABLE_FOCOLOR",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1774[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    #endif
    #ifdef LIQUID_COLOR
      parameter[num_params++] = new CParameter( ".F_ENABLE_FOCOLOR",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1775[lng],  L"",   0,   0,   1, &file_manager ); // LQ color
    #endif
    #ifdef DOTRING_COLOR
      parameter[num_params++] = new CParameter( ".F_ENABLE_DRCOLOR",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1779[lng],  L"",   0,   0,   1, &file_manager ); // DR color
    #endif

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE1",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1682[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE2",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1683[lng],  L"",   0,   0,   1, &file_manager ); // 

    #ifdef OPACITY_CTRL
      parameter[num_params++] = new CParameter( ".F_DEV2_FILLING1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_2282[lng],  L"",   0,   0,   1, &file_manager ); // 
      parameter[num_params++] = new CParameter( ".F_DEV2_FILLING2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1684[lng],  L"",   0,   0,   1, &file_manager ); // 
    #else
      parameter[num_params++] = new CParameter( ".F_DEV2_FILLING1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1684[lng],  L"",   0,   0,   1, &file_manager ); // 
      parameter[num_params++] = new CParameter( ".F_DEV2_FILLING2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1685[lng],  L"",   0,   0,   1, &file_manager ); // 
    #endif

//    parameter[num_params++] = new CParameter( ".F_DEV2_FILLING1",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1684[lng],  L"",   0,   0,   1, &file_manager ); // 
//    parameter[num_params++] = new CParameter( ".F_DEV2_FILLING2",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1685[lng],  L"",   0,   0,   1, &file_manager ); // 

    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM  // Station 3 is for particle

      #if STN2==COSMETIC_BACK  // Station 2 is for cosmetic
//        parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1678[lng],  L"",   0,   0,   1, &file_manager ); // 
        parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1686[lng],  L"",   0,   0,   1, &file_manager ); // 
      #else // Normal cosmetic
//        parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1673[lng],  L"",   0,   0,   1, &file_manager ); // 
        parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1687[lng],  L"",   0,   0,   1, &file_manager ); // 
      #endif
    
    #else // Normal cosmetic
      parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1686[lng],  L"",   0,   0,   1, &file_manager ); // 
    #endif


/*    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM  // Station 3 is for particle
      parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1687[lng],  L"",   0,   0,   1, &file_manager ); // 
    #else // Normal cosmetic
      parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1686[lng],  L"",   0,   0,   1, &file_manager ); // 
    #endif */

    parameter[num_params++] = new CParameter( ".F_DEV2_TIPCAP",       CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1688[lng],  L"",   0,   0,   1, &file_manager ); // 
    //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
    #ifdef FO_COLOR
      parameter[num_params++] = new CParameter( ".F_DEV2_FOCOLOR",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1784[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    #endif
    #ifdef LIQUID_COLOR
      parameter[num_params++] = new CParameter( ".F_DEV2_FOCOLOR",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1785[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    #endif
    #ifdef DOTRING_COLOR
      parameter[num_params++] = new CParameter( ".F_DEV2_DRCOLOR",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1789[lng],  L"",   0,   0,   1, &file_manager ); // DR color
    #endif


    num_menu_btn++;

    // *******  SUB-MENU FOR TRIGGERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1690[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1690[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params  ] = new CParameter( ".TIPCAP_TRIGGER_PHASE",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1691[lng], string_step[lng], 0.10, 0.0, 0.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
    #ifdef FO_COLOR
      parameter[num_params  ] = new CParameter( ".FOCOLOR_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1692[lng], string_step[lng],  0.2, 0.0, 0.95, &file_manager  );
      parameter[num_params++]->format_spc = L"%.2lf";
    #endif
    #ifdef LIQUID_COLOR
      parameter[num_params  ] = new CParameter( ".LQCOLOR_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1692b[lng], string_step[lng],  0.2, 0.0, 0.95, &file_manager  );
      parameter[num_params++]->format_spc = L"%.2lf";
    #endif
    #ifdef DOTRING_COLOR
      parameter[num_params  ] = new CParameter( ".DRCOLOR_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1696c[lng], string_step[lng],  0.2, 0.0, 0.95, &file_manager  );
      parameter[num_params++]->format_spc = L"%.2lf";
    #endif
    parameter[num_params  ] = new CParameter( ".PART1_TRIGGER_PHASE",      CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1697[lng], string_step[lng], 0.11, 0.0, 3.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".PART2_TRIGGER_PHASE",      CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1698[lng], string_step[lng], 0.12, 0.0, 3.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";

    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM  // Station 3 is for particle
      parameter[num_params  ] = new CParameter( ".COSM_TRIGGER_PHASE",       CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1698b[lng], string_step[lng], 0.13, 0.0, 3.91, &file_manager  );
    #else // Normal cosmetic
      parameter[num_params  ] = new CParameter( ".COSM_TRIGGER_PHASE",       CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1699[lng], string_step[lng], 0.13, 0.0, 3.91, &file_manager  );
    #endif
    parameter[num_params++]->format_spc = L"%.2lf";
	//Pour marked for image save mode selection on 20190513
	//parameter[num_params] = new CParameter( &imagesavemode, CTYPE_INT, 0, menu_btn[num_menu_btn]->child, string_320a[lng], string_unit[lng], 3, 0, 3, &file_manager);
	//Pour marked for image save mode selection on 20190513
    num_menu_btn++;


    #ifdef HGA_LEAKTEST            // HGA components installed
      ADS_write_value( ".F_HGA_ENABLE", TRUE, CTYPE_BOOL8 ); // Force enable HGA
      menu_btn[num_menu_btn] = new CMenu_button( string_1950[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1950[lng] );
      menu_btn[num_menu_btn]->child->new_size( 320, 100 );
      parameter[num_params  ] = new CParameter( ".HGA_TRIGGER_PHASEA",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1952[lng], string_step[lng],   0.90,    0.0,  0.99, &file_manager  ); // Input phase for HGA trigger A 
      parameter[num_params++]->format_spc = L"%.2lf";
      menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
      parameter[num_params++] = new CParameter( ".DIST_LOAD_HGA",         CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1956[lng], string_step[lng],     72,    0.0,   110, &file_manager  ); // Distance load-hga
      parameter[num_params++] = new CParameter( ".HGA_THRESHOLDH",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1958[lng], string_unit[lng],  15000,      0, 32000, &file_manager  ); // Threshold for accept/reject
      parameter[num_params++] = new CParameter( ".HGA_THRESHOLDL",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1960[lng], string_unit[lng],  15000,      0, 32000, &file_manager  ); // Threshold for accept/reject
      menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
      parameter[num_params++] = new CParameter( ".F_ENABLE_HGA",          CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1964[lng],  L"",   0,   0,   1, &file_manager ); // Sidewall
      parameter[num_params++] = new CParameter( ".F_DEV2_HGA",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1966[lng],  L"",   0,   0,   1, &file_manager ); // Sidewall
      num_menu_btn++;

        #ifdef HGA_DATAREC
          //if ( IS_PC1 )
          //{
          menu_btn[num_menu_btn] = new CMenu_button( string_1970[lng], menu_btn[num_menu_btn-1]->child, &HGAdata_record );
          //if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
          hgadatarec_btn = menu_btn[num_menu_btn];
          num_menu_btn++;
          //}
        #endif

      #endif


/*
    #ifdef HGA_LEAKTEST            // HGA components installed
      ADS_write_value( ".F_HGA_ENABLE", TRUE, CTYPE_BOOL8 ); // Force enable HGA
      menu_btn[num_menu_btn] = new CMenu_button( string_1950[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1950[lng] );
      menu_btn[num_menu_btn]->child->new_size( 320, 100 );
      parameter[num_params  ] = new CParameter( ".HGA_TRIGGER_PHASEA",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1952[lng], string_step[lng],   0.90,    0.0,  0.99, &file_manager  ); // Input phase for HGA trigger A 
      parameter[num_params++]->format_spc = L"%.2lf";
      //parameter[num_params++] = new CParameter( ".HGA_TRIGGER_PHASEB",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1954[lng], string_step[lng],   0.40,    0.0,  0.99, &file_manager  ); // Input phase for HGA trigger B 
      menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
      parameter[num_params++] = new CParameter( ".DIST_LOAD_HGA",         CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1956[lng], string_step[lng],     72,    0.0,   110, &file_manager  ); // Distance load-hga
      parameter[num_params++] = new CParameter( ".HGA_THRESHOLD",         CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1958[lng], string_unit[lng],  15000,      0, 32000, &file_manager  ); // Threshold for accept/reject
      menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
      parameter[num_params++] = new CParameter( ".F_ENABLE_HGA",          CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1964[lng],  L"",   0,   0,   1, &file_manager ); // Sidewall
      parameter[num_params++] = new CParameter( ".F_DEV2_HGA",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1966[lng],  L"",   0,   0,   1, &file_manager ); // Sidewall
      num_menu_btn++;
    #endif
    */



    // *******  SUB-MENU FOR CALIBRATION/ADVANCED PARAMETERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1800[lng], menu_btn[0]->child );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[7] );
    file_manager.Add_separator( string_1800[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    calibration_menu = menu_btn[num_menu_btn];
    main_menu_btn = num_menu_btn;
    num_menu_btn++;


    // ABC phases
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1809[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1809[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".INPUT_PHASE_A",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1810[lng], string_step[lng],   1.50,    0.0,   3.0, &file_manager  ); // Input phase for A valves
    parameter[num_params++] = new CParameter( ".INPUT_PHASE_B",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1812[lng], string_step[lng],   2.50,    0.0,   3.0, &file_manager  ); // Input phase for B valves
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCA",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1820[lng], string_step[lng],   2.50,    0.0,   4.0, &file_manager  ); // Input cam phase for A cameras
    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCB",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1822[lng], string_step[lng],   3.50,    0.0,   4.0, &file_manager  ); // Input cam phase for B cameras
    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCC",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1824[lng], string_step[lng],   0.50,    0.0,   4.0, &file_manager  ); // Input cam phase for C cameras
    num_menu_btn++;


    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1828[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1828[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MAX_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1830[lng], string_mm[lng],    562.0,  200.0,    700.0, &file_manager  ); // Maximum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MIN_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1832[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Minimum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_mm[lng],    557.0,  200.0,    700.0, &file_manager  ); // Top point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_ec[lng],  9480033,      0, 16777215, &file_manager  ); // Top point height (ec)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Low point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_ec[lng],  9569182,      0, 16777215, &file_manager  ); // Low point height (ec)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    num_menu_btn++;

    // Spin offsets and distances
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1848[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1848[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".SPIN1_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1850[lng], string_unit[lng],    8,    0,   15, &file_manager  ); // Spin1 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN2_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1852[lng], string_unit[lng],    4,    0,   15, &file_manager  ); // Spin2 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN3_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1854[lng], string_unit[lng],    1,    0,   15, &file_manager  ); // Spin3 offset (motors)
    parameter[num_params++] = new CParameter( ".ALIGN_OFFSET",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1856[lng], string_step[lng], 50.0,  0.0, 60.0, &file_manager  ); // Align offset (steps)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".PART1_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1801[lng], string_step[lng], 40.0,  0.0, 60.0, &file_manager  ); // datarecord particle1 offset (heads)
    parameter[num_params++] = new CParameter( ".PART2_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1802[lng], string_step[lng], 24.0,  0.0, 60.0, &file_manager  ); // datarecord particle2 offset (heads)
    parameter[num_params++] = new CParameter( ".COSM_OFS",                      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1803[lng], string_step[lng], 12.0,  0.0, 60.0, NULL           ); // datarecord particle3/cosmetic offset (heads)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".DIST_LOAD_TCA",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1860[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and tip/cap cameras
    //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
    #ifdef FO_COLOR
      parameter[num_params++] = new CParameter( ".DIST_LOAD_FO",                CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1861[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and FO color camera
    #endif
    #ifdef LIQUID_COLOR
      parameter[num_params++] = new CParameter( ".DIST_LOAD_LQ",                CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1861c[lng], string_unit[lng],    3,    1,   25, &file_manager  ); // Distance between input and liquid color camera
    #endif
    #ifdef DOTRING_COLOR
      parameter[num_params++] = new CParameter( ".DIST_LOAD_DR",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1861b[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and DR color camera
    #endif
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1A",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1864[lng], string_unit[lng],    7,    0,   15, &file_manager  ); // Distance between input and first part A
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1B",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1865[lng], string_unit[lng],    7,    0,   15, &file_manager  ); // Distance between input and first part B
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1C",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1866[lng], string_unit[lng],    8,    0,   15, &file_manager  ); // Distance between input and first part C
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1D",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1867[lng], string_unit[lng],    8,    0,   15, &file_manager  ); // Distance between input and first part D
    num_menu_btn++;





    // *******  SUB-MENU FOR BATCH - num_menu_btn=7  ******* 
/*    menu_btn[num_menu_btn] = new CMenu_button( string_1310[lng], menu_btn[7]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position */

    menu_btn[num_menu_btn++] = new CMenu_button( string_1310[lng],  menu_btn[7]->child, &Reset_statistics      ); 

    if ( batch_mngr )
    {
      // batch start/stop
      menu_btn[num_menu_btn++] = new CMenu_button( string_1304[lng],  menu_btn[7]->child, &Batch_startstop     ); 
      batch_btn = menu_btn[num_menu_btn-1];
      if ( batch_mngr->current.status ) batch_btn->SetWindowTextW( string_1306[lng] );

      // batch print/report
      menu_btn[num_menu_btn++] = new CMenu_button( string_1308[lng],  menu_btn[7]->child, &Batch_report        ); 
    }

  }



  
//    ASSERT(menu_btn[num_menu_btn]==NULL);


  // ***************************************************************************
  //
  //                           PARAMETRI DI ISPEZIONE/MISURA
  //
  // ***************************************************************************

	//menu_btn[1]->child->new_size( 320, 300+NUM_TLC*50 ); // dimensioni sottofinestra parametri ispezione

	// SUB-MENU for
//  menu_btn[1]->child->posy += 10; // Set vertical position
//	menu_btn[6] = new CMenu_button( string_1050[lng], menu_btn[0]->child );
//	menu_btn[1]->child->new_size( 320, 440 );
  
  //parameter[num_params++] = new CParameter( &num_img,       CTYPE_DINT,  0, menu_btn[1]->child, string_2032[lng],   string_uni[lng], 20,  5,  50, &file_manager );
	//parameter[num_params++] = new CParameter( &free_run,      CTYPE_BOOL8, 0, menu_btn[1]->child, string_2050[lng],   0,                1,  0,   0, &file_manager );
	//parameter[num_params++] = new CParameter( &learn_refl,    CTYPE_BOOL8, 0, menu_btn[1]->child, string_2124[lng],   0,                1,  0,   0, NULL,          &Learn_reflections );

  parcat_1 = L"INSPECTION";
  parcat_2 = NULL;


	parameter[num_params++] = new CParameter( &show_rejects,  CTYPE_BOOL8, 0, menu_btn[1]->child, string_2124[lng],   0,                1,  0,   0, NULL            );

	parameter[num_params++] = new CParameter( &pseudo_colors, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2122[lng],   0,                1,  0,   0, NULL, &Set_LUT  );


  #if STN1==PARTICLE_BOTH // First  station defined for particle with selectable back/bottom light
    if ( IS_PC1 )	parameter[num_params++] = new CParameter( &stn1_part_back, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2076[lng],   0,             1,  0,   0, &file_manager, &Set_stn1_mode     );
  #endif


  #if SERIAL_N==201400023 // L40 ciron, lift inspection menu a bit
    RECT area;
    pView->menu_btn[1]->child->GetWindowRect(&area);
    area.top -= 60;
    pView->menu_btn[1]->child->MoveWindow(&area);
  #endif



  #ifdef COMBINED_TIPCAP

//    tipcap_tip = TRUE;
//    ADS_write_value( ".F_DOUBLE_CAP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
//    ADS_write_value( ".F_TRIPLE_TIP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high

  	parameter[num_params++] = new CParameter( &tipcap_tip,      CTYPE_BOOL8, 0, menu_btn[1]->child, string_608[lng],    0,            1,  0,   0, &file_manager, &Tipcap_mode        );
//    saveimages_btn = menu_btn[num_menu_btn];

    parameter[num_params++] = new CParameter( &tipcap_freerun,  CTYPE_BOOL8, 0, menu_btn[1]->child, string_818[lng],    0,            1,  0,   0, NULL,          &Tipcap_freerunning );
    Tipcap_freerunning(0); // update variables (not called by file_manager)

	  parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,            1,  0,   0, NULL,          &Set_LUT            );
//    parameter[num_params++] = new CParameter( "TRIGGER_DOUBLE_CAP.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 

    RECT area;
    pView->menu_btn[1]->child->GetWindowRect(&area);
    area.top -= 60;
    pView->menu_btn[1]->child->MoveWindow(&area);


  #else // ONLY CAP OR ONLY TIP

    #ifdef NEWCAP_V30
      if ( IS_PC1 )
      {
        ADS_write_value( ".F_CAP_V30", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  //  	parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
        parameter[num_params++] = new CParameter( "TRIGGER_CAP_V30.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
      }
    #endif

    #ifdef NEWCAP_DOUBLE
      ADS_write_value( ".F_DOUBLE_CAP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  	  parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
      parameter[num_params++] = new CParameter( "TRIGGER_DOUBLE_CAP.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
    #endif

    #ifdef NEW_TRIPLE_TIP
      ADS_write_value( ".F_TRIPLE_TIP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  	  //parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
      //parameter[num_params++] = new CParameter( "TRIGGER_DOUBLE_CAP.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
    #endif

  #endif


  // -----------------------------   S O T T O M E N U     O F     E A C H     C A M E R A    ---------------------------------------------
	for ( UINT i=0 ; i<num_tlc ; i++ ) // Sotto gruppo parametri telecamere - Livello 1 - menu_btn[20,21,22]
  {
    wchar_t msg[50+1];
//    swprintf( msg, string_810[lng], i+1 );
    swprintf( msg, 50, string_800[lng], i, camera[i].name );
	  menu_btn[num_menu_btn] = new CMenu_button( msg, menu_btn[1]->child );
	  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*300*/ );
    file_manager.Add_separator( msg );

    parcat_1 = msg;
    parcat_2 = NULL;


    parameter[num_params++] = new CParameter( &camera[i].shutter,    CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
    parameter[num_params++] = new CParameter( &camera[i].frame_rate, CTYPE_REAL,  0, menu_btn[num_menu_btn]->child, string_2066[lng], string_fps [lng],   50.0,               0.0,            6000.0, &file_manager, &Set_camera, i );
    num_menu_btn++;

    int menu_btn_par = num_menu_btn-1;
    if ( IS_PC1 ) 
    {
      if ( i<3 ) // tip/cap dedicated parameters
      {
        parameter[num_params++] = new CParameter( &camera[i].trigger,    CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
        #if defined NEW_TRIPLE_TIP && !defined COMBINED_TIPCAP
          if ( i==0 ) parameter[num_params++] = new CParameter( "TRIGGER_TRIPLE_TIP.FREE_RUN",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[menu_btn_par]->child, string_606[lng],  L"",   0,   0,   1, NULL ); // 
        #endif
        if ( tip_insp[i] ) tip_insp[i]->Add_menu_parameters( menu_btn[num_menu_btn-1]->child );
      }

      if ( i>=3 && i<=6 )       // particle/filling dedicated parameters
      {
        if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( fillingl_insp[i] ) fillingl_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
      #ifdef FO_COLOR
        if ( i==7 )  // FO color dedicated parameters
        {
          parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
          if ( focolor_insp[i] ) focolor_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
          if ( bottom_insp [i] ) bottom_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
          if ( oralfo_insp [i] ) oralfo_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        }
      #endif

      #ifdef LIQUID_COLOR
        if ( i==7 )  // liquid color dedicated parameters
        {
          parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
          if ( lqcolor_insp[i] ) lqcolor_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
//          if ( focolor_insp[i] ) focolor_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
//          if ( bottom_insp [i] ) bottom_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
//          if ( oralfo_insp [i] ) oralfo_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        }
      #endif

      #ifdef DOTRING_COLOR
        if ( i==7 || i==8 )  // dotring color dedicated parameters
        {
          if ( i==7 ) parameter[num_params++] = new CParameter( "TRIGGER_DOTRING.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[menu_btn_par]->child, string_606[lng],  L"",   0,   0,   1, NULL ); // 
          parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
          if ( drcolor_insp[i] ) drcolor_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        }
      #endif

    }

    if ( IS_PC2 ) 
    {
      if ( i<4 )
      {
        if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( fillingl_insp[i] ) fillingl_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }
      else
      {
        if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }
    }

  }


  #ifndef NEW_PARTICLE // For new particle DON'T ADD learning menu

    menu_btn[1]->child->posy += 10; // Set vertical position

    // particle start/stop learning - show learning
	  parameter[num_params++] = new CParameter( &learning,    CTYPE_BOOL8, 0, menu_btn[1]->child, string_2052[lng], 0,  0,  0, 1, NULL, &Learn_reflections );

    // Add reflections sub-menu
    int refl_menu = num_menu_btn;
    menu_btn[num_menu_btn++] = new CMenu_button( string_2034[lng], menu_btn[1]->child );
	  menu_btn[refl_menu]->child->new_size( 320, 100 );

    menu_btn[num_menu_btn++] = new CMenu_button( string_2054[lng], menu_btn[refl_menu]->child, &Show_reflections   );
    menu_btn[num_menu_btn++] = new CMenu_button( string_2042[lng], menu_btn[refl_menu]->child, &Filter_reflections );
    menu_btn[num_menu_btn++] = new CMenu_button( string_2036[lng], menu_btn[refl_menu]->child, &Export_reflections );
    menu_btn[num_menu_btn++] = new CMenu_button( string_2038[lng], menu_btn[refl_menu]->child, &Import_reflections );

  #endif // NEW_PARTICLE - For new particle DON'T ADD learning menu











  // ***************************************************************************
  //
	//               ADD FUNCTIONS/UTILITIES	( container menu_btn[4] )
  //
  // ***************************************************************************

/*  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], menu_btn[4]->child, &Change_view       );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;  */

  parameter[num_params++] = new CParameter( ".O_MACHINE_LIGHT", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_124[lng], L"", 0, 0, 1 ); // machine lights
  //Pour 20200702
  //parameter[num_params++] = new CParameter( ".F_RUN_AUTOMATIC", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_122[lng], L"", 0, 0, 1 ); // machine lights
//Pour 20200702

  parameter[num_params++] = new CParameter( ".F_RUN_BELTS",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_128[lng], L"", 1, 0, 1 ); // run belt/s

  #ifdef REVERSE_BELT    // If defined button is added to allow reverse of belt in manual/jog mode
    parameter[num_params++] = new CParameter( ".F_REVERSE_BELT",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_142[lng], L"", 1, 0, 1 ); // reverse input belt direction in jog mode
  #endif

  #ifdef VACUUM_PUMP // if defined add button connected to output 6th board/4th output
    parameter[num_params++] = new CParameter( ".O_VACUUM_PUMP",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_340[lng], L"", 1, 0, 1 ); // run vacuum pump
  #endif

  menu_btn[num_menu_btn] = new CMenu_button( string_160[lng], menu_btn[4]->child, &Movie_startstop   );
	movie_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  #ifdef ALARMLOG_SEPARATE // log alarms separately and add button to show them
    menu_btn[num_menu_btn++] = new CMenu_button( string_104[lng], menu_btn[4]->child, &Show_alarmlog  );
  #endif

  #ifdef NEW_LOGGER // log alarms separately and add button to show them
    menu_btn[num_menu_btn++] = new CMenu_button( string_3900[lng], menu_btn[4]->child, &Show_log  );
  #endif

  #ifdef NEW_PASSW_MNGR  // New users/passwords manager

/*
  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
  }
*/

  //Pour marked on 20200423
	
	    if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], OPERATOR_LEVEL );//SUPERVISOR_LEVEL changed to OPERATOR_LEVEL on 20200427
    num_menu_btn++;
    //menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
	menu_btn[num_menu_btn] = new CMenu_button( string_1036[lng], menu_btn[4]->child);
	password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
	
    file_manager.Add_separator( string_1036[lng] );

	// Add Password control sub-menu on 20200713
    int log_menu = num_menu_btn;//Pour
    menu_btn[log_menu]->child->new_size( 320, 100 );//Pour
	parameter[num_params++] = new CParameter( &password_mngr->chgpwd_days, CTYPE_INT ,  0, menu_btn[log_menu]->child, string_1037[lng], string_day[lng],  90,  1,  360, &file_manager);//Pour marked on 20200713
	password_mngr->insert_hmi( parameter[num_params-1], SUPERUSER_LEVEL );
	parameter[num_params++] = new CParameter( &password_mngr->logout_timeout, CTYPE_INT ,  0, menu_btn[log_menu]->child, string_1038[lng], string_minute[lng],  3,  1,  30, &file_manager);
	password_mngr->insert_hmi( parameter[num_params-1], SUPERUSER_LEVEL );
	parameter[num_params++] = new CParameter( &password_mngr->annotate_on, CTYPE_BOOL8, 0, menu_btn[log_menu]->child, string_1035[lng], L"", 0, 1, 1 ); 
	num_menu_btn++;
    menu_btn[num_menu_btn] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
	num_menu_btn++;
  }
  
	/*
	  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], OPERATOR_LEVEL );//SUPERVISOR_LEVEL changed to OPERATOR_LEVEL on 20200427
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
  }
  */
  //Pour marked on 20200423
  #else
  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], OPERATOR_LEVEL );//SUPERVISOR_LEVEL changed to OPERATOR_LEVEL on 20200427
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
  }
  #endif

	menu_btn[num_menu_btn] = new CMenu_button( string_170[lng], menu_btn[4]->child, &Save_images       );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveimages_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

//	parameter[num_params++] = new CParameter( &datarec_on, CTYPE_BOOL8, 0, menu_btn[4]->child, string_2130[lng], 0,  0,  0, 1, NULL, NULL );
	menu_btn[num_menu_btn] = new CMenu_button( string_304[lng], menu_btn[4]->child, &Data_record       );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  datarec_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  #ifdef SAVE_INPUTDATA
    if ( IS_PC1 )
    {
      menu_btn[num_menu_btn] = new CMenu_button( string_354[lng], menu_btn[4]->child, &Inpdata_record );
      if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
      inpdatarec_btn = menu_btn[num_menu_btn];
      num_menu_btn++;
    }
    if ( IS_PC2 ) // Used for filling level NITIN
    {
      menu_btn[num_menu_btn] = new CMenu_button( string_360[lng], menu_btn[4]->child, &Inpdata_record );
      if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
      inpdatarec_btn = menu_btn[num_menu_btn];
      num_menu_btn++;
    }
  #endif



	menu_btn[num_menu_btn] = new CMenu_button( string_320[lng], menu_btn[4]->child, &Save_inspections  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveinsp_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

	menu_btn[num_menu_btn] = new CMenu_button( string_324[lng], menu_btn[4]->child, &Save_sequences  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveseq_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  #ifdef GRIPPER_STATISTICS
  if ( IS_PC1 )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_8150[lng], menu_btn[4]->child, &Grippers_statistics );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
    num_menu_btn++;
  }
  #endif

  //#ifdef DEBUGPC //_DEBUG
  if ( test_process )
  {
	  //menu_btn[num_menu_btn++] = new CMenu_button( string_172[lng],  menu_btn[4]->child, &Load_images       );
    menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[4]->child, &Test_process      ); 
    //menu_btn[num_menu_btn++] = new CMenu_button( string_912[lng],  menu_btn[4]->child, &Sequence_acquire  ); 
  }
//  #endif
   // menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[4]->child, &Test_process      ); 
  
 //  ASSERT ( menu_btn[19]==NULL );
 

}




/* Create menu for all functions/parameters */
void CChildView::Create_menu_TIVS_C40(void) 
{

  CRect rett;
  GetClientRect( &rett );

	rett.top    = OFFS_COORDY;
  rett.bottom = rett.top + 360;
	rett.left   = OFFS_COORDY;
  rett.right  = rett.Width();

  num_container = 0;

	// --------        CONTENITORE BASE - Livello 0       ------------
	//container_main = new CContainer_main( "menu base", rett, this, IDD_CONTAINER );

  if ( container_main==NULL )
  {
	  container_main = new CContainer_main( L"menu base", rett, this, IDD_CONTAINER );
	  container_main->ShowWindow( SW_SHOW );
  }

  #define BRD_SUP       14

  #define COLA_SX      440
  #define COLB_SX      (COLA_SX+SPACE_X+BTN_DIMX)
  #define COLC_SX      (COLB_SX+SPACE_X+BTN_DIMX)
  #define COLD_SX      (COLA_SX-SPACE_X-BTN_DIMX)

  #define SPACE_X       14
  #define SPACE_Y       14
  #define BTN_DIMX     250 // BUTTONS WIDTH
  #define BTN_DIMY      58 // BUTTONS HEIGHT



	// * * * *    PRIMA COLONNA      * * * *
	CMenu_button::hook_pos = CMenu_button::bottom_left; // child di livello 1 allineati sotto e a sinistra

	// AUTOMATION BUTTON (num_menu_btn=0)
  rett.top    =                BRD_SUP;
  rett.bottom = rett.top    + BTN_DIMY;
  rett.left   =                COLA_SX;
  rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_900[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[0] );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;


  if ( IS_PC1 )
  {
   	// INSPECTION BUTTON - FREEZE (num_menu_btn=1)
	  rett.top    = rett.bottom +	 SPACE_Y;
	  rett.bottom = rett.top    + BTN_DIMY;
    //	rett.right  = rett.left   + BTN_DIMX;
    rett.right  = rett.left   + (BTN_DIMX-10)/2;
    menu_btn[num_menu_btn] = new CMenu_button( string_904[lng], container_main ); 
    menu_btn[num_menu_btn]->child->new_size( 320, 100 /*740*/ ); // regolo dimensione sottomenu parametri ispezione
    menu_btn[num_menu_btn]->MoveWindow( &rett );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[1] );
    num_menu_btn++;

    // INSPECTION BUTTON - LIQUID  (num_menu_btn=2)
    //	rett.top    = rett.bottom +	 SPACE_Y;
    //	rett.bottom = rett.top    + BTN_DIMY;
    rett.left   = rett.right  + 10;
    rett.right  = rett.left   + (BTN_DIMX-10)/2;
    menu_btn[num_menu_btn] = new CMenu_button( string_906[lng], container_main ); 
    menu_btn[num_menu_btn]->child->new_size( 320, 100 /*740*/ ); // regolo dimensione sottomenu parametri ispezione
    menu_btn[num_menu_btn]->MoveWindow( &rett );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[1] );
    num_menu_btn++;
  }

  if ( IS_PC2 )
  {
   	// INSPECTION BUTTON - FREEZE (num_menu_btn=1)
	  rett.top    = rett.bottom +	 SPACE_Y;
	  rett.bottom = rett.top    + BTN_DIMY;
    rett.right  = rett.left   + BTN_DIMX;
    menu_btn[num_menu_btn] = new CMenu_button( string_902[lng], container_main ); 
    menu_btn[num_menu_btn]->child->new_size( 320, 100 /*740*/ ); // regolo dimensione sottomenu parametri ispezione
    menu_btn[num_menu_btn]->MoveWindow( &rett );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[1] );
    num_menu_btn++;
  }

  //CRect area_act;
  //container_main->GetWindowRect( &area_act ); // first time get and keep original


	// * * * *     SECONDA COLONNA      * * * *
	// PULSANTE RICETTE  (num_menu_btn=3)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLB_SX;
	rett.right  = rett.left   + BTN_DIMX;
	recipe_btn = menu_btn[num_menu_btn] = new CMenu_button( string_120[lng], container_main, &Recipe_management );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[2] );
  num_menu_btn++;

	// PULSANTE AVVIO/ARRESTO INSPECTION  (num_menu_btn=4)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	inspection_btn = menu_btn[num_menu_btn] = new CMenu_button( string_150[lng], container_main, &Inspection_startstop  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[3] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;

//  container_main->GetWindowRect( &area_act ); // first time get and keep original



	// * * * *     TERZA COLONNA      * * * *

	// PULSANTE UTILITA'/FUNZIONI  (num_menu_btn=4/5)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLC_SX;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_130[lng], container_main );
//  container_main->GetWindowRect( &area_act ); // first time get and keep original
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*450*/ );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[4] );

  int utility_index = num_menu_btn;

  num_menu_btn++;


	// PULSANTE DI USCITA  (num_menu_btn=6)
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
	exit_btn = menu_btn[num_menu_btn] = new CMenu_button( string_140[lng], container_main, &On_exit_btn );
//  container_main->GetWindowRect( &area_act ); // first time get and keep original
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[5] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;
  
//  container_main->GetWindowRect( &area_act ); // first time get and keep original

  // * * * *     TO LEFT DISPLAY SWITCH  (num_menu_btn=7)    * * * *
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLD_SX;
	rett.right  = rett.left   + BTN_DIMX;
  container_main->posy = 304;  // avoid unnecessary increase od contaainer_main height
  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], container_main, &Change_view, -1 );
//  container_main->GetWindowRect( &area_act ); // first time get and keep original

  menu_btn[num_menu_btn]->MoveWindow( &rett );



  //container_main->GetWindowRect( &area_act ); // first time get and keep original
  
  chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  //container_main->GetWindowRect( &area_act ); // first time get and keep original


	// * * * *     LEFT BOTTOM BATCHES   (num_menu_btn=8)   * * * *
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_1300[lng], container_main );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina

  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[5] );

  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;


  #undef BRD_SUP
  #undef COLA_SX
  #undef COLB_SX
  #undef COLC_SX
  #undef SPACE_X
  #undef SPACE_Y
  #undef BTN_DIMX
  #undef BTN_DIMY

	CParameter::dim_ctrl.cy      = 25; // Regolo la dimensione verticale
	CContainer_wnd::mode         = CContainer_wnd::top_left;
	CContainer_wnd::use_ext_rect = false;
	CMenu_button::hook_pos       = CMenu_button::top_right; // child di livello >1 allineati a destra


//  CRect area_act;
//  container_main->GetWindowRect( &area_act ); // first time get and keep original




  // ***************************************************************************
  //
  //                        AUTOMATION PARAMETERS
  //
  // ***************************************************************************

  parcat_1 = L"PLC";
  parcat_2 = NULL;

  if ( IS_PC1 ) // ( !wcsncmp( PC_name, L"PC1", 3 ) ) 
  {

    // Flag into PLC - when TRUE freeze dried mode is enabled / when FALSE liquid mode is enabled
  	inspmode_btn = menu_btn[num_menu_btn+1] = new CMenu_button( string_3310[lng], menu_btn[0]->child, &Change_mode );
    file_manager.Add_data( &freezemode_on, sizeof(BYTE) );
    changemode_btn = menu_btn[num_menu_btn+1];
//    num_menu_btn++;

    // *******  SUB-MENU FOR CAROUSEL - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1510[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position


    parameter[num_params++] = new CParameter( ".PRODSPEED",               CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1532[lng], string_pcm[lng],   350.0,    10.0,  420.0, &file_manager  ); // Production speed (pcs/min)
    parameter[num_params++] = new CParameter( ".JOGSPEED",                CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1536[lng], string_pcm[lng],   150.0,    10.0,  420.0, &file_manager  ); // Jog low speed (pcs/min)
    parameter[num_params++] = new CParameter( ".ACCELERATION",            CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1210[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // acceleration
    parameter[num_params++] = new CParameter( ".DECELERATION",            CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1212[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // deceleration
    parameter[num_params++] = new CParameter( ".JERK",                    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1208[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // jerk
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.TARGET_HEIGHT_MM",  CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1504[lng], string_mm[lng], 455.3, 455.0, 655.0, &file_manager  ); // Carousel target height
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.ZEROPOS",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1540[lng], string_pcm[lng],  -0.850,    -4.0,    4.0, &file_manager  ); // Carousel zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "INPSCREW_AXIS.ZEROPOS",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1542[lng], string_pcm[lng],  -0.743,    -4.0,    4.0, &file_manager  ); // Input screw zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "TRACKER_AXIS.ZEROPOS",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1544[lng], string_pcm[lng],   3.500,    -4.0,    4.0, &file_manager  ); // Tracker zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";

    /*
    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.SECFDBK_ZEROPOS", CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1546[lng], string_unit[lng],   0.000,    -4.0,    4.0, &file_manager  ); // Cam zero position second feedback (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    */

    if ( use_advanced_parameters )
    {
      parameter[num_params  ] = new CParameter( ".TRACK_PERC",            CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1562[lng], string_percent[lng], 62.5,      10,     90, NULL           ); // Tracking percentage 
      parameter[num_params++]->format_spc = L"%.1lf";
    }

    parameter[num_params  ] = new CParameter( "INPUT_BELT.SPEED",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1550[lng], string_hz[lng],     25.0,    0.0,   80.0, &file_manager  ); // Inverter speed
    parameter[num_params++]->format_spc = L"%.1lf";


    #if SERIAL_N==201800011 ||SERIAL_N 201900008 //Pour marked 20200820  // ONLY for C40L machine with HGA and 3rd deviator - BIOCAD CJSC adjustable ratio
      parameter[num_params++] = new CParameter( ".INPSCREWRT_NUM",          CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1570[lng], string_unit[lng],  1.0,    1.0,  3.0, &file_manager  ); // Input screw gear ratio numerator (integer)
      parameter[num_params++] = new CParameter( ".INPSCREWRT_DEN",          CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1572[lng], string_unit[lng],  1.0,    1.0,  3.0, &file_manager  ); // Input screw gear ratio denominator (integer)
    #endif

    #ifdef OUTPUT_BELT    // if defined output belt management and parameters enabled
      ADS_write_value( ".F_OUTPUTBELT", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
      parameter[num_params  ] = new CParameter( "OUTPUT_BELT.SPEED",        CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1552[lng], string_hz[lng],     25.0,    0.0,   80.0, &file_manager  ); // Output belt speed (Hz)
      parameter[num_params++]->format_spc = L"%.1lf";
    #endif

    num_menu_btn++; // to account for first changemode btn
    num_menu_btn++;


    // *******  SUB-MENU FOR GRIPPERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1610[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1610[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".OPEN_OFFSET",       CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1620[lng], string_step[lng],   55.4,   -1.0,  90.1, &file_manager  ); // Grippers opening phase
    parameter[num_params++] = new CParameter( ".ANT_OPEN_MAX",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1622[lng], string_step[lng],    0.5,    0.0,   2.0, &file_manager  ); // Grippers opening advance 
    parameter[num_params++] = new CParameter( ".OPEN_PRESSURE",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1624[lng], string_unit[lng],    3.5,    0.0,   8.0, &file_manager  ); // Grippers opening pressure
    parameter[num_params++] = new CParameter( ".CLOSE_OFFSET",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1630[lng], string_step[lng],   46.7,   -1.0,  90.1, &file_manager  ); // Grippers closing phase
    parameter[num_params++] = new CParameter( ".ANT_CLOSE_MAX",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1632[lng], string_step[lng],    0.5,    0.0,   2.0, &file_manager  ); // Grippers closing advance 
    parameter[num_params++] = new CParameter( ".CLOSE_PRESSURE",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1634[lng], string_unit[lng],    1.5,    0.0,   8.0, &file_manager  ); // Grippers closing pressure 
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GRIPPERS",  CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1612[lng],              L"",      0,      0,       1, &file_manager ); // check opening/closing
    parameter[num_params++] = new CParameter( ".GROPEN_DELAY",      CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1614[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for opening error
    parameter[num_params++] = new CParameter( ".GRCLOSE_DELAY",     CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1616[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for closing error
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CLOSED_LOOP",     CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1636[lng],              L"",      0,      0,       1                ); // closed loop

    num_menu_btn++;

    // *******  SUB-MENU FOR DEVIATORS/OUTPUT - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1640[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1640[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); //380 );
    int main_menu_btn = num_menu_btn;

    parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",                  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_330[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    parameter[num_params++] = new CParameter( ".F_ENABLE_LIGHTCHK",              CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_332[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MAX_WIDTH",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1639[lng], string_step[lng],    0.9,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MIN_WIDTH",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1638[lng], string_step[lng],    0.1,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GOODS",                  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1660[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output goods
    parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS1",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1662[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects1 
    parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS2",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1664[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects2
    #if defined THIRD_DEVIATOR // IF REQUIRED, ENABLE THIRD DEVIATOR INTO PLC
      parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS3",             CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1665[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects3
    #endif

   
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "PRODUCT_FLOW.LOAD_VAL",           CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1654[lng], string_unit[lng],      0,      0,  1023  ); // Loading initial value
    parameter[num_params++] = new CParameter( ".F_REJECT_SIMULATE",              CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1656[lng],              L"",      0,      0,     1  ); // rejects simulation
    num_menu_btn++;

    // DELAYS
    menu_btn[num_menu_btn] = new CMenu_button( string_1750[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1750[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
//    parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_330[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // persistent - not saved into recipes
//    menu_btn[num_menu_btn-1]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY1",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1752[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY2",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1754[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY1",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1756[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY2",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1758[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY1",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1760[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej2 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY2",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1762[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej2 full
    #ifdef THIRD_DEVIATOR // if defined enables stopping when rej3 tray is full
      parameter[num_params++] = new CParameter( "MACHINE.REJ3_DELAY1",           CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1761[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej2 full
      parameter[num_params++] = new CParameter( "MACHINE.REJ3_DELAY2",           CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1763[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej2 full
    #endif
    #ifdef INPUTBELT_SENSOR // Id defined set input sensor delays
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY1",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1764[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY2",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1766[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    #endif
    #ifdef OUTTURNTABLE_SENSOR // if defined enables stopping when output turntable is full
      parameter[num_params++] = new CParameter( "MACHINE.TURNTABLE_DELAY1",      CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1767[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
      parameter[num_params++] = new CParameter( "MACHINE.TURNTABLE_DELAY2",      CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1768[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    #endif
    #if SERIAL_N==201400020 // Also add input empty delay parameters 
      parameter[num_params++] = new CParameter( "MACHINE.ROTARYTAB_DELAY1",      CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1767[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
      parameter[num_params++] = new CParameter( "MACHINE.ROTARYTAB_DELAY2",      CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1768[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    #endif
    #ifdef FALLEN_CONTAINER // If defined, use code to check fallen containers/set delay/enable alarm
      parameter[num_params++] = new CParameter( "ALARMS_CHECK.FALLEN_DELAY",     CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1769[lng], string_msec[lng],   300,   0, 1000000, &file_manager  ); // Delay to trigger fallen container alarm
    #endif      
    num_menu_btn++;

    // DISTANCES
    menu_btn[num_menu_btn] = new CMenu_button( string_1653[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1653[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV1",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1641[lng], string_step[lng],   77.50,  20.0, 126.0, &file_manager  ); // Distance input photosens - first deviator 
    parameter[num_params++] = new CParameter( ".DIST_DEV1_DEV2",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1645[lng], string_step[lng],    4.00,   1.0,  10.0, &file_manager  ); // Distance first deviator - second deviator
    #if defined THIRD_DEVIATOR // IF THIRD DEVIATOR ENABLED
      parameter[num_params++] = new CParameter( ".DIST_DEV1_DEV3",               CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1645b[lng], string_step[lng],    4.00,   1.0,  20.0, &file_manager  ); // Distance first deviator - third deviator
    #endif
    parameter[num_params++] = new CParameter( ".DIST_LOAD_GOOD",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1642[lng], string_step[lng],   82.75,   1.0, 126.0, &file_manager  ); // Distance input - good photosensor
    parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ1",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1643[lng], string_step[lng],   87.77,   1.0, 126.0, &file_manager  ); // Distance input - rej1 photosensor
    parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ2",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1644[lng], string_step[lng],   95.09,   1.0, 126.0, &file_manager  ); // Distance input - rej2 photosensor
    #if defined THIRD_DEVIATOR // IF THIRD DEVIATOR ENABLED
      parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ3",               CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1644b[lng], string_step[lng],  99.00,   1.0, 126.0, &file_manager  ); // Distance input - rej3 photosensor
    #endif
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWI",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1646[lng], string_step[lng],    2.3,    0.0,   4.0, &file_manager  ); // Main starwheel suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWO",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1648[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Main starwheel blowing lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDI",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1650[lng], string_step[lng],    1.3,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDO",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1652[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels blowing lenght (steps)
    num_menu_btn++;

/*    menu_btn[num_menu_btn] = new CMenu_button( string_1653[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1653[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.LOAD_VAL",           CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1654[lng], string_unit[lng],      0,      0,  1023  ); // Loading initial value
    num_menu_btn++; */

    // *******  SUB-MENU FOR FIRST SPINNING PART1/SIDECAKE - num_menu_btn=  ******* 
    menu_btn[num_menu_btn++] = new CMenu_button( string_1732[lng], menu_btn[0]->child );
    UINT nmbt = num_menu_btn-1;

    file_manager.Add_separator( string_1732[lng] );
    menu_btn[nmbt]->child->new_size( 320, 100 );

    menu_btn[nmbt]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "SEND_SPIN_PARAMETERS.RUN",                 CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1710[lng],              L"",      1,      0,     1                 ); // send data
 
    menu_btn[num_menu_btn++] = new CMenu_button( string_1710[lng],  menu_btn[nmbt]->child, &Send_spin_parameters      ); 

    // NTURN1/2/3: Into PLC is WORD number of full revolutions - Written into LAM 40963/67/71 as BYTE - LAM executes 17067 usteps per each turn (1:1.5 gear ratio)
    // VEL1/2/3:   Into PLC is WORD max speed in RPM - Written into LAM 40960/64/68 as WORD - LAM sets speeds 4x RPM - Gripper will rotate about 1.5 times faster bcs of gear ratio

    // REAL AVERAGE COEFFICIENT IS 1.52 (1.51-1.53) BECAUSE OF SOME ERROR IN LAM SPEED
    // FOR COSMETIC / F/D LINEAR CAMERAS AT 400 pcs/min full revolution in 320ms is required => 3.125 RPS = 187.5 RPM
    // SET 123-124 RPM INTO PLC/PC (500-530 value to be written into LAM speed register bcs 4x)

    menu_btn[nmbt]->child->posy += 30; // Set vertical position
    parameter[num_params++] = new CParameter( ".ALIGN_ENABLE",        CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1718[lng],              L"",      1,      0,     1, &file_manager  ); // enable alignment spin cycle
    parameter[num_params++] = new CParameter( ".F_CHECK_LAM",         CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1730[lng],              L"",      1,      0,     1, NULL           ); // enable LAM error detection
    parameter[num_params++] = new CParameter( ".SPIN1_ENABLE",        CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 1
    parameter[num_params++] = new CParameter( ".VEL1",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1720[lng], string_unit[lng],   1000,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC1",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1722[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC1",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1724[lng], string_unit[lng],   3000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN1",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY1",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance

    menu_btn[nmbt]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN1_LOOP.RUN",       CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle1
    parameter[num_params++] = new CParameter( "SPIN1_LOOP.RUN_LINE",  CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup
    

    // *******  SUB-MENU FOR SECOND SPINNING PART2/HEEL - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1734[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1734[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN2_ENABLE",        CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 2
    parameter[num_params++] = new CParameter( ".VEL2",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    800,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC2",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC2",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN2",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     12,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY2",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN2_LOOP.RUN",       CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle2
    parameter[num_params++] = new CParameter( "SPIN2_LOOP.RUN_LINE",  CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup

    num_menu_btn++;


    // *******  SUB-MENU FOR THIRD SPINNING - num_menu_btn=  ******* 
    /*
    #ifdef HEEL_INSPECTION
      menu_btn[num_menu_btn] = new CMenu_button( string_1702[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1702[lng] );
    #else  // Normal - Top-cake
      menu_btn[num_menu_btn] = new CMenu_button( string_1705[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1705[lng] );
    #endif
    */
    menu_btn[num_menu_btn] = new CMenu_button( string_1703[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1703[lng] ); // cosmetic

    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); 

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN3_ENABLE",        CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 2
    parameter[num_params++] = new CParameter( ".VEL3",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    180,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC3",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC3",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN3",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],      4,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY3",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN",       CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for spin3
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN_LINE",  CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup

    num_menu_btn++;


    // *******  SUB-MENU FOR EJECTOR MASKS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1668[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1668[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );


  /*
    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM  // Station 3 is for particle

      #if STN2==COSMETIC_BACK  // Station 2 is for cosmetic
        parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1678[lng],  L"",   0,   0,   1, &file_manager ); // 
      #else // Normal cosmetic
        ADS_write_value( ".F_PARTICLE_3", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high to fix counting for particles/particle3
        parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1673[lng],  L"",   0,   0,   1, &file_manager ); // 
      #endif

    #else // Normal cosmetic
      parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1678[lng],  L"",   0,   0,   1, &file_manager ); // 
    #endif
    */

	    RECT area;
        menu_btn[num_menu_btn]->child->GetWindowRect(&area);
        area.top    -= 200;
        area.bottom -= 200;
        menu_btn[num_menu_btn]->child->MoveWindow(&area);



//    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    ptr_enable1_part1 = parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE1",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1770[lng],  L"",   0,   0,   1, &file_manager ); // Sidecake
    #ifdef HEEL_INSPECTION
      ptr_enable1_part2 = parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1796[lng],  L"",   0,   0,   1, &file_manager ); // Heel
    #else  // Normal - Top-cake
      ptr_enable1_part2 = parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1772[lng],  L"",   0,   0,   1, &file_manager ); // Topcake
    #endif

    ptr_enable1_cosm = parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1678[lng],  L"",   0,   0,   1, &file_manager ); // Cosmetic
    parameter[num_params++] = new CParameter( ".F_ENABLE_TIPCAP",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1680[lng],  L"",   0,   0,   1, &file_manager ); // Cap 123
    parameter[num_params++] = new CParameter( ".F_ENABLE_FOCOLOR",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1774[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    parameter[num_params++] = new CParameter( ".F_ENABLE_BOTTOMA",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1776[lng],  L"",   0,   0,   1, &file_manager ); // Bottom A for both liquid and FD
    parameter[num_params++] = new CParameter( ".F_ENABLE_BOTTOMB",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1778[lng],  L"",   0,   0,   1, &file_manager ); // Bottom B for both liquid and FD
    parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1674a[lng],  L"",   0,   0,   1, &file_manager ); // Density control for liquid
    parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1675[lng],  L"",   0,   0,   1, &file_manager ); // Filling level control for liquid

	//Pour removed to add bottom inspection for liquid vial to separate two models for Tebao on 20201029
    //ptr_enable1_cont1 = parameter[num_params++] = new CParameter( ".F_ENABLE1_CONTROL1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1776[lng],  L"",   0,   0,   1, &file_manager ); // BottomA/Filling1
    //ptr_enable1_cont2 = parameter[num_params++] = new CParameter( ".F_ENABLE1_CONTROL2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1778[lng],  L"",   0,   0,   1, &file_manager ); // BottomB/Filling2

    menu_btn[num_menu_btn]->child->posy += 6; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_ENABLE_SPINCHK",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1666[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_SPINCHK",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1667[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 
    menu_btn[num_menu_btn]->child->posy += 6; // Set vertical position

    ptr_enable2_part1 = parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE1",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1780[lng],  L"",   0,   0,   1, &file_manager ); // Sidecake
    #ifdef HEEL_INSPECTION
      ptr_enable2_part2 = parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1798[lng],  L"",   0,   0,   1, &file_manager ); // Heel
    #else  // Normal - Top-cake
      ptr_enable2_part2 = parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1782[lng],  L"",   0,   0,   1, &file_manager ); // Topcake
    #endif


    ptr_enable2_cosm = parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1686[lng],  L"",   0,   0,   1, &file_manager ); // Sidewall
    parameter[num_params++] = new CParameter( ".F_DEV2_TIPCAP",       CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1688[lng],  L"",   0,   0,   1, &file_manager ); // Cap 123
    parameter[num_params++] = new CParameter( ".F_DEV2_FOCOLOR",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1784[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    parameter[num_params++] = new CParameter( ".F_DEV2_FILLING1",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1684a[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_FILLING2",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1685[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_BOTTOMA",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1786[lng],  L"",   0,   0,   1, &file_manager ); // Bottom A
    parameter[num_params++] = new CParameter( ".F_DEV2_BOTTOMB",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1788[lng],  L"",   0,   0,   1, &file_manager ); // Bottom B

	//Pour removed to add bottom inspection for liquid vial to separate two models for Tebao on 20201029
    //ptr_enable2_cont1 = parameter[num_params++] = new CParameter( ".F_ENABLE2_CONTROL1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1786[lng],  L"",   0,   0,   1, &file_manager ); // BottomA/Filling1
    //ptr_enable2_cont2 = parameter[num_params++] = new CParameter( ".F_ENABLE2_CONTROL2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1788[lng],  L"",   0,   0,   1, &file_manager ); // BottomB/Filling2
    num_menu_btn++;
//    parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1674[lng],  L"",   0,   0,   1, &file_manager ); // 
//    parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1675[lng],  L"",   0,   0,   1, &file_manager ); // 


    // *******  SUB-MENU FOR TRIGGERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1690[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1690[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params  ] = new CParameter( ".TIPCAP_TRIGGER_PHASE",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1691[lng], string_step[lng],    0.1, 0.0, 0.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".FOCOLOR_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1692[lng], string_step[lng],    0.2, 0.0, 0.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".BOTTOMA_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1693[lng], string_step[lng],    0.3, 0.0, 0.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".BOTTOMB_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1694[lng], string_step[lng],    0.4, 0.0, 0.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".PART1_TRIGGER_PHASE",      CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1697a[lng], string_step[lng],    0.5, 0.0, 2.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".PART2_TRIGGER_PHASE",      CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1697b[lng], string_step[lng],   0.6, 0.0, 2.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";

    //#if SERIAL_N==201400022 // Yaopharma top-cake changed to HEEL cameras
/*    #ifdef HEEL_INSPECTION
      parameter[num_params  ] = new CParameter( ".COSM_TRIGGER_PHASE",       CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1696d[lng], string_step[lng],   0.7, 0.0, 2.95, &file_manager  );
    #else  // Normal - Top-cake
      parameter[num_params  ] = new CParameter( ".COSM_TRIGGER_PHASE",       CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1696b[lng], string_step[lng],   0.7, 0.0, 2.95, &file_manager  );
    #endif */
    parameter[num_params  ] = new CParameter( ".COSM_TRIGGER_PHASE",       CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1699[lng], string_step[lng],   0.7, 0.0, 2.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    num_menu_btn++;




// OLD VERSION, REQUESTED TO CHANGE TO ABOVE ONE ON 20170813

    // Final and latest version confirmed by Shi on 20170816 
    #ifdef HGA_LEAKTEST            // HGA components installed
      ADS_write_value( ".F_HGA_ENABLE", TRUE, CTYPE_BOOL8 ); // Force enable HGA
      menu_btn[num_menu_btn] = new CMenu_button( string_1950[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1950[lng] );
      menu_btn[num_menu_btn]->child->new_size( 320, 100 );
      parameter[num_params  ] = new CParameter( ".HGA_TRIGGER_PHASEA",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1952[lng], string_step[lng],   0.90,    0.0,  0.99, &file_manager  ); // Input phase for HGA trigger A 
      parameter[num_params++]->format_spc = L"%.2lf";
      menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
      parameter[num_params++] = new CParameter( ".DIST_LOAD_HGA",         CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1956[lng], string_step[lng],     72,    0.0,   110, &file_manager  ); // Distance load-hga
      parameter[num_params++] = new CParameter( ".HGA_THRESHOLDH",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1958[lng], string_unit[lng],  15000,      0, 32000, &file_manager  ); // Threshold for accept/reject
      parameter[num_params++] = new CParameter( ".HGA_THRESHOLDL",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1960[lng], string_unit[lng],  15000,      0, 32000, &file_manager  ); // Threshold for accept/reject
      menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
      #if defined THIRD_DEVIATOR // IF THIRD DEVIATOR ENABLED
        parameter[num_params++] = new CParameter( ".F_DEV3_HGA",          CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1967[lng],  L"",   0,   0,   1, &file_manager ); // Reject to dev3
      #else
        parameter[num_params++] = new CParameter( ".F_ENABLE_HGA",          CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1964[lng],  L"",   0,   0,   1, &file_manager ); // Reject to dev1
        parameter[num_params++] = new CParameter( ".F_DEV2_HGA",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1966[lng],  L"",   0,   0,   1, &file_manager ); // Reject to dev2
      #endif

      num_menu_btn++;

      #ifdef HGA_DATAREC
        //RECT area;//Pour removed on 20201102 to be recovered
        menu_btn[num_menu_btn-1]->child->GetWindowRect(&area);
        area.top    -= 100;
        area.bottom -= 100;
        menu_btn[num_menu_btn-1]->child->MoveWindow(&area);
      
        menu_btn[num_menu_btn] = new CMenu_button( string_1970[lng], menu_btn[num_menu_btn-1]->child, &HGAdata_record );
        hgadatarec_btn = menu_btn[num_menu_btn];

        parameter[num_params++] = new CParameter( ".F_HGA_SAMPLE",        CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_fhgasample[lng],  L"",   0,   0,   1, NULL ); // Enable HGA serial communication
        //parameter[num_params++] = new CParameter( string_fhgasample[lng],         CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a[lng],  L"",   0,   0,   1, NULL ); // Enable HGA serial communication

        parameter[num_params++] = new CParameter( ".EN_RS232COM",         CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_enrs232com[lng],     L"",   0,   0,   1, NULL ); // EN_RS232COM ON/FALSE
        //parameter[num_params++] = new CParameter( string_enrs232com[lng],         CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, L"EN_RS232COM",     L"",   0,   0,   1, NULL ); // EN_RS232COM ON/FALSE
        parameter[num_params++] = new CParameter( ".HGA_SAMPLING",        CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_hgasampling[lng],    L"",   0,   0,   1, NULL ); // HGA_SAMPLING
        //parameter[num_params++] = new CParameter( string_hgasampling[lng],        CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, L"HGA_SAMPLING",    L"",   0,   0,   1, NULL ); // HGA_SAMPLING
        parameter[num_params++] = new CParameter( ".HGA_DISPLAYWAVE",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_hgadisplaywave[lng], L"",   0,   0,   1, NULL ); // HGA_SAMPLING
        //parameter[num_params++] = new CParameter( string_hgadisplaywave[lng],     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, L"HGA_DISPLAYWAVE", L"",   0,   0,   1, NULL ); // HGA_SAMPLING

        parameter[num_params++] = new CParameter( ".HGA_WRITETYPE",       CTYPE_BYTE |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_hgawritetype[lng],    string_unit[lng],     101,    0.0,     255, &file_manager  ); // HGA_WRITETYPE  t   0 - 65535
        //parameter[num_params++] = new CParameter( string_hgawritetype[lng],       CTYPE_BYTE |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, L"HGA_WRITETYPE",    string_unit[lng],     101,    0.0,     255, &file_manager  ); // HGA_WRITETYPE  t   0 - 65535
        parameter[num_params++] = new CParameter( ".HGA_WRITEADDRESS",    CTYPE_BYTE |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_hgawriteaddress[lng], string_unit[lng],     102,    0.0,     255, &file_manager  ); // HGA_WRITEADDRESS   0 - 65535
        //parameter[num_params++] = new CParameter( string_hgawriteaddress[lng],    CTYPE_BYTE |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, L"HGA_WRITEADDRESS", string_unit[lng],     102,    0.0,     255, &file_manager  ); // HGA_WRITEADDRESS   0 - 65535
        parameter[num_params++] = new CParameter( ".HGA_WRITEDATA",       CTYPE_UNSIGNED |CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child,              string_hgawritedata[lng],    string_unit[lng],     103,    0.0,   65535, &file_manager  ); // HGA_WRITEDATA      0 - 65535
        //parameter[num_params++] = new CParameter( string_hgawritedata[lng],       CTYPE_UNSIGNED |CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, L"HGA_WRITEDATA",    string_unit[lng],     103,    0.0,   65535, &file_manager  ); // HGA_WRITEDATA      0 - 65535
        parameter[num_params++] = new CParameter( ".HGA_WRITECMD",        CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child,                              string_hgawritecmd[lng],    L"",   0,   0,   1, NULL ); // HGA_WRITECMD
        //parameter[num_params++] = new CParameter( string_hgawritecmd[lng],        CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, L"HGA_WRITECMD",    L"",   0,   0,   1, NULL ); // HGA_WRITECMD

        parameter[num_params++] = new CParameter( ".HGA_READTYPE",        CTYPE_BYTE |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child,                              string_hgareadtype[lng],     string_unit[lng],     104,    0.0,     255, &file_manager  ); // HGA_READTYPE  t   0 - 65535
        //parameter[num_params++] = new CParameter( string_hgareadtype[lng],        CTYPE_BYTE |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, L"HGA_READTYPE",     string_unit[lng],     104,    0.0,     255, &file_manager  ); // HGA_READTYPE  t   0 - 65535
        parameter[num_params++] = new CParameter( ".HGA_READADDRESS",     CTYPE_BYTE |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child,                              string_hgareadaddress[lng],  string_unit[lng],     105,    0.0,     255, &file_manager  ); // HGA_READADDRESS   0 - 65535
        //parameter[num_params++] = new CParameter( string_hgareadaddress[lng],     CTYPE_BYTE |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, L"HGA_READADDRESS",  string_unit[lng],     105,    0.0,     255, &file_manager  ); // HGA_READADDRESS   0 - 65535
        parameter[num_params++] = new CParameter( ".HGA_READDATA",        CTYPE_UNSIGNED |CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child,              string_hgareaddata[lng],     string_unit[lng],     106,    0.0,   65535, &file_manager  ); // HGA_READDATA      0 - 65535
        //parameter[num_params++] = new CParameter( string_hgareaddata[lng],        CTYPE_UNSIGNED |CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, L"HGA_READDATA",     string_unit[lng],     106,    0.0,   65535, &file_manager  ); // HGA_READDATA      0 - 65535
        parameter[num_params++] = new CParameter( ".HGA_READCMD",         CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child,                              string_hgareadcmd[lng],    L"",   0,   0,   1, NULL ); // HGA_READCMD
        //parameter[num_params++] = new CParameter( string_hgareadcmd[lng],         CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, L"HGA_READCMD",    L"",   0,   0,   1, NULL ); // HGA_READCMD

/*      vecchia versione rimossa su indicazione di shi 20170719  
        parameter[num_params++] = new CParameter( ".F_HGA_SAMPLE",        CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a[lng],  L"",   0,   0,   1, NULL ); // Enable HGA serial communication
        parameter[num_params++] = new CParameter( ".SCAN_MIN_SET",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976b[lng], string_unit[lng],     100,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".SCAN_MAX_SET",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976c[lng], string_unit[lng],     101,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".WAVETYPE_SET",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976d[lng], string_unit[lng],     102,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".NORMA_MIN_SET",       CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976e[lng], string_unit[lng],     103,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".NORMA_MAX_SET",       CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976f[lng], string_unit[lng],     104,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".NORMA_AIR_SET",       CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976g[lng], string_unit[lng],     105,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535 */

        num_menu_btn++;
      #endif

    #endif
    




    // **************************************************************************************
    // *******                                                                        ******* 
    // *******       SUB-MENU FOR CALIBRATION/ADVANCED PARAMETERS - num_menu_btn=     ******* 
    // *******                                                                        ******* 
    // **************************************************************************************

    menu_btn[num_menu_btn] = new CMenu_button( string_1800[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1800[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    calibration_menu = menu_btn[num_menu_btn];
    main_menu_btn = num_menu_btn;
    num_menu_btn++;


    // ABC phases
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1809[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1809[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".INPUT_PHASE_A",                 CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1810[lng], string_step[lng],   1.50,    0.0,   3.0, &file_manager  ); // Input phase for A valves
    parameter[num_params++] = new CParameter( ".INPUT_PHASE_B",                 CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1812[lng], string_step[lng],   2.50,    0.0,   3.0, &file_manager  ); // Input phase for B valves
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCA",              CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1820[lng], string_step[lng],   2.50,    0.0,   4.0, &file_manager  ); // Input cam phase for A cameras
    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCB",              CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1822[lng], string_step[lng],   3.50,    0.0,   4.0, &file_manager  ); // Input cam phase for B cameras
    //parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCC",              CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1824[lng], string_step[lng],   0.50,    0.0,   4.0, &file_manager  ); // Input cam phase for C cameras
    num_menu_btn++;

    // Carousel height encoder parameters
    menu_btn[num_menu_btn] = new CMenu_button( string_1828[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1828[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MAX_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1830[lng], string_mm[lng],    562.0,  200.0,    700.0, &file_manager  ); // Maximum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MIN_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1832[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Minimum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_mm[lng],    557.0,  200.0,    700.0, &file_manager  ); // Top point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_ec[lng],  9480033,      0, 16777215, &file_manager  ); // Top point height (ec)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Low point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_ec[lng],  9569182,      0, 16777215, &file_manager  ); // Low point height (ec)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    num_menu_btn++;

    // OFFSETS
    menu_btn[num_menu_btn] = new CMenu_button( string_1859[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1848[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".SPIN1_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1850[lng], string_unit[lng],    8,    0,   30, &file_manager  ); // Spin1 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN2_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1852[lng], string_unit[lng],    4,    0,   30, &file_manager  ); // Spin2 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN3_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1854[lng], string_unit[lng],    1,    0,   30, &file_manager  ); // Spin3 offset (motors)
    parameter[num_params++] = new CParameter( ".ALIGN_OFFSET",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1856[lng], string_step[lng], 50.0,  0.0, 90.0, &file_manager  ); // Align offset (steps)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".BOTTOMA_OFS",                   CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1804 [lng], string_step[lng], 50.0,  0.0, 90.0, &file_manager  ); // datarecord bottom A offset (heads)
    parameter[num_params++] = new CParameter( ".BOTTOMB_OFS",                   CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1805 [lng], string_step[lng], 48.0,  0.0, 90.0, &file_manager  ); // datarecord bottom B offset (heads)
    parameter[num_params++] = new CParameter( ".PART1_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1801a[lng], string_step[lng], 40.0,  0.0, 90.0, &file_manager  ); // datarecord particle1/sidewall offset (heads)
    parameter[num_params++] = new CParameter( ".PART2_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1801b[lng], string_step[lng], 24.0,  0.0, 90.0, &file_manager  ); // datarecord particle2/sidecake offset (heads)
    parameter[num_params++] = new CParameter( ".COSM_OFS",                      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1801c[lng], string_step[lng], 12.0,  0.0, 90.0, &file_manager  ); // datarecord cosmetic /sidewall offset (heads)


    num_menu_btn++;

    // DISTANCES
    menu_btn[num_menu_btn] = new CMenu_button( string_1858[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1848[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".DIST_LOAD_TCA",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1860[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and tip/cap cameras
    parameter[num_params++] = new CParameter( ".DIST_LOAD_FO",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1861[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and FO color camera
    parameter[num_params++] = new CParameter( ".DIST_LOAD_BA",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1862[lng], string_unit[lng],   18,    1,   35, &file_manager  ); // Distance between input and bottom a camera
    parameter[num_params++] = new CParameter( ".DIST_LOAD_BB",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1863[lng], string_unit[lng],   18,    1,   35, &file_manager  ); // Distance between input and bottom b camera
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1A",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1897a[lng], string_unit[lng],    7,    1,   30, &file_manager  ); // Distance between input and first part A
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1B",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1897b[lng], string_unit[lng],    7,    1,   30, &file_manager  ); // Distance between input and first part B
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1C",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1897c[lng], string_unit[lng],    8,    1,   30, &file_manager  ); // Distance between input and first part C
//    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1D",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1896[lng], string_unit[lng],    8,    1,   30, &file_manager  ); // Distance between input and first part D
    num_menu_btn++;


    // *******  SUB-MENU FOR BATCH - num_menu_btn=7  ******* 
    menu_btn[num_menu_btn++] = new CMenu_button( string_1310[lng],  menu_btn[8]->child, &Reset_statistics      ); 

    if ( batch_mngr )
    {
      // batch start/stop
      menu_btn[num_menu_btn++] = new CMenu_button( string_1304[lng],  menu_btn[8]->child, &Batch_startstop     ); 
      batch_btn = menu_btn[num_menu_btn-1];
      if ( batch_mngr->current.status ) batch_btn->SetWindowTextW( string_1306[lng] );

      // batch print/report
      menu_btn[num_menu_btn++] = new CMenu_button( string_1308[lng],  menu_btn[8]->child, &Batch_report        ); 
    }

  }

  parcat_1 = L"INSPECTION";
  parcat_2 = NULL;

	parameter[num_params++] = new CParameter( &show_rejects,  CTYPE_BOOL8, 0, menu_btn[1]->child, string_2124[lng],   0,                1,  0,   0, NULL            );
	parameter[num_params++] = new CParameter( &pseudo_colors, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2122[lng],   0,                1,  0,   0, NULL, &Set_LUT  );

  #ifdef NEWCAP_V30
    if ( IS_PC1 )
    {
      ADS_write_value( ".F_CAP_V30", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
//  	parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
      parameter[num_params++] = new CParameter( "TRIGGER_CAP_V30.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
    }
  #endif


  #ifdef NEWCAP_DOUBLE
    if ( IS_PC1 )
    {
      ADS_write_value( ".F_DOUBLE_CAP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  	  parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
      parameter[num_params++] = new CParameter( "TRIGGER_DOUBLE_CAP.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
    }
  #endif

  // -----------------------------   S O T T O M E N U     O F     E A C H     C A M E R A    ---------------------------------------------
	for ( UINT i=0 ; i<num_tlc ; i++ ) // Sotto gruppo parametri telecamere - Livello 1 - menu_btn[20,21,22]
  {
    wchar_t msg[50+1];
    swprintf( msg, 50, string_800[lng], i, camera[i].name );
	  //menu_btn[num_menu_btn] = new CMenu_button( msg, menu_btn[1]->child );
    if ( IS_PC2 || i<6 ) menu_btn[num_menu_btn] = new CMenu_button( msg, menu_btn[1]->child );
    else                 menu_btn[num_menu_btn] = new CMenu_button( msg, menu_btn[2]->child );
	  menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    file_manager.Add_separator( msg );

    parcat_1 = msg;
    parcat_2 = NULL;

    #ifdef NEWCAP_DOUBLE
      if ( IS_PC1 && i<3 ) 
      {
//        parameter[num_params++] = new CParameter( &camera[i].shutter,  CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, NULL, i );
//        parameter[num_params++] = new CParameter( &camera[i].shutter2, CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2506[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, NULL, i );
        parameter[num_params++] = new CParameter( &camera[i].shutter,  CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );

        // keep creating to avoid problems with recipes, but HIDE shutter2 parameter windows
        parameter[num_params++] = new CParameter( &camera[i].shutter2, CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2506[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
        parameter[num_params-1]->pt_desc->ShowWindow( SW_HIDE );
        parameter[num_params-1]->pt_val->ShowWindow ( SW_HIDE );
        parameter[num_params-1]->pt_udm->ShowWindow ( SW_HIDE );
      }
      else
      {
//        parameter[num_params++] = new CParameter( &camera[i].shutter,  CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, NULL, i );
        parameter[num_params++] = new CParameter( &camera[i].shutter,    CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng], 1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
        parameter[num_params++] = new CParameter( &camera[i].frame_rate, CTYPE_REAL,  0, menu_btn[num_menu_btn]->child, string_2066[lng], string_fps [lng], 50.0,               0.0,            6000.0, &file_manager, &Set_camera, i );
      }
    #else
      parameter[num_params++] = new CParameter( &camera[i].shutter,    CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
      parameter[num_params++] = new CParameter( &camera[i].frame_rate, CTYPE_REAL,  0, menu_btn[num_menu_btn]->child, string_2066[lng], string_fps [lng],   50.0,               0.0,            6000.0, &file_manager, &Set_camera, i );
    #endif

    num_menu_btn++;

    int menu_btn_par = num_menu_btn-1;
    if ( IS_PC1 ) 
    {
      if ( i<3 ) // cap/seal dedicated parameters
      {
        parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
        if ( tip_insp[i] ) tip_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      if ( i>=3 && i<=4 )  // bottom dedicated parameters
      {
        parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
        if ( bottom_insp[i] ) bottom_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      if ( i==5 )  // FO color dedicated parameters (bottom-type if NEWCAP_ORALCAP)
      {
        parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
        if ( focolor_insp[i] ) focolor_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( bottom_insp [i] ) bottom_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( oralfo_insp [i] ) oralfo_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      if ( i>=6 && i<=8 )  // Particle1 dedicated parameters
      {
        if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( fillingl_insp[i] ) fillingl_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      if ( i>=9 && i<=11 )  // Sidecake dedicated parameters
      {
        if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2342 /*string_2340*/ );
      }


    }

    if ( IS_PC2 ) 
    {
      if ( i<3 )  // Particle2 dedicated parameters
      {
        if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        //if ( fillingl_insp[i] ) fillingl_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
		if ( fillingl_insp[i] ) fillingl_insp[i]->Add_menu_parameters_f( menu_btn[menu_btn_par]->child );
      }

      if ( i>=3 && i<=5 )  // Heel dedicated parameters
      {
		#ifdef HEEL_INSPECTION
		if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2346 );
		#else
        if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2344 );
		#endif
      }

      if ( i>=6 )  // Cosmetic dedicated parameters
      {
        if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_838 );
      }


    }

  }

//  menu_btn[1]->child->posy += 10; // Set vertical position

  // particle start/stop learning - show learning
//	parameter[num_params++] = new CParameter( &learning,    CTYPE_BOOL8, 0, menu_btn[1]->child, string_750[lng], 0,  0,  0, 1, NULL, &Learn_models );

//  menu_btn[1]->child->posy += 10; // Set vertical position
//  menu_btn[num_menu_btn++] = new CMenu_button( string_2054[lng], menu_btn[1]->child, &Show_reflections );
//  menu_btn[num_menu_btn++] = new CMenu_button( string_2042[lng], menu_btn[1]->child, &Filter_reflections );






  // ***************************************************************************
  //
	//               ADD FUNCTIONS/UTILITIES	( container menu_btn[4] )
  //
  // ***************************************************************************

/*  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], menu_btn[4]->child, &Change_view       );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;  */


  #ifdef ALARMLOG_SEPARATE // log alarms separately and add button to show them
    menu_btn[num_menu_btn++] = new CMenu_button( string_104[lng], menu_btn[utility_index]->child, &Show_alarmlog  );
  #endif

  #ifdef NEW_LOGGER // log alarms separately and add button to show them
    menu_btn[num_menu_btn++] = new CMenu_button( string_3900[lng], menu_btn[utility_index]->child, &Show_log  );
  #endif

  parameter[num_params++] = new CParameter( ".O_MACHINE_LIGHT", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[utility_index]->child, string_124[lng], L"", 0, 0, 1 ); // machine lights

  parameter[num_params++] = new CParameter( ".F_RUN_BELTS",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[utility_index]->child, string_128[lng], L"", 1, 0, 1 ); // run belt/s

  #ifdef VACUUM_PUMP // if defined add button connected to output 6th board/4th output
    parameter[num_params++] = new CParameter( ".O_VACUUM_PUMP",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[utility_index]->child, string_340[lng], L"", 1, 0, 1 ); // run vacuum pump
  #endif


  menu_btn[num_menu_btn] = new CMenu_button( string_160[lng], menu_btn[utility_index]->child, &Movie_startstop   );
	movie_btn = menu_btn[num_menu_btn];
  num_menu_btn++;


  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[utility_index]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[utility_index]->child, &Logout  );
  }
  


  menu_btn[num_menu_btn] = new CMenu_button( string_170[lng], menu_btn[utility_index]->child, &Save_images       );
  saveimages_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

//	parameter[num_params++] = new CParameter( &datarec_on, CTYPE_BOOL8, 0, menu_btn[4]->child, string_2130[lng], 0,  0,  0, 1, NULL, NULL );
	menu_btn[num_menu_btn] = new CMenu_button( string_304[lng], menu_btn[utility_index]->child, &Data_record      );
  datarec_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

	menu_btn[num_menu_btn] = new CMenu_button( string_320[lng], menu_btn[utility_index]->child, &Save_inspections  );
  saveinsp_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

	menu_btn[num_menu_btn] = new CMenu_button( string_324[lng], menu_btn[utility_index]->child, &Save_sequences  );
  saveseq_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  #ifdef GRIPPER_STATISTICS
  if ( IS_PC1 )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_8150[lng], menu_btn[utility_index]->child, &Grippers_statistics );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
    num_menu_btn++;
  }
  #endif



  //#ifdef _DEBUG
  if ( test_process )
  {
	  //menu_btn[num_menu_btn++] = new CMenu_button( string_172[lng],  menu_btn[4]->child, &Load_images       );
    menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[utility_index]->child, &Test_process      ); 
    menu_btn[num_menu_btn++] = new CMenu_button( string_912[lng],  menu_btn[utility_index]->child, &Sequence_acquire  ); 
  }
//#endif
  
 //  ASSERT ( menu_btn[19]==NULL );


//5  CRect area_act;
//  container_main->GetWindowRect( &area_act ); // first time get and keep original


}




/* Create menu for all functions/parameters */
void CChildView::Create_menu_TIVS_C60(void) 
{

  CRect rett;
  GetClientRect( &rett );

	rett.top    = OFFS_COORDY;
  rett.bottom = rett.top + 360;
	rett.left   = OFFS_COORDY;
  rett.right  = rett.Width();

  num_container = 0;

	// --------        CONTENITORE BASE - Livello 0       ------------
	//container_main = new CContainer_main( "menu base", rett, this, IDD_CONTAINER );

  if ( container_main==NULL )
  {
	  container_main = new CContainer_main( L"menu base", rett, this, IDD_CONTAINER );
	  container_main->ShowWindow( SW_SHOW );
  }

  #define BRD_SUP       14

  #define COLA_SX      440
  #define COLB_SX      (COLA_SX+SPACE_X+BTN_DIMX)
  #define COLC_SX      (COLB_SX+SPACE_X+BTN_DIMX)
  #define COLD_SX      (COLA_SX-SPACE_X-BTN_DIMX)

  #define SPACE_X       14
  #define SPACE_Y       14
  #define BTN_DIMX     250 // BUTTONS WIDTH
  #define BTN_DIMY      58 // BUTTONS HEIGHT



	// * * * *    PRIMA COLONNA      * * * *
	CMenu_button::hook_pos = CMenu_button::bottom_left; // child di livello 1 allineati sotto e a sinistra

	// AUTOMATION BUTTON (num_menu_btn=0)
  rett.top    =                BRD_SUP;
  rett.bottom = rett.top    + BTN_DIMY;
  rett.left   =                COLA_SX;
  rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_900[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[0] );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;


//  if ( IS_PC1 )
  {
   	// INSPECTION BUTTON - FREEZE (num_menu_btn=1)
	  rett.top    = rett.bottom +	 SPACE_Y;
	  rett.bottom = rett.top    + BTN_DIMY;
    //	rett.right  = rett.left   + BTN_DIMX;
    rett.right  = rett.left   + (BTN_DIMX-10)/2;
    menu_btn[num_menu_btn] = new CMenu_button( string_904[lng], container_main ); 
    menu_btn[num_menu_btn]->child->new_size( 320, 100 /*740*/ ); // regolo dimensione sottomenu parametri ispezione
    menu_btn[num_menu_btn]->MoveWindow( &rett );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[1] );
    num_menu_btn++;

    // INSPECTION BUTTON - LIQUID  (num_menu_btn=2)
    //	rett.top    = rett.bottom +	 SPACE_Y;
    //	rett.bottom = rett.top    + BTN_DIMY;
    rett.left   = rett.right  + 10;
    rett.right  = rett.left   + (BTN_DIMX-10)/2;
    menu_btn[num_menu_btn] = new CMenu_button( string_906[lng], container_main ); 
    menu_btn[num_menu_btn]->child->new_size( 320, 100 /*740*/ ); // regolo dimensione sottomenu parametri ispezione
    menu_btn[num_menu_btn]->MoveWindow( &rett );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[1] );
    num_menu_btn++;
  }

  /*
  if ( IS_PC2 )
  {
   	// INSPECTION BUTTON - FREEZE (num_menu_btn=1)
	  rett.top    = rett.bottom +	 SPACE_Y;
	  rett.bottom = rett.top    + BTN_DIMY;
    rett.right  = rett.left   + BTN_DIMX;
    menu_btn[num_menu_btn] = new CMenu_button( string_902[lng], container_main ); 
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // regolo dimensione sottomenu parametri ispezione
    menu_btn[num_menu_btn]->MoveWindow( &rett );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[1] );
    num_menu_btn++;
  }
  */

  //CRect area_act;
  //container_main->GetWindowRect( &area_act ); // first time get and keep original


	// * * * *     SECONDA COLONNA      * * * *
	// PULSANTE RICETTE  (num_menu_btn=3)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLB_SX;
	rett.right  = rett.left   + BTN_DIMX;
	recipe_btn = menu_btn[num_menu_btn] = new CMenu_button( string_120[lng], container_main, &Recipe_management );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[2] );
  num_menu_btn++;

	// PULSANTE AVVIO/ARRESTO INSPECTION  (num_menu_btn=4)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	inspection_btn = menu_btn[num_menu_btn] = new CMenu_button( string_150[lng], container_main, &Inspection_startstop  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[3] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;

//  container_main->GetWindowRect( &area_act ); // first time get and keep original



	// * * * *     TERZA COLONNA      * * * *

	// PULSANTE UTILITA'/FUNZIONI  (num_menu_btn=4/5)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLC_SX;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_130[lng], container_main );
//  container_main->GetWindowRect( &area_act ); // first time get and keep original
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*450*/ );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[4] );

  int utility_index = num_menu_btn;

  num_menu_btn++;


	// PULSANTE DI USCITA  (num_menu_btn=6)
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
	exit_btn = menu_btn[num_menu_btn] = new CMenu_button( string_140[lng], container_main, &On_exit_btn );
//  container_main->GetWindowRect( &area_act ); // first time get and keep original
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[5] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;
  
//  container_main->GetWindowRect( &area_act ); // first time get and keep original

  // * * * *     TO LEFT DISPLAY SWITCH  (num_menu_btn=7)    * * * *
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLD_SX;
	rett.right  = rett.left   + BTN_DIMX;
  container_main->posy = 304;  // avoid unnecessary increase od contaainer_main height
  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], container_main, &Change_view, -1 );
//  container_main->GetWindowRect( &area_act ); // first time get and keep original

  menu_btn[num_menu_btn]->MoveWindow( &rett );



  //container_main->GetWindowRect( &area_act ); // first time get and keep original
  
  chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  //container_main->GetWindowRect( &area_act ); // first time get and keep original


	// * * * *     LEFT BOTTOM BATCHES   (num_menu_btn=8)   * * * *
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_1300[lng], container_main );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;


  #undef BRD_SUP
  #undef COLA_SX
  #undef COLB_SX
  #undef COLC_SX
  #undef SPACE_X
  #undef SPACE_Y
  #undef BTN_DIMX
  #undef BTN_DIMY

	CParameter::dim_ctrl.cy      = 25; // Regolo la dimensione verticale
	CContainer_wnd::mode         = CContainer_wnd::top_left;
	CContainer_wnd::use_ext_rect = false;
	CMenu_button::hook_pos       = CMenu_button::top_right; // child di livello >1 allineati a destra


//  CRect area_act;
//  container_main->GetWindowRect( &area_act ); // first time get and keep original




  // ***************************************************************************
  //
  //                        AUTOMATION PARAMETERS
  //
  // ***************************************************************************

  parcat_1 = L"PLC";
  parcat_2 = NULL;

  if ( IS_PC1 ) // ( !wcsncmp( PC_name, L"PC1", 3 ) ) 
  {

    // Flag into PLC - when TRUE freeze dried mode is enabled / when FALSE liquid mode is enabled
  	inspmode_btn = menu_btn[num_menu_btn+1] = new CMenu_button( string_3310[lng], menu_btn[0]->child, &Change_mode );
    file_manager.Add_data( &freezemode_on, sizeof(BYTE) );
    changemode_btn = menu_btn[num_menu_btn+1];
//    num_menu_btn++;

    // *******  SUB-MENU FOR CAROUSEL - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1510[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position


    parameter[num_params++] = new CParameter( ".PRODSPEED",               CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1532[lng], string_pcm[lng],   350.0,    10.0,  620.0, &file_manager  ); // Production speed (pcs/min)
    parameter[num_params++] = new CParameter( ".JOGSPEED",                CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1536[lng], string_pcm[lng],   150.0,    10.0,  620.0, &file_manager  ); // Jog low speed (pcs/min)
    parameter[num_params++] = new CParameter( ".ACCELERATION",            CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1210[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // acceleration
    parameter[num_params++] = new CParameter( ".DECELERATION",            CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1212[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // deceleration
    parameter[num_params++] = new CParameter( ".JERK",                    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1208[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // jerk
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.TARGET_HEIGHT_MM",  CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1504[lng], string_mm[lng], 455.0, 445.0, 540.0, &file_manager  ); // Carousel target height
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.ZEROPOS",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1540[lng], string_pcm[lng],  -0.850,    -4.0,    4.0, &file_manager  ); // Carousel zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "INPSCREW_AXIS.ZEROPOS",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1542[lng], string_pcm[lng],  -0.743,    -4.0,    4.0, &file_manager  ); // Input screw zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "TRACKER_AXIS.ZEROPOS",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1544[lng], string_pcm[lng],   3.500,    -4.0,    4.0, &file_manager  ); // Tracker zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";

    /*
    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.SECFDBK_ZEROPOS", CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1546[lng], string_unit[lng],   0.000,    -4.0,    4.0, &file_manager  ); // Cam zero position second feedback (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    */

    if ( use_advanced_parameters )
    {
      parameter[num_params  ] = new CParameter( ".TRACK_PERC",            CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1562[lng], string_percent[lng], 62.5,      10,     90, NULL           ); // Tracking percentage 
      parameter[num_params++]->format_spc = L"%.1lf";
    }

    parameter[num_params  ] = new CParameter( "INPUT_BELT.SPEED",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1550[lng], string_hz[lng],     25.0,    0.0,   80.0, &file_manager  ); // Inverter speed
    parameter[num_params++]->format_spc = L"%.1lf";

    #ifdef OUTPUT_BELT    // if defined output belt management and parameters enabled
      ADS_write_value( ".F_OUTPUTBELT", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
      parameter[num_params  ] = new CParameter( "OUTPUT_BELT.SPEED",        CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1552[lng], string_hz[lng],     25.0,    0.0,   80.0, &file_manager  ); // Output belt speed (Hz)
      parameter[num_params++]->format_spc = L"%.1lf";
    #endif

    num_menu_btn++; // to account for first changemode btn
    num_menu_btn++;


    // *******  SUB-MENU FOR GRIPPERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1610[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1610[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".OPEN_OFFSET",       CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1620[lng], string_step[lng],   55.4,   -1.0,  84.1, &file_manager  ); // Grippers opening phase
    parameter[num_params++] = new CParameter( ".ANT_OPEN_MAX",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1622[lng], string_step[lng],    0.5,    0.0,   2.0, &file_manager  ); // Grippers opening advance 
    parameter[num_params++] = new CParameter( ".OPEN_PRESSURE",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1624[lng], string_unit[lng],    3.5,    0.0,   8.0, &file_manager  ); // Grippers opening pressure
    parameter[num_params++] = new CParameter( ".CLOSE_OFFSET",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1630[lng], string_step[lng],   46.7,   -1.0,  84.1, &file_manager  ); // Grippers closing phase
    parameter[num_params++] = new CParameter( ".ANT_CLOSE_MAX",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1632[lng], string_step[lng],    0.5,    0.0,   2.0, &file_manager  ); // Grippers closing advance 
    parameter[num_params++] = new CParameter( ".CLOSE_PRESSURE",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1634[lng], string_unit[lng],    1.5,    0.0,   8.0, &file_manager  ); // Grippers closing pressure 
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GRIPPERS",  CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1612[lng],              L"",      0,      0,       1, &file_manager ); // check opening/closing
    parameter[num_params++] = new CParameter( ".GROPEN_DELAY",      CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1614[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for opening error
    parameter[num_params++] = new CParameter( ".GRCLOSE_DELAY",     CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1616[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for closing error
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CLOSED_LOOP",     CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1636[lng],              L"",      0,      0,       1                ); // closed loop

    num_menu_btn++;

    // *******  SUB-MENU FOR DEVIATORS/OUTPUT - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1640[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1640[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); //380 );
    int main_menu_btn = num_menu_btn;

    parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",                  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_330[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    parameter[num_params++] = new CParameter( ".F_ENABLE_LIGHTCHK",              CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_332[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MAX_WIDTH",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1639[lng], string_step[lng],    0.9,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MIN_WIDTH",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1638[lng], string_step[lng],    0.1,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GOODS",                  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1660[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output goods
    parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS1",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1662[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects1 
    parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS2",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1664[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects2
   
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "PRODUCT_FLOW.LOAD_VAL",           CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1654[lng], string_unit[lng],      0,      0,  1023  ); // Loading initial value
    parameter[num_params++] = new CParameter( ".F_REJECT_SIMULATE",              CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1656[lng],              L"",      0,      0,     1  ); // rejects simulation
    num_menu_btn++;

    // DELAYS
    menu_btn[num_menu_btn] = new CMenu_button( string_1750[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1750[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
//    parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_330[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // persistent - not saved into recipes
//    menu_btn[num_menu_btn-1]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY1",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1752[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY2",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1754[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY1",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1756[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY2",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1758[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY1",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1760[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej2 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY2",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1762[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej2 full
    #ifdef INPUTBELT_SENSOR // Id defined set input sensor delays
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY1",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1764[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY2",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1766[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    #endif
    #ifdef FALLEN_CONTAINER // If defined, use code to check fallen containers/set delay/enable alarm
      parameter[num_params++] = new CParameter( "ALARMS_CHECK.FALLEN_DELAY",     CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1769[lng], string_msec[lng],   300,   0, 1000000, &file_manager  ); // Delay to trigger fallen container alarm
    #endif      
    num_menu_btn++;

    // DISTANCES
    menu_btn[num_menu_btn] = new CMenu_button( string_1653[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1653[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV1",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1641[lng], string_step[lng],   77.50,  20.0, 120.0, &file_manager  ); // Distance input photosens - first deviator 
    parameter[num_params++] = new CParameter( ".DIST_DEV1_DEV2",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1645[lng], string_step[lng],    4.00,   1.0,  10.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_GOOD",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1642[lng], string_step[lng],   82.75,   1.0, 120.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ1",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1643[lng], string_step[lng],   87.77,   1.0, 120.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ2",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1644[lng], string_step[lng],   95.09,   1.0, 120.0, &file_manager  ); // Distance first deviator - second deviator
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWI",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1646[lng], string_step[lng],    2.3,    0.0,   4.0, &file_manager  ); // Main starwheel suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWO",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1648[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Main starwheel blowing lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDI",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1650[lng], string_step[lng],    1.3,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDO",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1652[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels blowing lenght (steps)
    num_menu_btn++;

/*    menu_btn[num_menu_btn] = new CMenu_button( string_1653[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1653[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.LOAD_VAL",           CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1654[lng], string_unit[lng],      0,      0,  1023  ); // Loading initial value
    num_menu_btn++; */

    // *******  SUB-MENU FOR FIRST SPINNING PART1/SIDECAKE - num_menu_btn=  ******* 
    menu_btn[num_menu_btn++] = new CMenu_button( string_1732[lng], menu_btn[0]->child );
    UINT nmbt = num_menu_btn-1;

    file_manager.Add_separator( string_1732[lng] );
    menu_btn[nmbt]->child->new_size( 320, 100 );

    menu_btn[nmbt]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "SEND_SPIN_PARAMETERS.RUN",                 CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1710[lng],              L"",      1,      0,     1                 ); // send data
 
    menu_btn[num_menu_btn++] = new CMenu_button( string_1710[lng],  menu_btn[nmbt]->child, &Send_spin_parameters      ); 

    // NTURN1/2/3: Into PLC is WORD number of full revolutions - Written into LAM 40963/67/71 as BYTE - LAM executes 17067 usteps per each turn (1:1.5 gear ratio)
    // VEL1/2/3:   Into PLC is WORD max speed in RPM - Written into LAM 40960/64/68 as WORD - LAM sets speeds 4x RPM - Gripper will rotate about 1.5 times faster bcs of gear ratio

    // REAL AVERAGE COEFFICIENT IS 1.52 (1.51-1.53) BECAUSE OF SOME ERROR IN LAM SPEED
    // FOR COSMETIC / F/D LINEAR CAMERAS AT 400 pcs/min full revolution in 320ms is required => 3.125 RPS = 187.5 RPM
    // SET 123-124 RPM INTO PLC/PC (500-530 value to be written into LAM speed register bcs 4x)

    menu_btn[nmbt]->child->posy += 30; // Set vertical position
    parameter[num_params++] = new CParameter( ".ALIGN_ENABLE",        CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1718[lng],              L"",      1,      0,     1, &file_manager  ); // enable alignment spin cycle
    parameter[num_params++] = new CParameter( ".F_CHECK_LAM",         CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1730[lng],              L"",      1,      0,     1, NULL           ); // enable LAM error detection
    parameter[num_params++] = new CParameter( ".SPIN1_ENABLE",        CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 1
    parameter[num_params++] = new CParameter( ".VEL1",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1720[lng], string_unit[lng],   1000,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC1",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1722[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC1",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1724[lng], string_unit[lng],   3000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN1",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY1",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance

    menu_btn[nmbt]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN1_LOOP.RUN",       CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle1
    parameter[num_params++] = new CParameter( "SPIN1_LOOP.RUN_LINE",  CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup
    

    // *******  SUB-MENU FOR SECOND SPINNING PART2/HEEL - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1734[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1734[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN2_ENABLE",        CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 2
    parameter[num_params++] = new CParameter( ".VEL2",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    800,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC2",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC2",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN2",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     12,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY2",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN2_LOOP.RUN",       CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle2
    parameter[num_params++] = new CParameter( "SPIN2_LOOP.RUN_LINE",  CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup

    num_menu_btn++;


    // *******  SUB-MENU FOR THIRD SPINNING - num_menu_btn=  ******* 
    /*
    #ifdef HEEL_INSPECTION
      menu_btn[num_menu_btn] = new CMenu_button( string_1702[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1702[lng] );
    #else  // Normal - Top-cake
      menu_btn[num_menu_btn] = new CMenu_button( string_1705[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1705[lng] );
    #endif
    */
    menu_btn[num_menu_btn] = new CMenu_button( string_1703[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1703[lng] ); // cosmetic

    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); 

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN3_ENABLE",        CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 2
    parameter[num_params++] = new CParameter( ".VEL3",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    180,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC3",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC3",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN3",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],      4,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY3",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN",       CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for spin3
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN_LINE",  CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup

    num_menu_btn++;


    // *******  SUB-MENU FOR EJECTOR MASKS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1668[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1668[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );


  /*
    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM  // Station 3 is for particle

      #if STN2==COSMETIC_BACK  // Station 2 is for cosmetic
        parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1678[lng],  L"",   0,   0,   1, &file_manager ); // 
      #else // Normal cosmetic
        ADS_write_value( ".F_PARTICLE_3", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high to fix counting for particles/particle3
        parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1673[lng],  L"",   0,   0,   1, &file_manager ); // 
      #endif

    #else // Normal cosmetic
      parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1678[lng],  L"",   0,   0,   1, &file_manager ); // 
    #endif
    */



//    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    ptr_enable1_part1 = parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE1",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1770[lng],  L"",   0,   0,   1, &file_manager ); // Sidecake
    #ifdef HEEL_INSPECTION
      ptr_enable1_part2 = parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1796[lng],  L"",   0,   0,   1, &file_manager ); // Heel
    #else  // Normal - Top-cake
      ptr_enable1_part2 = parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1772[lng],  L"",   0,   0,   1, &file_manager ); // Topcake
    #endif

    ptr_enable1_cosm = parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1678[lng],  L"",   0,   0,   1, &file_manager ); // Cosmetic
    parameter[num_params++] = new CParameter( ".F_ENABLE_TIPCAP",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1680[lng],  L"",   0,   0,   1, &file_manager ); // Cap 123
    parameter[num_params++] = new CParameter( ".F_ENABLE_FOCOLOR",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1774[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    //parameter[num_params++] = new CParameter( ".F_ENABLE_BOTTOMA",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1776[lng],  L"",   0,   0,   1, &file_manager ); // Bottom A
    //parameter[num_params++] = new CParameter( ".F_ENABLE_BOTTOMB",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1778[lng],  L"",   0,   0,   1, &file_manager ); // Bottom B
    //parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1674[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1675[lng],  L"",   0,   0,   1, &file_manager ); // 
    ptr_enable1_cont1 = parameter[num_params++] = new CParameter( ".F_ENABLE1_CONTROL1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1776[lng],  L"",   0,   0,   1, &file_manager ); // BottomA/Filling1
    ptr_enable1_cont2 = parameter[num_params++] = new CParameter( ".F_ENABLE1_CONTROL2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1778[lng],  L"",   0,   0,   1, &file_manager ); // BottomB/Filling2

    menu_btn[num_menu_btn]->child->posy += 6; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_ENABLE_SPINCHK",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1666[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_SPINCHK",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1667[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 
    menu_btn[num_menu_btn]->child->posy += 6; // Set vertical position

    ptr_enable2_part1 = parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE1",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1780[lng],  L"",   0,   0,   1, &file_manager ); // Sidecake
    #ifdef HEEL_INSPECTION
      ptr_enable2_part2 = parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1798[lng],  L"",   0,   0,   1, &file_manager ); // Heel
    #else  // Normal - Top-cake
      ptr_enable2_part2 = parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1782[lng],  L"",   0,   0,   1, &file_manager ); // Topcake
    #endif


    ptr_enable2_cosm = parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1686[lng],  L"",   0,   0,   1, &file_manager ); // Sidewall
    parameter[num_params++] = new CParameter( ".F_DEV2_TIPCAP",       CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1688[lng],  L"",   0,   0,   1, &file_manager ); // Cap 123
    parameter[num_params++] = new CParameter( ".F_DEV2_FOCOLOR",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1784[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    //parameter[num_params++] = new CParameter( ".F_DEV2_FILLING1",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1684[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV2_FILLING2",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1685[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV2_BOTTOMA",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1786[lng],  L"",   0,   0,   1, &file_manager ); // Bottom A
    //parameter[num_params++] = new CParameter( ".F_DEV2_BOTTOMB",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1788[lng],  L"",   0,   0,   1, &file_manager ); // Bottom B
    ptr_enable2_cont1 = parameter[num_params++] = new CParameter( ".F_ENABLE2_CONTROL1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1786[lng],  L"",   0,   0,   1, &file_manager ); // BottomA/Filling1
    ptr_enable2_cont2 = parameter[num_params++] = new CParameter( ".F_ENABLE2_CONTROL2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1788[lng],  L"",   0,   0,   1, &file_manager ); // BottomB/Filling2
    num_menu_btn++;
//    parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1674[lng],  L"",   0,   0,   1, &file_manager ); // 
//    parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1675[lng],  L"",   0,   0,   1, &file_manager ); // 


    // *******  SUB-MENU FOR TRIGGERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1690[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1690[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params  ] = new CParameter( ".TIPCAP_TRIGGER_PHASE",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1691[lng], string_step[lng],    0.1, 0.0, 0.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".FOCOLOR_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1692[lng], string_step[lng],    0.2, 0.0, 0.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".BOTTOMA_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1693[lng], string_step[lng],    0.3, 0.0, 0.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".BOTTOMB_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1694[lng], string_step[lng],    0.4, 0.0, 0.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".PART1_TRIGGER_PHASE",      CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1697a[lng], string_step[lng],   0.5, 0.0, 3.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".PART2_TRIGGER_PHASE",      CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1697b[lng], string_step[lng],   0.6, 0.0, 3.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".COSM_TRIGGER_PHASE",       CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1699 [lng], string_step[lng],   0.7, 0.0, 3.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    num_menu_btn++;



    // **************************************************************************************
    // *******                                                                        ******* 
    // *******       SUB-MENU FOR CALIBRATION/ADVANCED PARAMETERS - num_menu_btn=     ******* 
    // *******                                                                        ******* 
    // **************************************************************************************

    menu_btn[num_menu_btn] = new CMenu_button( string_1800[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1800[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    calibration_menu = menu_btn[num_menu_btn];
    main_menu_btn = num_menu_btn;
    num_menu_btn++;


    // ABC phases
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1809[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1809[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".INPUT_PHASE_A",                 CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1810[lng], string_step[lng],   1.50,    0.0,   3.0, &file_manager  ); // Input phase for A valves
    parameter[num_params++] = new CParameter( ".INPUT_PHASE_B",                 CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1812[lng], string_step[lng],   2.50,    0.0,   3.0, &file_manager  ); // Input phase for B valves
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCA",              CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1820[lng], string_step[lng],   2.50,    0.0,   4.0, &file_manager  ); // Input cam phase for A cameras
    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCB",              CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1822[lng], string_step[lng],   3.50,    0.0,   4.0, &file_manager  ); // Input cam phase for B cameras
    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCC",              CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1824[lng], string_step[lng],   0.50,    0.0,   4.0, &file_manager  ); // Input cam phase for C cameras
    num_menu_btn++;

    // Carousel height encoder parameters
    menu_btn[num_menu_btn] = new CMenu_button( string_1828[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1828[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MAX_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1830[lng], string_mm[lng],    562.0,  200.0,    700.0, &file_manager  ); // Maximum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MIN_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1832[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Minimum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_mm[lng],    557.0,  200.0,    700.0, &file_manager  ); // Top point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_ec[lng],  9480033,      0, 16777215, &file_manager  ); // Top point height (ec)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Low point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_ec[lng],  9569182,      0, 16777215, &file_manager  ); // Low point height (ec)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    num_menu_btn++;

    // OFFSETS
    menu_btn[num_menu_btn] = new CMenu_button( string_1859[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1848[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".SPIN1_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1850[lng], string_unit[lng],    8,    0,   21, &file_manager  ); // Spin1 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN2_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1852[lng], string_unit[lng],    4,    0,   21, &file_manager  ); // Spin2 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN3_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1854[lng], string_unit[lng],    1,    0,   21, &file_manager  ); // Spin3 offset (motors)
    parameter[num_params++] = new CParameter( ".ALIGN_OFFSET",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1856[lng], string_step[lng], 50.0,  0.0, 84.0, &file_manager  ); // Align offset (steps)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".BOTTOMA_OFS",                   CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1804 [lng], string_step[lng], 50.0,  0.0, 84.0, &file_manager  ); // datarecord bottom A offset (heads)
    parameter[num_params++] = new CParameter( ".BOTTOMB_OFS",                   CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1805 [lng], string_step[lng], 48.0,  0.0, 84.0, &file_manager  ); // datarecord bottom B offset (heads)
    parameter[num_params++] = new CParameter( ".PART1_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1801a[lng], string_step[lng], 40.0,  0.0, 84.0, &file_manager  ); // datarecord particle1/sidewall offset (heads)
    parameter[num_params++] = new CParameter( ".PART2_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1801b[lng], string_step[lng], 24.0,  0.0, 84.0, &file_manager  ); // datarecord particle2/sidecake offset (heads)
    parameter[num_params++] = new CParameter( ".COSM_OFS",                      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1801c[lng], string_step[lng], 12.0,  0.0, 84.0, &file_manager  ); // datarecord cosmetic /sidewall offset (heads)


    num_menu_btn++;

    // DISTANCES
    menu_btn[num_menu_btn] = new CMenu_button( string_1858[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1848[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".DIST_LOAD_TCA",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1860[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and tip/cap cameras
    parameter[num_params++] = new CParameter( ".DIST_LOAD_FO",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1861[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and FO color camera
    parameter[num_params++] = new CParameter( ".DIST_LOAD_BA",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1862[lng], string_unit[lng],   18,    1,   35, &file_manager  ); // Distance between input and bottom a camera
    parameter[num_params++] = new CParameter( ".DIST_LOAD_BB",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1863[lng], string_unit[lng],   18,    1,   35, &file_manager  ); // Distance between input and bottom b camera
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1A",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1897a[lng], string_unit[lng],    7,    1,   21, &file_manager  ); // Distance between input and first part A
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1B",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1897b[lng], string_unit[lng],    7,    1,   21, &file_manager  ); // Distance between input and first part B
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1C",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1897c[lng], string_unit[lng],    8,    1,   21, &file_manager  ); // Distance between input and first part C
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1D",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1897d[lng], string_unit[lng],    8,    1,   21, &file_manager  ); // Distance between input and first part D
    num_menu_btn++;


    // *******  SUB-MENU FOR BATCH - num_menu_btn=7  ******* 
    menu_btn[num_menu_btn++] = new CMenu_button( string_1310[lng],  menu_btn[8]->child, &Reset_statistics      ); 

    if ( batch_mngr )
    {
      // batch start/stop
      menu_btn[num_menu_btn++] = new CMenu_button( string_1304[lng],  menu_btn[8]->child, &Batch_startstop     ); 
      batch_btn = menu_btn[num_menu_btn-1];
      if ( batch_mngr->current.status ) batch_btn->SetWindowTextW( string_1306[lng] );

      // batch print/report
      menu_btn[num_menu_btn++] = new CMenu_button( string_1308[lng],  menu_btn[8]->child, &Batch_report        ); 
    }

  }

  parcat_1 = L"INSPECTION";
  parcat_2 = NULL;

	parameter[num_params++] = new CParameter( &show_rejects,  CTYPE_BOOL8, 0, menu_btn[1]->child, string_2124[lng],   0,                1,  0,   0, NULL            );
	parameter[num_params++] = new CParameter( &pseudo_colors, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2122[lng],   0,                1,  0,   0, NULL, &Set_LUT  );

  #ifdef NEWCAP_V30
    if ( IS_PC1 )
    {
      ADS_write_value( ".F_CAP_V30", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
//  	parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
      parameter[num_params++] = new CParameter( "TRIGGER_CAP_V30.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
    }
  #endif


  #ifdef NEWCAP_DOUBLE
    if ( IS_PC1 )
    {
      ADS_write_value( ".F_DOUBLE_CAP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  	  parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
      parameter[num_params++] = new CParameter( "TRIGGER_DOUBLE_CAP.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
    }
  #endif

  // -----------------------------   S O T T O M E N U     O F     E A C H     C A M E R A    ---------------------------------------------
	for ( UINT i=0 ; i<num_tlc ; i++ ) // Sotto gruppo parametri telecamere - Livello 1 - menu_btn[20,21,22]
  {
    wchar_t msg[50+1];
    swprintf( msg, 50, string_800[lng], i, camera[i].name );
	  //menu_btn[num_menu_btn] = new CMenu_button( msg, menu_btn[1]->child );
//    if ( IS_PC2 || i<6 ) menu_btn[num_menu_btn] = new CMenu_button( msg, menu_btn[1]->child );
//    else                 menu_btn[num_menu_btn] = new CMenu_button( msg, menu_btn[2]->child );
    if ( ( IS_PC1 && i<6 ) || ( IS_PC2 && i<8 ) ) menu_btn[num_menu_btn] = new CMenu_button( msg, menu_btn[1]->child );
    else                                          menu_btn[num_menu_btn] = new CMenu_button( msg, menu_btn[2]->child );
	  menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    file_manager.Add_separator( msg );

    parcat_1 = msg;
    parcat_2 = NULL;

    #ifdef NEWCAP_DOUBLE
      if ( IS_PC1 && i<3 ) 
      {
//        parameter[num_params++] = new CParameter( &camera[i].shutter,  CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, NULL, i );
//        parameter[num_params++] = new CParameter( &camera[i].shutter2, CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2506[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, NULL, i );
        parameter[num_params++] = new CParameter( &camera[i].shutter,  CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );

        // keep creating to avoid problems with recipes, but HIDE shutter2 parameter windows
        parameter[num_params++] = new CParameter( &camera[i].shutter2, CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2506[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
        parameter[num_params-1]->pt_desc->ShowWindow( SW_HIDE );
        parameter[num_params-1]->pt_val->ShowWindow ( SW_HIDE );
        parameter[num_params-1]->pt_udm->ShowWindow ( SW_HIDE );
      }
      else
      {
//        parameter[num_params++] = new CParameter( &camera[i].shutter,  CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, NULL, i );
        parameter[num_params++] = new CParameter( &camera[i].shutter,    CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng], 1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
        parameter[num_params++] = new CParameter( &camera[i].frame_rate, CTYPE_REAL,  0, menu_btn[num_menu_btn]->child, string_2066[lng], string_fps [lng], 50.0,               0.0,            6000.0, &file_manager, &Set_camera, i );
      }
    #else
      parameter[num_params++] = new CParameter( &camera[i].shutter,    CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
      parameter[num_params++] = new CParameter( &camera[i].frame_rate, CTYPE_REAL,  0, menu_btn[num_menu_btn]->child, string_2066[lng], string_fps [lng],   50.0,               0.0,            6000.0, &file_manager, &Set_camera, i );
    #endif

    num_menu_btn++;

    int menu_btn_par = num_menu_btn-1;
    if ( IS_PC1 ) 
    {
      if ( i<3 ) // cap/seal dedicated parameters
      {
        parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
        if ( tip_insp[i] ) tip_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      if ( i>=3 && i<=4 )  // bottom dedicated parameters
      {
        parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
        if ( bottom_insp[i] ) bottom_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      if ( i==5 )  // FO color dedicated parameters (bottom-type if NEWCAP_ORALCAP)
      {
        parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
        if ( focolor_insp[i] ) focolor_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( bottom_insp [i] ) bottom_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( oralfo_insp [i] ) oralfo_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      if ( i>=6 && i<=9 )  // Cosmetic dedicated parameters
      {
        if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2340 );
      }


    }

    if ( IS_PC2 ) 
    {

      if ( i>=0 && i<=3 )  // Sidecake dedicated parameters
      {
        if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2342 );
      }

      if ( i>=4 && i<=7 )  // Particle1 dedicated parameters
      {
        if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( fillingl_insp[i] ) fillingl_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      if ( i>=8 && i<=11 )  // Heel dedicated parameters
      {
        if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2346 );
      }

      if ( i>=12 && i<=15 )  // Particle2 dedicated parameters
      {
        if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( fillingl_insp[i] ) fillingl_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }


    }

  }


  // ***************************************************************************
  //
	//               ADD FUNCTIONS/UTILITIES	( container menu_btn[4] )
  //
  // ***************************************************************************

/*  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], menu_btn[4]->child, &Change_view       );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;  */


  #ifdef ALARMLOG_SEPARATE // log alarms separately and add button to show them
    menu_btn[num_menu_btn++] = new CMenu_button( string_104[lng], menu_btn[utility_index]->child, &Show_alarmlog  );
  #endif

  #ifdef NEW_LOGGER // log alarms separately and add button to show them
    menu_btn[num_menu_btn++] = new CMenu_button( string_3900[lng], menu_btn[utility_index]->child, &Show_log  );
  #endif

  parameter[num_params++] = new CParameter( ".O_MACHINE_LIGHT", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[utility_index]->child, string_124[lng], L"", 0, 0, 1 ); // machine lights

  parameter[num_params++] = new CParameter( ".F_RUN_BELTS",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[utility_index]->child, string_128[lng], L"", 1, 0, 1 ); // run belt/s

  #ifdef INPBELT_MANRUN // if defined input belt can be manually run
    menu_btn[num_menu_btn] = new CMenu_button( string_116[lng], menu_btn[utility_index]->child, &Inpbelt_manrun  );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], OPERATOR_LEVEL );
    num_menu_btn++;
  #endif

  #ifdef OUTBELT_MANRUN // if defined output belt can be manually run
    menu_btn[num_menu_btn] = new CMenu_button( string_118[lng], menu_btn[utility_index]->child, &Outbelt_manrun  );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], OPERATOR_LEVEL );
    num_menu_btn++;
  #endif



  #ifdef VACUUM_PUMP // if defined add button connected to output 6th board/4th output
    parameter[num_params++] = new CParameter( ".O_VACUUM_PUMP",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[utility_index]->child, string_340[lng], L"", 1, 0, 1 ); // run vacuum pump
  #endif


  menu_btn[num_menu_btn] = new CMenu_button( string_160[lng], menu_btn[utility_index]->child, &Movie_startstop   );
	movie_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[utility_index]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[utility_index]->child, &Logout  );
  }

  menu_btn[num_menu_btn] = new CMenu_button( string_170[lng], menu_btn[utility_index]->child, &Save_images       );
  saveimages_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

//	parameter[num_params++] = new CParameter( &datarec_on, CTYPE_BOOL8, 0, menu_btn[4]->child, string_2130[lng], 0,  0,  0, 1, NULL, NULL );
	menu_btn[num_menu_btn] = new CMenu_button( string_304[lng], menu_btn[utility_index]->child, &Data_record      );
  datarec_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

	menu_btn[num_menu_btn] = new CMenu_button( string_320[lng], menu_btn[utility_index]->child, &Save_inspections  );
  saveinsp_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

	menu_btn[num_menu_btn] = new CMenu_button( string_324[lng], menu_btn[utility_index]->child, &Save_sequences  );
  saveseq_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  #ifdef GRIPPER_STATISTICS
  if ( IS_PC1 )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_8150[lng], menu_btn[utility_index]->child, &Grippers_statistics );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
    num_menu_btn++;
  }
  #endif



  //#ifdef _DEBUG
  if ( test_process )
  {
	  //menu_btn[num_menu_btn++] = new CMenu_button( string_172[lng],  menu_btn[4]->child, &Load_images       );
    menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[utility_index]->child, &Test_process      ); 
    menu_btn[num_menu_btn++] = new CMenu_button( string_912[lng],  menu_btn[utility_index]->child, &Sequence_acquire  ); 
  }
//#endif
  
}



/* Create menu for all functions/parameters */
void CChildView::Create_menu_TIVS_F40(void) //Create_menu_TIVS40_FD(void)
{

  CRect rett;
  GetClientRect( &rett );

	rett.top    = OFFS_COORDY;
  rett.bottom = rett.top + 360;
	rett.left   = OFFS_COORDY;
  rett.right  = rett.Width();

  num_container = 0;

	// --------        CONTENITORE BASE - Livello 0       ------------
	//container_main = new CContainer_main( "menu base", rett, this, IDD_CONTAINER );
	container_main = new CContainer_main( L"menu base", rett, this, IDD_CONTAINER );
	container_main->ShowWindow( SW_SHOW );

  #define BRD_SUP       14

  #define COLA_SX      440
  #define COLB_SX      (COLA_SX+SPACE_X+BTN_DIMX)
  #define COLC_SX      (COLB_SX+SPACE_X+BTN_DIMX)
  #define COLD_SX      (COLA_SX-SPACE_X-BTN_DIMX)

  #define SPACE_X       14
  #define SPACE_Y       14
  #define BTN_DIMX     250 // BUTTONS WIDTH
  #define BTN_DIMY      58 // BUTTONS HEIGHT



	// * * * *    PRIMA COLONNA      * * * *
	CMenu_button::hook_pos = CMenu_button::bottom_left; // child di livello 1 allineati sotto e a sinistra

	// AUTOMATION BUTTON (num_menu_btn=0)
  rett.top    =                BRD_SUP;
  rett.bottom = rett.top    + BTN_DIMY;
  rett.left   =                COLA_SX;
  rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_900[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[0] );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;

 	// INSPECTION BUTTON  (num_menu_btn=1)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_902[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*740*/ ); // regolo dimensione sottomenu parametri ispezione
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[1] );
  num_menu_btn++;

	// * * * *     SECONDA COLONNA      * * * *
	// PULSANTE RICETTE  (num_menu_btn=2)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLB_SX;
	rett.right  = rett.left   + BTN_DIMX;
	recipe_btn = menu_btn[num_menu_btn] = new CMenu_button( string_120[lng], container_main, &Recipe_management );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[2] );
  num_menu_btn++;

	// PULSANTE AVVIO/ARRESTO INSPECTION  (num_menu_btn=3)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	inspection_btn = menu_btn[num_menu_btn] = new CMenu_button( string_150[lng], container_main, &Inspection_startstop  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[3] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;


	// * * * *     TERZA COLONNA      * * * *

	// PULSANTE UTILITA'/FUNZIONI  (num_menu_btn=4)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLC_SX;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_130[lng], container_main );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*450*/ );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[4] );
  num_menu_btn++;

	// PULSANTE DI USCITA  (num_menu_btn=5)
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
	exit_btn = menu_btn[num_menu_btn] = new CMenu_button( string_140[lng], container_main, &On_exit_btn );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[5] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;
  
	// * * * *     TO LEFT DISPLAY SWITCH  (num_menu_btn=6)    * * * *
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLD_SX;
	rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], container_main, &Change_view, -1 );
  menu_btn[num_menu_btn]->MoveWindow( &rett );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;


	// * * * *     LEFT BOTTOM BATCHES   (num_menu_btn=7)   * * * *
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_1300[lng], container_main );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;


  #undef BRD_SUP
  #undef COLA_SX
  #undef COLB_SX
  #undef COLC_SX
  #undef SPACE_X
  #undef SPACE_Y
  #undef BTN_DIMX
  #undef BTN_DIMY

	CParameter::dim_ctrl.cy      = 25; // Regolo la dimensione verticale
	CContainer_wnd::mode         = CContainer_wnd::top_left;
	CContainer_wnd::use_ext_rect = false;
	CMenu_button::hook_pos       = CMenu_button::top_right; // child di livello >1 allineati a destra


  // ***************************************************************************
  //
  //                        AUTOMATION PARAMETERS
  //
  // ***************************************************************************

  parcat_1 = L"PLC";
  parcat_2 = NULL;

  if ( IS_PC1 ) // ( !wcsncmp( PC_name, L"PC1", 3 ) ) 
  {

    // *******  SUB-MENU FOR CAROUSEL - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1510[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    #if SERIAL_N==201400011 || SERIAL_N==201400055 || SERIAL_N==201400054 || SERIAL_N==201500013 || SERIAL_N==201700019 || SERIAL_N==201800024 || SERIAL_N==201800021 || SERIAL_N==201800001// TESTING NEW HIGH SPEED FOR F40
      parameter[num_params++] = new CParameter( ".PRODSPEED",               CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1532[lng], string_pcm[lng],   350.0,    10.0,  650.0, &file_manager  ); // Production speed (pcs/min)
    #else // standard speed
      parameter[num_params++] = new CParameter( ".PRODSPEED",               CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1532[lng], string_pcm[lng],   350.0,    10.0,  420.0, &file_manager  ); // Production speed (pcs/min)
    #endif

    parameter[num_params++] = new CParameter( ".JOGSPEED",                CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1536[lng], string_pcm[lng],   150.0,    10.0,  420.0, &file_manager  ); // Jog low speed (pcs/min)
    parameter[num_params++] = new CParameter( ".ACCELERATION",            CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1210[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // acceleration
    parameter[num_params++] = new CParameter( ".DECELERATION",            CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1212[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // deceleration
    parameter[num_params++] = new CParameter( ".JERK",                    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1208[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // jerk
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.TARGET_HEIGHT_MM",  CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1504[lng], string_mm[lng], 455.3, 455.0, 655.0, &file_manager  ); // Carousel target height
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.ZEROPOS",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1540[lng], string_pcm[lng],  -0.850,    -4.0,    4.0, &file_manager  ); // Carousel zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "INPSCREW_AXIS.ZEROPOS",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1542[lng], string_pcm[lng],  -0.743,    -4.0,    4.0, &file_manager  ); // Input screw zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "TRACKER_AXIS.ZEROPOS",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1544[lng], string_pcm[lng],   3.500,    -4.0,    4.0, &file_manager  ); // Tracker zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";

    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.SECFDBK_ZEROPOS", CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1546[lng], string_unit[lng],   0.000,    -4.0,    4.0, &file_manager  ); // Cam zero position second feedback (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    if ( use_advanced_parameters )
    {
      parameter[num_params  ] = new CParameter( ".TRACK_PERC",              CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1562[lng], string_percent[lng], 62.5,      10,     90, NULL           ); // Tracking percentage 
      parameter[num_params++]->format_spc = L"%.1lf";
    }

    parameter[num_params  ] = new CParameter( "INPUT_BELT.SPEED",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1550[lng], string_hz[lng],     25.0,    0.0,   80.0, &file_manager  ); // Inverter speed
    parameter[num_params++]->format_spc = L"%.1lf";
    parameter[num_params  ] = new CParameter( "OUTPUT_BELT.SPEED",        CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1552[lng], string_hz[lng],     25.0,    0.0,   80.0, &file_manager  ); // Inverter speed
    parameter[num_params++]->format_spc = L"%.1lf";

    #if SERIAL_N==201400020 // Also add other 3 inverters speeds
      parameter[num_params  ] = new CParameter( "PRE_INPUT_BELT.SPEED",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1554[lng], string_hz[lng],     25.0,    0.0,   80.0, &file_manager  ); // Inverter speed
      parameter[num_params++]->format_spc = L"%.1lf";
      parameter[num_params  ] = new CParameter( "BACK_BELT.SPEED",              CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1556[lng], string_hz[lng],     25.0,    0.0,   80.0, &file_manager  ); // Inverter speed
      parameter[num_params++]->format_spc = L"%.1lf";
      parameter[num_params  ] = new CParameter( "INPUT_ROTARY_TABLE.SPEED",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1558[lng], string_hz[lng],     25.0,    0.0,   80.0, &file_manager  ); // Inverter speed
      parameter[num_params++]->format_spc = L"%.1lf";
    #endif


    num_menu_btn++;


    // *******  SUB-MENU FOR GRIPPERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1610[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1610[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".OPEN_OFFSET",       CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1620[lng], string_step[lng],   55.4,   -1.0,  60.1, &file_manager  ); // Grippers opening phase
    parameter[num_params++] = new CParameter( ".ANT_OPEN_MAX",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1622[lng], string_step[lng],    0.5,    0.0,   2.0, &file_manager  ); // Grippers opening advance 
    parameter[num_params++] = new CParameter( ".OPEN_PRESSURE",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1624[lng], string_unit[lng],    3.5,    0.0,   8.0, &file_manager  ); // Grippers opening pressure
    parameter[num_params++] = new CParameter( ".CLOSE_OFFSET",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1630[lng], string_step[lng],   46.7,   -1.0,  60.1, &file_manager  ); // Grippers closing phase
    parameter[num_params++] = new CParameter( ".ANT_CLOSE_MAX",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1632[lng], string_step[lng],    0.5,    0.0,   2.0, &file_manager  ); // Grippers closing advance 
    parameter[num_params++] = new CParameter( ".CLOSE_PRESSURE",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1634[lng], string_unit[lng],    1.5,    0.0,   8.0, &file_manager  ); // Grippers closing pressure 
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GRIPPERS",  CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1612[lng],              L"",      0,      0,       1, &file_manager ); // check opening/closing
    parameter[num_params++] = new CParameter( ".GROPEN_DELAY",      CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1614[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for opening error
    parameter[num_params++] = new CParameter( ".GRCLOSE_DELAY",     CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1616[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for closing error
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CLOSED_LOOP",     CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1636[lng],              L"",      0,      0,       1                ); // closed loop

    num_menu_btn++;

    // *******  SUB-MENU FOR DEVIATORS/OUTPUT - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1640[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1640[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); //380 );
    int main_menu_btn = num_menu_btn;

    parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",                  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_330[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    parameter[num_params++] = new CParameter( ".F_ENABLE_LIGHTCHK",              CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_332[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MAX_WIDTH",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1639[lng], string_step[lng],    0.9,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MIN_WIDTH",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1638[lng], string_step[lng],    0.1,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GOODS",                  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1660[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output goods
    parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS1",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1662[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects1 
    parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS2",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1664[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects2
   
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "PRODUCT_FLOW.LOAD_VAL",           CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1654[lng], string_unit[lng],      0,      0,  1023  ); // Loading initial value
    parameter[num_params++] = new CParameter( ".F_REJECT_SIMULATE",              CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1656[lng],              L"",      0,      0,     1  ); // rejects simulation
    num_menu_btn++;

    // DELAYS
    menu_btn[num_menu_btn] = new CMenu_button( string_1750[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1750[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
//    parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_330[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // persistent - not saved into recipes
//    menu_btn[num_menu_btn-1]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY1",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1752[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY2",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1754[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY1",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1756[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY2",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1758[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY1",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1760[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej2 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY2",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1762[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej2 full
    #ifdef INPUTBELT_SENSOR // Id defined set input sensor delays
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY1",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1764[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY2",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1766[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    #endif
    #if SERIAL_N==201400020 // Also add input empty delay parameters 
      parameter[num_params++] = new CParameter( "MACHINE.ROTARYTAB_DELAY1",      CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1767[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
      parameter[num_params++] = new CParameter( "MACHINE.ROTARYTAB_DELAY2",      CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1768[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    #endif
    #ifdef FALLEN_CONTAINER // If defined, use code to check fallen containers/set delay/enable alarm
      parameter[num_params++] = new CParameter( "ALARMS_CHECK.FALLEN_DELAY",     CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1769[lng], string_msec[lng],   300,   0, 1000000, &file_manager  ); // Delay to trigger fallen container alarm
    #endif      
    num_menu_btn++;

    // DISTANCES
    menu_btn[num_menu_btn] = new CMenu_button( string_1653[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1653[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV1",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1641[lng], string_step[lng],   77.50,  20.0, 100.0, &file_manager  ); // Distance input photosens - first deviator 
    parameter[num_params++] = new CParameter( ".DIST_DEV1_DEV2",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1645[lng], string_step[lng],    4.00,   1.0,  10.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_GOOD",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1642[lng], string_step[lng],   82.75,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ1",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1643[lng], string_step[lng],   87.77,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ2",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1644[lng], string_step[lng],   95.09,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWI",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1646[lng], string_step[lng],    2.3,    0.0,   4.0, &file_manager  ); // Main starwheel suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWO",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1648[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Main starwheel blowing lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDI",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1650[lng], string_step[lng],    1.3,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDO",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1652[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels blowing lenght (steps)
    num_menu_btn++;

/*    menu_btn[num_menu_btn] = new CMenu_button( string_1653[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1653[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.LOAD_VAL",           CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1654[lng], string_unit[lng],      0,      0,  1023  ); // Loading initial value
    num_menu_btn++; */

    // *******  SUB-MENU FOR FIRST SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn++] = new CMenu_button( string_1706[lng], menu_btn[0]->child );
    UINT nmbt = num_menu_btn-1;

    file_manager.Add_separator( string_1706[lng] );
    menu_btn[nmbt]->child->new_size( 320, 100 );

    menu_btn[nmbt]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "SEND_SPIN_PARAMETERS.RUN",                 CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1710[lng],              L"",      1,      0,     1                 ); // send data
 
    menu_btn[num_menu_btn++] = new CMenu_button( string_1710[lng],  menu_btn[nmbt]->child, &Send_spin_parameters      ); 

    // NTURN1/2/3: Into PLC is WORD number of full revolutions - Written into LAM 40963/67/71 as BYTE - LAM executes 17067 usteps per each turn (1:1.5 gear ratio)
    // VEL1/2/3:   Into PLC is WORD max speed in RPM - Written into LAM 40960/64/68 as WORD - LAM sets speeds 4x RPM - Gripper will rotate about 1.5 times faster bcs of gear ratio

    // REAL AVERAGE COEFFICIENT IS 1.52 (1.51-1.53) BECAUSE OF SOME ERROR IN LAM SPEED
    // FOR COSMETIC / F/D LINEAR CAMERAS AT 400 pcs/min full revolution in 320ms is required => 3.125 RPS = 187.5 RPM
    // SET 123-124 RPM INTO PLC/PC (500-530 value to be written into LAM speed register bcs 4x)

    menu_btn[nmbt]->child->posy += 30; // Set vertical position
    parameter[num_params++] = new CParameter( ".ALIGN_ENABLE",        CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1718[lng],              L"",      1,      0,     1, &file_manager  ); // enable alignment spin cycle
    parameter[num_params++] = new CParameter( ".F_CHECK_LAM",         CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1730[lng],              L"",      1,      0,     1, NULL           ); // enable LAM error detection
    parameter[num_params++] = new CParameter( ".SPIN1_ENABLE",        CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 1
    parameter[num_params++] = new CParameter( ".VEL1",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1720[lng], string_unit[lng],   1000,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC1",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1722[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC1",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1724[lng], string_unit[lng],   3000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN1",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY1",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance

    menu_btn[nmbt]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN1_LOOP.RUN",       CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle1
    parameter[num_params++] = new CParameter( "SPIN1_LOOP.RUN_LINE",  CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup
    

    // *******  SUB-MENU FOR SECOND SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1704[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1704[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN2_ENABLE",        CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 2
    parameter[num_params++] = new CParameter( ".VEL2",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    800,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC2",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC2",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN2",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     12,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY2",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN2_LOOP.RUN",       CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle2
    parameter[num_params++] = new CParameter( "SPIN2_LOOP.RUN_LINE",  CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup

    num_menu_btn++;


    // *******  SUB-MENU FOR THIRD SPINNING - num_menu_btn=  ******* 

    #ifdef HEEL_INSPECTION
      menu_btn[num_menu_btn] = new CMenu_button( string_1702[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1702[lng] );
    #else  // Normal - Top-cake
      menu_btn[num_menu_btn] = new CMenu_button( string_1705[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1705[lng] );
    #endif

    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); 

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN3_ENABLE",        CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 2
    parameter[num_params++] = new CParameter( ".VEL3",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    180,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC3",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC3",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN3",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],      4,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY3",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN",       CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for spin3
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN_LINE",  CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup

    num_menu_btn++;


    // *******  SUB-MENU FOR EJECTOR MASKS - num_menu_btn=  ******* 

	//Pour added for conditional compilation 20180927
	#ifndef REJECTION_SEPARATION

    menu_btn[num_menu_btn] = new CMenu_button( string_1668[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1668[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

	//Pour added for conditional compilation 20180927
	//#ifndef REJECTION_SEPARATION
	//    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_ENABLE_SPINCHK",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1666[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 

	//    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE1",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1770[lng],  L"",   0,   0,   1, &file_manager ); // Sidecake
    #ifdef NOTHIRDSTN_FDPC2 // ONLY on YAOPHARMA no TOPCAKE on PC2
      #if STN3==CAKETOP_ARDIRECT
        parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1772[lng],  L"",   0,   0,   1, &file_manager ); // Topcake/skinning (area scan)
      #else
        ADS_write_value( ".F_ENABLE_PARTICLE2", FALSE, CTYPE_BOOL8 ); // Force enabble of top-cake reject to false
      #endif
    #else
      //#if SERIAL_N==201400022 // Yaopharma top-cake changed to HEEL cameras
      #ifdef HEEL_INSPECTION
        parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1796[lng],  L"",   0,   0,   1, &file_manager ); // Heel
      #else  // Normal - Top-cake
        parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1772[lng],  L"",   0,   0,   1, &file_manager ); // Topcake
      #endif
    #endif
    parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1676[lng],  L"",   0,   0,   1, &file_manager ); // Sidewall
    parameter[num_params++] = new CParameter( ".F_ENABLE_TIPCAP",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1680[lng],  L"",   0,   0,   1, &file_manager ); // Cap 123
    parameter[num_params++] = new CParameter( ".F_ENABLE_FOCOLOR",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1774[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    parameter[num_params++] = new CParameter( ".F_ENABLE_BOTTOMA",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1776[lng],  L"",   0,   0,   1, &file_manager ); // Bottom A
    parameter[num_params++] = new CParameter( ".F_ENABLE_BOTTOMB",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1778[lng],  L"",   0,   0,   1, &file_manager ); // Bottom B

    #if STN1==CAKESIDE_ARBACK // Test AUSIA, add 4 area scan cameras side by side with existing line scan cam for sidewall
      parameter[num_params++] = new CParameter( ".F_ENABLE_WAISTLYRD",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1746[lng],  L"",   0,   0,   1, &file_manager ); // Waist/layered
    #endif 

    menu_btn[num_menu_btn]->child->posy += 6; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_DEV2_SPINCHK",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1667[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE1",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1780[lng],  L"",   0,   0,   1, &file_manager ); // Sidecake
    #ifdef NOTHIRDSTN_FDPC2 // ONLY on YAOPHARMA no TOPCAKE on PC2

      #if STN3==CAKETOP_ARDIRECT
        parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1782[lng],  L"",   0,   0,   1, &file_manager ); // Topcake/skinning (area scan)
      #else
        ADS_write_value( ".F_DEV2_PARTICLE2", FALSE, CTYPE_BOOL8 ); // Force enabble of top-cake reject to false
      #endif
    #else
      //#if SERIAL_N==201400022 // Yaopharma top-cake changed to HEEL cameras
      #ifdef HEEL_INSPECTION
        parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1798[lng],  L"",   0,   0,   1, &file_manager ); // Heel
      #else  // Normal - Top-cake
        parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1782[lng],  L"",   0,   0,   1, &file_manager ); // Topcake
      #endif
    #endif
    parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1689[lng],  L"",   0,   0,   1, &file_manager ); // Sidewall
    parameter[num_params++] = new CParameter( ".F_DEV2_TIPCAP",       CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1688[lng],  L"",   0,   0,   1, &file_manager ); // Cap 123
    parameter[num_params++] = new CParameter( ".F_DEV2_FOCOLOR",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1784[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    parameter[num_params++] = new CParameter( ".F_DEV2_BOTTOMA",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1786[lng],  L"",   0,   0,   1, &file_manager ); // Bottom A
    parameter[num_params++] = new CParameter( ".F_DEV2_BOTTOMB",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1788[lng],  L"",   0,   0,   1, &file_manager ); // Bottom B

    #if STN1==CAKESIDE_ARBACK // Test AUSIA, add 4 area scan cameras side by side with existing line scan cam for sidewall
      parameter[num_params++] = new CParameter( ".F_DEV2_WAISTLYRD",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1748[lng],  L"",   0,   0,   1, &file_manager ); // Waist/layered
    #endif 

    num_menu_btn++;

	#endif//Pour added 20180927

	#ifdef REJECTION_SEPARATION

	//Pour 20180927
	ADS_write_value(".F_ENABLE_SPINCHK", FALSE, CTYPE_BOOL8); // Force enable of SPIN reject TRAY1 to false
	ADS_write_value(".F_ENABLE_PARTICLE1", FALSE, CTYPE_BOOL8); // Force enable of PARTICLE1 reject to TRAY1 false
	ADS_write_value(".F_ENABLE_PARTICLE2", FALSE, CTYPE_BOOL8); // Force enable of PARTICLE2 reject to TRAY1 false
	ADS_write_value(".F_ENABLE_COSMETIC_1", FALSE, CTYPE_BOOL8); // Force enable of COSMETIC reject to TRAY1 false
	ADS_write_value(".F_ENABLE_COSMETIC_2", FALSE, CTYPE_BOOL8); // Force enable of COSMETIC reject to TRAY1 false
	ADS_write_value(".F_ENABLE_COSMETIC_3", FALSE, CTYPE_BOOL8); // Force enable of COSMETIC reject to TRAY1 false
	ADS_write_value(".F_ENABLE_COSMETIC_4", FALSE, CTYPE_BOOL8); // Force enable of COSMETIC reject to TRAY1 false
	//ADS_write_value(".F_ENABLE_TIPCAP", FALSE, CTYPE_BOOL8); // Force enable of CAP reject to TRAY1 false
	ADS_write_value(".F_ENABLE_TIPCAP_1", FALSE, CTYPE_BOOL8); // Force enable of CAP reject to TRAY1 false
	ADS_write_value(".F_ENABLE_TIPCAP_2", FALSE, CTYPE_BOOL8); // Force enable of CAP reject to TRAY1 false
	ADS_write_value(".F_ENABLE_TIPCAP_3", FALSE, CTYPE_BOOL8); // Force enable of CAP reject to TRAY1 false
	ADS_write_value(".F_ENABLE_FOCOLOR", FALSE, CTYPE_BOOL8); // Force enable of CAP reject to TRAY1 false
	ADS_write_value(".F_ENABLE_BOTTOMA", FALSE, CTYPE_BOOL8); // Force enable of BOTTOMA reject to TRAY1 false
	ADS_write_value(".F_ENABLE_BOTTOMB", FALSE, CTYPE_BOOL8); // Force enable of BOTTOMB reject to TRAY1 false
	ADS_write_value(".F_ENABLE_HGA", FALSE, CTYPE_BOOL8); // Force enable of HGA reject to TRAY1 false
	
	menu_btn[num_menu_btn] = new CMenu_button( string_1668[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1668[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    parameter[num_params++] = new CParameter( ".F_DEV2_SPINCHK",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1666[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE1",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1770[lng],  L"",   0,   0,   1, &file_manager ); // Sidecake
    parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1796[lng],  L"",   0,   0,   1, &file_manager ); // Topcake/skinning (area scan)// string 1772-1796 TOPCAKE-HELL
    parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1676[lng],  L"",   0,   0,   1, &file_manager ); // Sidewall
    parameter[num_params++] = new CParameter( ".F_DEV2_TIPCAP",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1680[lng],  L"",   0,   0,   1, &file_manager ); // Cap 123
    parameter[num_params++] = new CParameter( ".F_DEV2_FOCOLOR",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1774[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    parameter[num_params++] = new CParameter( ".F_DEV2_BOTTOMA",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1776[lng],  L"",   0,   0,   1, &file_manager ); // Bottom A
    parameter[num_params++] = new CParameter( ".F_DEV2_BOTTOMB",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1778[lng],  L"",   0,   0,   1, &file_manager ); // Bottom B
    menu_btn[num_menu_btn]->child->posy += 6; // Set vertical position
	
	num_menu_btn++;

	#endif	//REJECTION_SEPARATION
	//Pour added 20180927
//    parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1674[lng],  L"",   0,   0,   1, &file_manager ); // 
//    parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1675[lng],  L"",   0,   0,   1, &file_manager ); // 
//    parameter[num_params++] = new CParameter( ".F_DEV2_FILLING1",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1684[lng],  L"",   0,   0,   1, &file_manager ); // 
//    parameter[num_params++] = new CParameter( ".F_DEV2_FILLING2",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1685[lng],  L"",   0,   0,   1, &file_manager ); // 


    // *******  SUB-MENU FOR TRIGGERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1690[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1690[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params  ] = new CParameter( ".TIPCAP_TRIGGER_PHASE",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1691[lng], string_step[lng],    0.1, 0.0, 0.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".FOCOLOR_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1692[lng], string_step[lng],    0.2, 0.0, 0.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".BOTTOMA_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1693[lng], string_step[lng],    0.3, 0.0, 0.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".BOTTOMB_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1694[lng], string_step[lng],    0.4, 0.0, 0.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".PART1_TRIGGER_PHASE",      CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1695[lng], string_step[lng],    0.5, 0.0, 3.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".PART2_TRIGGER_PHASE",      CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1696a[lng], string_step[lng],   0.6, 0.0, 3.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";

    //#if SERIAL_N==201400022 // Yaopharma top-cake changed to HEEL cameras
    #ifdef HEEL_INSPECTION
      parameter[num_params  ] = new CParameter( ".COSM_TRIGGER_PHASE",       CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1696d[lng], string_step[lng],   0.7, 0.0, 3.95, &file_manager  );
    #else  // Normal - Top-cake
      parameter[num_params  ] = new CParameter( ".COSM_TRIGGER_PHASE",       CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1696b[lng], string_step[lng],   0.7, 0.0, 3.95, &file_manager  );
    #endif
    parameter[num_params++]->format_spc = L"%.2lf";
    num_menu_btn++;



    #ifdef HGA_LEAKTEST            // HGA components installed
      ADS_write_value( ".F_HGA_ENABLE", TRUE, CTYPE_BOOL8 ); // Force enable HGA
      menu_btn[num_menu_btn] = new CMenu_button( string_1950[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1950[lng] );

	  RECT area_0;
	  pView->menu_btn[pView->num_menu_btn]->child->GetWindowRect(&area_0);
	  area_0.top -= 100;
	  pView->menu_btn[pView->num_menu_btn]->child->MoveWindow(&area_0);
      menu_btn[num_menu_btn]->child->new_size( 320, 100 );
      parameter[num_params  ] = new CParameter( ".HGA_TRIGGER_PHASEA",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1952[lng], string_step[lng],   0.90,    0.0,  0.99, &file_manager  ); // Input phase for HGA trigger A 
      parameter[num_params++]->format_spc = L"%.2lf";
      menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
      parameter[num_params++] = new CParameter( ".DIST_LOAD_HGA",         CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1956[lng], string_step[lng],     72,    0.0,   110, &file_manager  ); // Distance load-hga
	  parameter[num_params++] = new CParameter( ".HGA_PERCENTAGE",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1957[lng], string_unit[lng],     1,     0.0,   100, &file_manager  ); // percentage of vials-hga

	  parameter[num_params++] = new CParameter( ".HGA_THRESHOLD",        CTYPE_REAL  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1958[lng], string_unit[lng],  15.0,      0.0, 21.0, &file_manager  ); // Threshold for accept/reject
	  parameter[num_params++] = new CParameter( ".Norma_Air_Set",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1959[lng], string_unit[lng],  10,      0, 1000, &file_manager  ); // Threshold for accept/reject
	  parameter[num_params++] = new CParameter( ".Norma_Min_Set",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1960[lng], string_unit[lng],  1,      0, 1000, &file_manager  ); // Threshold for accept/reject
	  parameter[num_params++] = new CParameter( ".Norma_Max_Set",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1961[lng], string_unit[lng],  100,      0, 1000, &file_manager  ); // Threshold for accept/reject

      //parameter[num_params++] = new CParameter( ".HGA_THRESHOLDH",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1958[lng], string_unit[lng],  15000,      0, 32000, &file_manager  ); // Threshold for accept/reject
      //parameter[num_params++] = new CParameter( ".HGA_THRESHOLDL",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1960[lng], string_unit[lng],  15000,      0, 32000, &file_manager  ); // Threshold for accept/reject
	  menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
      parameter[num_params++] = new CParameter( ".F_ENABLE_HGA",          CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1964[lng],  L"",   0,   0,   1, &file_manager ); // Sidewall
      parameter[num_params++] = new CParameter( ".F_DEV2_HGA",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1966[lng],  L"",   0,   0,   1, &file_manager ); // Sidewall
      num_menu_btn++;

	  //Pour 20170714 removed==================================
	  /*
      #ifdef HGA_DATAREC
        RECT area;
        menu_btn[num_menu_btn-1]->child->GetWindowRect(&area);
        area.top    -= 50;
        area.bottom -= 50;
        menu_btn[num_menu_btn-1]->child->MoveWindow(&area);
      
        menu_btn[num_menu_btn] = new CMenu_button( string_1970[lng], menu_btn[num_menu_btn-1]->child, &HGAdata_record );
        hgadatarec_btn = menu_btn[num_menu_btn];
        parameter[num_params++] = new CParameter( ".F_HGA_SAMPLE",        CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a[lng],  L"",   0,   0,   1, NULL ); // Enable HGA serial communication
        parameter[num_params++] = new CParameter( ".SCAN_MIN_SET",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976b[lng], string_unit[lng],     100,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".SCAN_MAX_SET",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976c[lng], string_unit[lng],     101,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".WAVETYPE_SET",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976d[lng], string_unit[lng],     102,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".NORMA_MIN_SET",       CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976e[lng], string_unit[lng],     103,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".NORMA_MAX_SET",       CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976f[lng], string_unit[lng],     104,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".NORMA_AIR_SET",       CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976g[lng], string_unit[lng],     105,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        num_menu_btn++;
      #endif
	  */
		//Pour 20170714 removed==================================

		//Pour 20170714 added_start
		#ifdef HGA_DATAREC
        RECT area;
        menu_btn[num_menu_btn-1]->child->GetWindowRect(&area);
        //area.top    -= 50;
        //area.bottom -= 50;
		//Pour 20170714
		area.top    -= 120;
        area.bottom -= 120;
		//Pour 20170714
        menu_btn[num_menu_btn-1]->child->MoveWindow(&area);
      
        menu_btn[num_menu_btn] = new CMenu_button( string_1970[lng], menu_btn[num_menu_btn-1]->child, &HGAdata_record );
        hgadatarec_btn = menu_btn[num_menu_btn];
		//Pour 20170719 added
		parameter[num_params++] = new CParameter( ".F_HGA_SAMPLE",        CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a[lng],  L"",   0,   0,   1, NULL ); // Enable HGA serial communication
		//++++++++++++++++++++
        parameter[num_params++] = new CParameter( ".EN_RS232COM",        CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a0[lng],  L"",   0,   0,   1, NULL ); // Enable HGA serial communication
		//Pour 20170714 added
		parameter[num_params++] = new CParameter( ".HGA_SAMPLING",       CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a1[lng],  L"",   0,   0,   1, NULL ); // Display wave
		parameter[num_params++] = new CParameter( ".HGA_DISPLAYWAVE",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a2[lng],  L"",   0,   0,   1, NULL ); // Enable HGA sampling_button
		//Pour 20170714 added
        parameter[num_params++] = new CParameter( ".HGA_WRITETYPE",      CTYPE_BYTE  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976b[lng], string_unit[lng],     101,    0.0,   255, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".HGA_WRITEADDRESS",   CTYPE_BYTE  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976c[lng], string_unit[lng],     102,    0.0,   255, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".HGA_WRITEDATA",      CTYPE_UNSIGNED |CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976d[lng], string_unit[lng],     103,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
		parameter[num_params++] = new CParameter( ".HGA_WRITECMD",       CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a4[lng],  L"",   0,   0,   1, NULL ); // Enable HGA write_button
        parameter[num_params++] = new CParameter( ".HGA_READTYPE",       CTYPE_BYTE  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976e[lng], string_unit[lng],     104,    0.0,   255, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".HGA_READADDRESS",    CTYPE_BYTE  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976f[lng], string_unit[lng],     105,    0.0,   255, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".HGA_READDATA",       CTYPE_UNSIGNED |CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976g[lng], string_unit[lng],     106,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
		parameter[num_params++] = new CParameter( ".HGA_READCMD",        CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a3[lng],  L"",   0,   0,   1, NULL ); // Enable HGA read_button
        num_menu_btn++;
      #endif
		//Pour 20170714 added_the end

    #endif





    // **************************************************************************************
    // *******                                                                        ******* 
    // *******       SUB-MENU FOR CALIBRATION/ADVANCED PARAMETERS - num_menu_btn=     ******* 
    // *******                                                                        ******* 
    // **************************************************************************************

    menu_btn[num_menu_btn] = new CMenu_button( string_1800[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1800[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    calibration_menu = menu_btn[num_menu_btn];
    main_menu_btn = num_menu_btn;
    num_menu_btn++;


    // ABC phases
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1809[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1809[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".INPUT_PHASE_A",                 CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1810[lng], string_step[lng],   1.50,    0.0,   3.0, &file_manager  ); // Input phase for A valves
    parameter[num_params++] = new CParameter( ".INPUT_PHASE_B",                 CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1812[lng], string_step[lng],   2.50,    0.0,   3.0, &file_manager  ); // Input phase for B valves
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCA",              CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1820[lng], string_step[lng],   2.50,    0.0,   4.0, &file_manager  ); // Input cam phase for A cameras
    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCB",              CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1822[lng], string_step[lng],   3.50,    0.0,   4.0, &file_manager  ); // Input cam phase for B cameras
    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCC",              CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1824[lng], string_step[lng],   0.50,    0.0,   4.0, &file_manager  ); // Input cam phase for C cameras
    num_menu_btn++;

    // Carousel height encoder parameters
    menu_btn[num_menu_btn] = new CMenu_button( string_1828[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1828[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MAX_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1830[lng], string_mm[lng],    562.0,  200.0,    700.0, &file_manager  ); // Maximum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MIN_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1832[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Minimum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_mm[lng],    557.0,  200.0,    700.0, &file_manager  ); // Top point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_ec[lng],  9480033,      0, 16777215, &file_manager  ); // Top point height (ec)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Low point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_ec[lng],  9569182,      0, 16777215, &file_manager  ); // Low point height (ec)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    num_menu_btn++;

    // OFFSETS
    menu_btn[num_menu_btn] = new CMenu_button( string_1859[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1848[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".SPIN1_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1850[lng], string_unit[lng],    8,    0,   15, &file_manager  ); // Spin1 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN2_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1852[lng], string_unit[lng],    4,    0,   15, &file_manager  ); // Spin2 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN3_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1854[lng], string_unit[lng],    1,    0,   15, &file_manager  ); // Spin3 offset (motors)
    parameter[num_params++] = new CParameter( ".ALIGN_OFFSET",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1856[lng], string_step[lng], 50.0,  0.0, 60.0, &file_manager  ); // Align offset (steps)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".BOTTOMA_OFS",                   CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1804[lng], string_step[lng], 50.0,  0.0, 60.0, &file_manager  ); // datarecord bottom A offset (heads)
    parameter[num_params++] = new CParameter( ".BOTTOMB_OFS",                   CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1805[lng], string_step[lng], 48.0,  0.0, 60.0, &file_manager  ); // datarecord bottom B offset (heads)
    parameter[num_params++] = new CParameter( ".PART1_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1806[lng], string_step[lng], 40.0,  0.0, 60.0, &file_manager  ); // datarecord particle1/sidewall offset (heads)
    parameter[num_params++] = new CParameter( ".PART2_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1807[lng], string_step[lng], 24.0,  0.0, 60.0, &file_manager  ); // datarecord particle2/sidecake offset (heads)
    parameter[num_params++] = new CParameter( ".COSM_OFS",                      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1808[lng], string_step[lng], 12.0,  0.0, 60.0, &file_manager  ); // datarecord cosmetic /sidewall offset (heads)


    num_menu_btn++;

    // DISTANCES
    menu_btn[num_menu_btn] = new CMenu_button( string_1858[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1848[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".DIST_LOAD_TCA",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1860[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and tip/cap cameras
    parameter[num_params++] = new CParameter( ".DIST_LOAD_FO",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1861[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and FO color camera
    parameter[num_params++] = new CParameter( ".DIST_LOAD_BA",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1862[lng], string_unit[lng],   18,    1,   35, &file_manager  ); // Distance between input and bottom a camera
    parameter[num_params++] = new CParameter( ".DIST_LOAD_BB",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1863[lng], string_unit[lng],   18,    1,   35, &file_manager  ); // Distance between input and bottom b camera
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1A",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1890[lng], string_unit[lng],    7,    1,   15, &file_manager  ); // Distance between input and first part A
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1B",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1892[lng], string_unit[lng],    7,    1,   15, &file_manager  ); // Distance between input and first part B
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1C",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1894[lng], string_unit[lng],    8,    1,   15, &file_manager  ); // Distance between input and first part C
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1D",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1896[lng], string_unit[lng],    8,    1,   15, &file_manager  ); // Distance between input and first part D
    num_menu_btn++;


    // *******  SUB-MENU FOR BATCH - num_menu_btn=7  ******* 
    menu_btn[num_menu_btn++] = new CMenu_button( string_1310[lng],  menu_btn[7]->child, &Reset_statistics      ); 

    if ( batch_mngr )
    {
      // batch start/stop
      menu_btn[num_menu_btn++] = new CMenu_button( string_1304[lng],  menu_btn[7]->child, &Batch_startstop     ); 
      batch_btn = menu_btn[num_menu_btn-1];
      if ( batch_mngr->current.status ) batch_btn->SetWindowTextW( string_1306[lng] );

      // batch print/report
      menu_btn[num_menu_btn++] = new CMenu_button( string_1308[lng],  menu_btn[7]->child, &Batch_report        ); 
    }

  }

  parcat_1 = L"INSPECTION";
  parcat_2 = NULL;

	parameter[num_params++] = new CParameter( &show_rejects,  CTYPE_BOOL8, 0, menu_btn[1]->child, string_2124[lng],   0,                1,  0,   0, NULL            );
	parameter[num_params++] = new CParameter( &pseudo_colors, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2122[lng],   0,                1,  0,   0, NULL, &Set_LUT  );//Pour removed 20180927

  #ifdef NEWCAP_V30
    if ( IS_PC1 )
    {
      ADS_write_value( ".F_CAP_V30", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
//  	parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
      parameter[num_params++] = new CParameter( "TRIGGER_CAP_V30.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
    }
  #endif


  #ifdef NEWCAP_DOUBLE
    if ( IS_PC1 )
    {
      ADS_write_value( ".F_DOUBLE_CAP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  	  parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
      parameter[num_params++] = new CParameter( "TRIGGER_DOUBLE_CAP.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
    }
  #endif

  // -----------------------------   S O T T O M E N U     O F     E A C H     C A M E R A    ---------------------------------------------
	for ( UINT i=0 ; i<num_tlc ; i++ ) // Sotto gruppo parametri telecamere - Livello 1 - menu_btn[20,21,22]
  {
    wchar_t msg[50+1];
    swprintf( msg, 50, string_800[lng], i, camera[i].name );
	  menu_btn[num_menu_btn] = new CMenu_button( msg, menu_btn[1]->child );
	  menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    file_manager.Add_separator( msg );

    parcat_1 = msg;
    parcat_2 = NULL;

    #ifdef NEWCAP_DOUBLE
      if ( IS_PC1 && i<3 ) 
      {
//        parameter[num_params++] = new CParameter( &camera[i].shutter,  CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, NULL, i );
//        parameter[num_params++] = new CParameter( &camera[i].shutter2, CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2506[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, NULL, i );
        parameter[num_params++] = new CParameter( &camera[i].shutter,  CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );

        // keep creating to avoid problems with recipes, but HIDE shutter2 parameter windows
        parameter[num_params++] = new CParameter( &camera[i].shutter2, CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2506[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
        parameter[num_params-1]->pt_desc->ShowWindow( SW_HIDE );
        parameter[num_params-1]->pt_val->ShowWindow ( SW_HIDE );
        parameter[num_params-1]->pt_udm->ShowWindow ( SW_HIDE );
      }
      else
      {
//        parameter[num_params++] = new CParameter( &camera[i].shutter,  CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, NULL, i );
        parameter[num_params++] = new CParameter( &camera[i].shutter,    CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng], 1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
        parameter[num_params++] = new CParameter( &camera[i].frame_rate, CTYPE_REAL,  0, menu_btn[num_menu_btn]->child, string_2066[lng], string_fps [lng], 50.0,               0.0,            10000.0, &file_manager, &Set_camera, i );//Pour changed from 6000 to 10000
      }
    #else
      parameter[num_params++] = new CParameter( &camera[i].shutter,    CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
      parameter[num_params++] = new CParameter( &camera[i].frame_rate, CTYPE_REAL,  0, menu_btn[num_menu_btn]->child, string_2066[lng], string_fps [lng],   50.0,               0.0,            6000.0, &file_manager, &Set_camera, i );
    #endif

    num_menu_btn++;

    int menu_btn_par = num_menu_btn-1;
    if ( IS_PC1 ) 
    {
      if ( i<3 ) // cap/seal dedicated parameters
      {
        parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
        if ( tip_insp[i] ) tip_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      if ( i>=3 && i<=4 )  // bottom dedicated parameters
      {
        parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
        if ( bottom_insp[i] ) bottom_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      if ( i==5 )  // FO color dedicated parameters (bottom-type if NEWCAP_ORALCAP)
      {
        parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
        if ( focolor_insp[i] ) focolor_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( bottom_insp [i] ) bottom_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( oralfo_insp [i] ) oralfo_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      if ( i>=6 && i<=9 )  // Sidewall dedicated parameters
      {
        //if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2340 );
      }
    }

    if ( IS_PC2 ) 
    {
      if ( i<4 ) // SIDE CAKE LINEAR CAMERAS/CONTROL
      {
        if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2342 );
      }
      else       // TOP CAKE LINEAR CAMERAS/CONTROL
      {
        //#if SERIAL_N==201400022 // Yaopharma top-cake changed to HEEL cameras
        #ifdef HEEL_INSPECTION
          if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2346 );
        #else  // Normal - Top-cake
          if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2344 );
        #endif

        if ( waistlayer_insp[i] ) waistlayer_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );

        if ( skinning_insp[i]   ) skinning_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );

      }
    }

  }

//  menu_btn[1]->child->posy += 10; // Set vertical position

  // particle start/stop learning - show learning
	//parameter[num_params++] = new CParameter( &learning,    CTYPE_BOOL8, 0, menu_btn[1]->child, string_750[lng], 0,  0,  0, 1, NULL, &Learn_models );//Pour removed 20180927

//  menu_btn[1]->child->posy += 10; // Set vertical position
//  menu_btn[num_menu_btn++] = new CMenu_button( string_2054[lng], menu_btn[1]->child, &Show_reflections );
//  menu_btn[num_menu_btn++] = new CMenu_button( string_2042[lng], menu_btn[1]->child, &Filter_reflections );


  #if STN3==CAKETOP_ARDIRECT
    if ( IS_PC2 )
    {
      CRect area;
      menu_btn[1]->child->GetWindowRect(&area);
      area.top    -= 70;
      area.bottom -= 70;
      menu_btn[1]->child->MoveWindow(&area);
    }
  #endif




  // ***************************************************************************
  //
	//               ADD FUNCTIONS/UTILITIES	( container menu_btn[4] )
  //
  // ***************************************************************************

/*  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], menu_btn[4]->child, &Change_view       );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;  */


  #ifdef ALARMLOG_SEPARATE // log alarms separately and add button to show them
    menu_btn[num_menu_btn++] = new CMenu_button( string_104[lng], menu_btn[4]->child, &Show_alarmlog  );
  #endif

  #ifdef NEW_LOGGER // log alarms separately and add button to show them
    menu_btn[num_menu_btn++] = new CMenu_button( string_3900[lng], menu_btn[4]->child, &Show_log  );
  #endif

  parameter[num_params++] = new CParameter( ".O_MACHINE_LIGHT", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_124[lng], L"", 0, 0, 1 ); // machine lights

  parameter[num_params++] = new CParameter( ".F_RUN_BELTS",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_128[lng], L"", 1, 0, 1 ); // run belt/s

  #ifdef VACUUM_PUMP // if defined add button connected to output 6th board/4th output
    parameter[num_params++] = new CParameter( ".O_VACUUM_PUMP",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_340[lng], L"", 1, 0, 1 ); // run vacuum pump
  #endif

  #if SERIAL_N==201400020 // Also add other 3 belts/rotary manual running commands
    parameter[num_params  ] = new CParameter( ".F_MR_PREINPUTBELT", CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_114[lng], L"", 0, 0, 1 ); 
    parameter[num_params  ] = new CParameter( ".F_MR_BYPASSBELT",   CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_110[lng], L"", 0, 0, 1 ); 
    parameter[num_params  ] = new CParameter( ".F_MR_ROTARYTABLE",  CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_112[lng], L"", 0, 0, 1 ); 
  #endif

  menu_btn[num_menu_btn] = new CMenu_button( string_160[lng], menu_btn[4]->child, &Movie_startstop   );
	movie_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  /*
  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], OPERATOR_LEVEL );//SUPERVISOR_LEVEL-OPERATOR_LEVEL on 20200512
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
  }
  */
    #ifdef NEW_PASSW_MNGR  // New users/passwords manager

    if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], OPERATOR_LEVEL );//SUPERVISOR_LEVEL
    num_menu_btn++;
    //menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
	menu_btn[num_menu_btn] = new CMenu_button( string_1036[lng], menu_btn[4]->child);
	password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
	
    file_manager.Add_separator( string_1036[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
	parameter[num_params++] = new CParameter( &password_mngr->chgpwd_days, CTYPE_INT ,  0, menu_btn[num_menu_btn]->child, string_1037[lng], string_day[lng],  90,  1,  360, &file_manager);
	password_mngr->insert_hmi( parameter[num_params-1], SUPERUSER_LEVEL );
	parameter[num_params++] = new CParameter( &password_mngr->logout_timeout, CTYPE_INT ,  0, menu_btn[num_menu_btn]->child, string_1038[lng], string_minute[lng],  3,  1,  30, &file_manager);
	password_mngr->insert_hmi( parameter[num_params-1], SUPERUSER_LEVEL );
	//parameter[num_params++] = new CParameter( &password_mngr->annotate_on, CTYPE_BOOL8, 0, menu_btn[num_menu_btn]->child, string_1035[lng], L"", 1, 0, 1 ); 
	num_menu_btn++;
    menu_btn[num_menu_btn] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
	num_menu_btn++;
  }

  #else
  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
  }
  #endif

  menu_btn[num_menu_btn] = new CMenu_button( string_170[lng], menu_btn[4]->child, &Save_images       );
  saveimages_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

//	parameter[num_params++] = new CParameter( &datarec_on, CTYPE_BOOL8, 0, menu_btn[4]->child, string_2130[lng], 0,  0,  0, 1, NULL, NULL );
	menu_btn[num_menu_btn] = new CMenu_button( string_304[lng], menu_btn[4]->child, &Data_record      );
  datarec_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

	menu_btn[num_menu_btn] = new CMenu_button( string_320[lng], menu_btn[4]->child, &Save_inspections  );
  saveinsp_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

	menu_btn[num_menu_btn] = new CMenu_button( string_324[lng], menu_btn[4]->child, &Save_sequences  );
  saveseq_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  #ifdef GRIPPER_STATISTICS
  if ( IS_PC1 )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_8150[lng], menu_btn[4]->child, &Grippers_statistics );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
    num_menu_btn++;
  }
  #endif



  //#ifdef _DEBUG
  if ( test_process )
  {
	  //menu_btn[num_menu_btn++] = new CMenu_button( string_172[lng],  menu_btn[4]->child, &Load_images       );
    menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[4]->child, &Test_process      ); 
    menu_btn[num_menu_btn++] = new CMenu_button( string_912[lng],  menu_btn[4]->child, &Sequence_acquire  ); 
  }
//#endif
  
 //  ASSERT ( menu_btn[19]==NULL );


 

}


/* Create menu for all functions/parameters */
void CChildView::Create_menu_TIVS_F20(void) //Create_menu_TIVS20_FD(void)
{

  CRect rett;
  GetClientRect( &rett );

	rett.top    = OFFS_COORDY;
  rett.bottom = rett.top + 360;
	rett.left   = OFFS_COORDY;
  rett.right  = rett.Width();

  num_container = 0;

	// --------        CONTENITORE BASE - Livello 0       ------------
	//container_main = new CContainer_main( "menu base", rett, this, IDD_CONTAINER );
	container_main = new CContainer_main( L"menu base", rett, this, IDD_CONTAINER );
	container_main->ShowWindow( SW_SHOW );

  #define BRD_SUP       14

  #define COLA_SX      440
  #define COLB_SX      (COLA_SX+SPACE_X+BTN_DIMX)
  #define COLC_SX      (COLB_SX+SPACE_X+BTN_DIMX)
  #define COLD_SX      (COLA_SX-SPACE_X-BTN_DIMX)

  #define SPACE_X       14
  #define SPACE_Y       14
  #define BTN_DIMX     250 // BUTTONS WIDTH
  #define BTN_DIMY      58 // BUTTONS HEIGHT



	// * * * *    PRIMA COLONNA      * * * *
	CMenu_button::hook_pos = CMenu_button::bottom_left; // child di livello 1 allineati sotto e a sinistra

	// AUTOMATION BUTTON (num_menu_btn=0)
  rett.top    =                BRD_SUP;
  rett.bottom = rett.top    + BTN_DIMY;
  rett.left   =                COLA_SX;
  rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_900[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[0] );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;

 	// INSPECTION BUTTON  (num_menu_btn=1)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_902[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*740*/ ); // regolo dimensione sottomenu parametri ispezione
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[1] );
  num_menu_btn++;

	// * * * *     SECONDA COLONNA      * * * *
	// PULSANTE RICETTE  (num_menu_btn=2)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLB_SX;
	rett.right  = rett.left   + BTN_DIMX;
	recipe_btn = menu_btn[num_menu_btn] = new CMenu_button( string_120[lng], container_main, &Recipe_management );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[2] );
  num_menu_btn++;

	// PULSANTE AVVIO/ARRESTO INSPECTION  (num_menu_btn=3)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	inspection_btn = menu_btn[num_menu_btn] = new CMenu_button( string_150[lng], container_main, &Inspection_startstop  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[3] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;


	// * * * *     TERZA COLONNA      * * * *

	// PULSANTE UTILITA'/FUNZIONI  (num_menu_btn=4)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLC_SX;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_130[lng], container_main );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*450*/ );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[4] );
  num_menu_btn++;

	// PULSANTE DI USCITA  (num_menu_btn=5)
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
	exit_btn = menu_btn[num_menu_btn] = new CMenu_button( string_140[lng], container_main, &On_exit_btn );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[5] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;
  
	// * * * *     TO LEFT DISPLAY SWITCH  (num_menu_btn=6)    * * * *
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLD_SX;
	rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], container_main, &Change_view, -1 );
  menu_btn[num_menu_btn]->MoveWindow( &rett );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;


	// * * * *     LEFT BOTTOM BATCHES   (num_menu_btn=7)   * * * *
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_1300[lng], container_main );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;


  #undef BRD_SUP
  #undef COLA_SX
  #undef COLB_SX
  #undef COLC_SX
  #undef SPACE_X
  #undef SPACE_Y
  #undef BTN_DIMX
  #undef BTN_DIMY

	CParameter::dim_ctrl.cy      = 25; // Regolo la dimensione verticale
	CContainer_wnd::mode         = CContainer_wnd::top_left;
	CContainer_wnd::use_ext_rect = false;
	CMenu_button::hook_pos       = CMenu_button::top_right; // child di livello >1 allineati a destra


  // ***************************************************************************
  //
  //                        AUTOMATION PARAMETERS
  //
  // ***************************************************************************

  parcat_1 = L"PLC";
  parcat_2 = NULL;

  if ( IS_PC1 ) // ( !wcsncmp( PC_name, L"PC1", 3 ) ) 
  {

    // *******  SUB-MENU FOR CAROUSEL - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1510[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".PRODSPEED",               CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1532[lng], string_pcm[lng],   150.0,    10.0,  220.0, &file_manager  ); // Production speed (pcs/min)
    parameter[num_params++] = new CParameter( ".JOGSPEED",                CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1536[lng], string_pcm[lng],   150.0,    10.0,  220.0, &file_manager  ); // Jog low speed (pcs/min)
    parameter[num_params++] = new CParameter( ".ACCELERATION",            CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1210[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // acceleration
    parameter[num_params++] = new CParameter( ".DECELERATION",            CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1212[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // deceleration
    parameter[num_params++] = new CParameter( ".JERK",                    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1208[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // jerk
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.TARGET_HEIGHT_MM",  CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1504[lng], string_mm[lng], 455.3, 455.0, 655.0, &file_manager  ); // Carousel target height
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.ZEROPOS",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1540[lng], string_pcm[lng],  -0.850,    -4.0,    4.0, &file_manager  ); // Carousel zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "INPSCREW_AXIS.ZEROPOS",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1542[lng], string_pcm[lng],  -0.743,    -4.0,    4.0, &file_manager  ); // Input screw zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "TRACKER_AXIS.ZEROPOS",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1544[lng], string_pcm[lng],   3.500,    -4.0,    4.0, &file_manager  ); // Tracker zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";

    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.SECFDBK_ZEROPOS", CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1546[lng], string_unit[lng],   0.000,    -4.0,    4.0, &file_manager  ); // Cam zero position second feedback (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( "INPUT_BELT.SPEED",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1550[lng], string_hz[lng],     25.0,    0.0,   80.0, &file_manager  ); // Inverter speed
    parameter[num_params++]->format_spc = L"%.1lf";
    parameter[num_params  ] = new CParameter( "OUTPUT_BELT.SPEED",        CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1552[lng], string_hz[lng],     25.0,    0.0,   80.0, &file_manager  ); // Inverter speed
    parameter[num_params++]->format_spc = L"%.1lf";

    #if SERIAL_N==201400020 // Also add other 3 inverters speeds
      parameter[num_params  ] = new CParameter( "PRE_INPUT_BELT.SPEED",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1554[lng], string_hz[lng],     25.0,    0.0,   80.0, &file_manager  ); // Inverter speed
      parameter[num_params++]->format_spc = L"%.1lf";
      parameter[num_params  ] = new CParameter( "BACK_BELT.SPEED",              CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1556[lng], string_hz[lng],     25.0,    0.0,   80.0, &file_manager  ); // Inverter speed
      parameter[num_params++]->format_spc = L"%.1lf";
      parameter[num_params  ] = new CParameter( "INPUT_ROTARY_TABLE.SPEED",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1558[lng], string_hz[lng],     25.0,    0.0,   80.0, &file_manager  ); // Inverter speed
      parameter[num_params++]->format_spc = L"%.1lf";
    #endif


    num_menu_btn++;


    // *******  SUB-MENU FOR GRIPPERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1610[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1610[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".OPEN_OFFSET",       CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1620[lng], string_step[lng],   55.4,   -1.0,  60.1, &file_manager  ); // Grippers opening phase
    parameter[num_params++] = new CParameter( ".ANT_OPEN_MAX",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1622[lng], string_step[lng],    0.5,    0.0,   2.0, &file_manager  ); // Grippers opening advance 
    parameter[num_params++] = new CParameter( ".OPEN_PRESSURE",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1624[lng], string_unit[lng],    3.5,    0.0,   8.0, &file_manager  ); // Grippers opening pressure
    parameter[num_params++] = new CParameter( ".CLOSE_OFFSET",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1630[lng], string_step[lng],   46.7,   -1.0,  60.1, &file_manager  ); // Grippers closing phase
    parameter[num_params++] = new CParameter( ".ANT_CLOSE_MAX",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1632[lng], string_step[lng],    0.5,    0.0,   2.0, &file_manager  ); // Grippers closing advance 
    parameter[num_params++] = new CParameter( ".CLOSE_PRESSURE",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1634[lng], string_unit[lng],    1.5,    0.0,   8.0, &file_manager  ); // Grippers closing pressure 
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GRIPPERS",  CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1612[lng],              L"",      0,      0,       1, &file_manager ); // check opening/closing
    parameter[num_params++] = new CParameter( ".GROPEN_DELAY",      CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1614[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for opening error
    parameter[num_params++] = new CParameter( ".GRCLOSE_DELAY",     CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1616[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for closing error
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CLOSED_LOOP",     CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1636[lng],              L"",      0,      0,       1                ); // closed loop

    num_menu_btn++;

    // *******  SUB-MENU FOR DEVIATORS/OUTPUT - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1640[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1640[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); //380 );
    int main_menu_btn = num_menu_btn;

    parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",                  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_330[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    parameter[num_params++] = new CParameter( ".F_ENABLE_LIGHTCHK",              CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_332[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MAX_WIDTH",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1639[lng], string_step[lng],    0.9,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MIN_WIDTH",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1638[lng], string_step[lng],    0.1,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GOODS",                  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1660[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output goods
    parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS1",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1662[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects1 
    parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS2",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1664[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects2
   
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "PRODUCT_FLOW.LOAD_VAL",           CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1654[lng], string_unit[lng],      0,      0,  1023  ); // Loading initial value
    parameter[num_params++] = new CParameter( ".F_REJECT_SIMULATE",              CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1656[lng],              L"",      0,      0,     1  ); // rejects simulation
    num_menu_btn++;

    // DELAYS
    menu_btn[num_menu_btn] = new CMenu_button( string_1750[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1750[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
//    parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_330[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // persistent - not saved into recipes
//    menu_btn[num_menu_btn-1]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY1",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1752[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY2",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1754[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY1",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1756[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY2",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1758[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY1",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1760[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej2 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY2",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1762[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej2 full
    #ifdef INPUTBELT_SENSOR // Id defined set input sensor delays
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY1",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1764[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY2",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1766[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    #endif
    #if SERIAL_N==201400020 // Also add input empty delay parameters 
      parameter[num_params++] = new CParameter( "MACHINE.ROTARYTAB_DELAY1",      CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1767[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
      parameter[num_params++] = new CParameter( "MACHINE.ROTARYTAB_DELAY2",      CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1768[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    #endif
    #ifdef FALLEN_CONTAINER // If defined, use code to check fallen containers/set delay/enable alarm
      parameter[num_params++] = new CParameter( "ALARMS_CHECK.FALLEN_DELAY",     CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1769[lng], string_msec[lng],   300,   0, 1000000, &file_manager  ); // Delay to trigger fallen container alarm
    #endif      
    num_menu_btn++;

    // DISTANCES
    menu_btn[num_menu_btn] = new CMenu_button( string_1653[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1653[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV1",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1641[lng], string_step[lng],   77.50,  20.0, 100.0, &file_manager  ); // Distance input photosens - first deviator 
    parameter[num_params++] = new CParameter( ".DIST_DEV1_DEV2",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1645[lng], string_step[lng],    4.00,   1.0,  10.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_GOOD",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1642[lng], string_step[lng],   82.75,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ1",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1643[lng], string_step[lng],   87.77,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ2",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1644[lng], string_step[lng],   95.09,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWI",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1646[lng], string_step[lng],    2.3,    0.0,   4.0, &file_manager  ); // Main starwheel suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWO",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1648[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Main starwheel blowing lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDI",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1650[lng], string_step[lng],    1.3,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDO",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1652[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels blowing lenght (steps)
    num_menu_btn++;

/*    menu_btn[num_menu_btn] = new CMenu_button( string_1653[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1653[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.LOAD_VAL",           CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1654[lng], string_unit[lng],      0,      0,  1023  ); // Loading initial value
    num_menu_btn++; */

    // *******  SUB-MENU FOR FIRST SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn++] = new CMenu_button( string_1706[lng], menu_btn[0]->child );
    UINT nmbt = num_menu_btn-1;

    file_manager.Add_separator( string_1706[lng] );
    menu_btn[nmbt]->child->new_size( 320, 100 );

    menu_btn[nmbt]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "SEND_SPIN_PARAMETERS.RUN",                 CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1710[lng],              L"",      1,      0,     1                 ); // send data
 
    menu_btn[num_menu_btn++] = new CMenu_button( string_1710[lng],  menu_btn[nmbt]->child, &Send_spin_parameters      ); 

    // NTURN1/2/3: Into PLC is WORD number of full revolutions - Written into LAM 40963/67/71 as BYTE - LAM executes 17067 usteps per each turn (1:1.5 gear ratio)
    // VEL1/2/3:   Into PLC is WORD max speed in RPM - Written into LAM 40960/64/68 as WORD - LAM sets speeds 4x RPM - Gripper will rotate about 1.5 times faster bcs of gear ratio

    // REAL AVERAGE COEFFICIENT IS 1.52 (1.51-1.53) BECAUSE OF SOME ERROR IN LAM SPEED
    // FOR COSMETIC / F/D LINEAR CAMERAS AT 400 pcs/min full revolution in 320ms is required => 3.125 RPS = 187.5 RPM
    // SET 123-124 RPM INTO PLC/PC (500-530 value to be written into LAM speed register bcs 4x)

    menu_btn[nmbt]->child->posy += 30; // Set vertical position
    parameter[num_params++] = new CParameter( ".ALIGN_ENABLE",        CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1718[lng],              L"",      1,      0,     1, &file_manager  ); // enable alignment spin cycle
    parameter[num_params++] = new CParameter( ".F_CHECK_LAM",         CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1730[lng],              L"",      1,      0,     1, NULL           ); // enable LAM error detection
    parameter[num_params++] = new CParameter( ".SPIN1_ENABLE",        CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 1
    parameter[num_params++] = new CParameter( ".VEL1",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1720[lng], string_unit[lng],   1000,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC1",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1722[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC1",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1724[lng], string_unit[lng],   3000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN1",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY1",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance

    menu_btn[nmbt]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN1_LOOP.RUN",       CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle1
    parameter[num_params++] = new CParameter( "SPIN1_LOOP.RUN_LINE",  CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup
    

    // *******  SUB-MENU FOR SECOND SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1704[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1704[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN2_ENABLE",        CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 2
    parameter[num_params++] = new CParameter( ".VEL2",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    800,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC2",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC2",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN2",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     12,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY2",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN2_LOOP.RUN",       CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle2
    parameter[num_params++] = new CParameter( "SPIN2_LOOP.RUN_LINE",  CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup

    num_menu_btn++;


    // *******  SUB-MENU FOR THIRD SPINNING - num_menu_btn=  ******* 

    #ifdef HEEL_INSPECTION
      menu_btn[num_menu_btn] = new CMenu_button( string_1702[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1702[lng] );
    #else  // Normal - Top-cake
      menu_btn[num_menu_btn] = new CMenu_button( string_1705[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1705[lng] );
    #endif

    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); 

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN3_ENABLE",        CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 2
    parameter[num_params++] = new CParameter( ".VEL3",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    180,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC3",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC3",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN3",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],      4,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY3",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN",       CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for spin3
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN_LINE",  CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup

    num_menu_btn++;


    // *******  SUB-MENU FOR EJECTOR MASKS - num_menu_btn=  ******* 

	//Pour added for conditional compilation 20180927
	#ifndef REJECTION_SEPARATION

    menu_btn[num_menu_btn] = new CMenu_button( string_1668[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1668[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

	//Pour added for conditional compilation 20180927
	//#ifndef REJECTION_SEPARATION
	//    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_ENABLE_SPINCHK",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1666[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 

	//    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE1",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1770[lng],  L"",   0,   0,   1, &file_manager ); // Sidecake
    #ifdef NOTHIRDSTN_FDPC2 // ONLY on YAOPHARMA no TOPCAKE on PC2
      #if STN3==CAKETOP_ARDIRECT
        parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1772[lng],  L"",   0,   0,   1, &file_manager ); // Topcake/skinning (area scan)
      #else
        ADS_write_value( ".F_ENABLE_PARTICLE2", FALSE, CTYPE_BOOL8 ); // Force enabble of top-cake reject to false
      #endif
    #else
      //#if SERIAL_N==201400022 // Yaopharma top-cake changed to HEEL cameras
      #ifdef HEEL_INSPECTION
        parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1796[lng],  L"",   0,   0,   1, &file_manager ); // Heel
      #else  // Normal - Top-cake
        parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1772[lng],  L"",   0,   0,   1, &file_manager ); // Topcake
      #endif
    #endif
    parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1676[lng],  L"",   0,   0,   1, &file_manager ); // Sidewall
    parameter[num_params++] = new CParameter( ".F_ENABLE_TIPCAP",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1680[lng],  L"",   0,   0,   1, &file_manager ); // Cap 123
    parameter[num_params++] = new CParameter( ".F_ENABLE_FOCOLOR",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1774[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    parameter[num_params++] = new CParameter( ".F_ENABLE_BOTTOMA",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1776[lng],  L"",   0,   0,   1, &file_manager ); // Bottom A
    parameter[num_params++] = new CParameter( ".F_ENABLE_BOTTOMB",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1778[lng],  L"",   0,   0,   1, &file_manager ); // Bottom B

    #if STN1==CAKESIDE_ARBACK // Test AUSIA, add 4 area scan cameras side by side with existing line scan cam for sidewall
      parameter[num_params++] = new CParameter( ".F_ENABLE_WAISTLYRD",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1746[lng],  L"",   0,   0,   1, &file_manager ); // Waist/layered
    #endif 

    menu_btn[num_menu_btn]->child->posy += 6; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_DEV2_SPINCHK",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1667[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE1",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1780[lng],  L"",   0,   0,   1, &file_manager ); // Sidecake
    #ifdef NOTHIRDSTN_FDPC2 // ONLY on YAOPHARMA no TOPCAKE on PC2

      #if STN3==CAKETOP_ARDIRECT
        parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1782[lng],  L"",   0,   0,   1, &file_manager ); // Topcake/skinning (area scan)
      #else
        ADS_write_value( ".F_DEV2_PARTICLE2", FALSE, CTYPE_BOOL8 ); // Force enabble of top-cake reject to false
      #endif
    #else
      //#if SERIAL_N==201400022 // Yaopharma top-cake changed to HEEL cameras
      #ifdef HEEL_INSPECTION
        parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1798[lng],  L"",   0,   0,   1, &file_manager ); // Heel
      #else  // Normal - Top-cake
        parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1782[lng],  L"",   0,   0,   1, &file_manager ); // Topcake
      #endif
    #endif
    parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1689[lng],  L"",   0,   0,   1, &file_manager ); // Sidewall
    parameter[num_params++] = new CParameter( ".F_DEV2_TIPCAP",       CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1688[lng],  L"",   0,   0,   1, &file_manager ); // Cap 123
    parameter[num_params++] = new CParameter( ".F_DEV2_FOCOLOR",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1784[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    parameter[num_params++] = new CParameter( ".F_DEV2_BOTTOMA",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1786[lng],  L"",   0,   0,   1, &file_manager ); // Bottom A
    parameter[num_params++] = new CParameter( ".F_DEV2_BOTTOMB",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1788[lng],  L"",   0,   0,   1, &file_manager ); // Bottom B

    #if STN1==CAKESIDE_ARBACK // Test AUSIA, add 4 area scan cameras side by side with existing line scan cam for sidewall
      parameter[num_params++] = new CParameter( ".F_DEV2_WAISTLYRD",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1748[lng],  L"",   0,   0,   1, &file_manager ); // Waist/layered
    #endif 

    num_menu_btn++;

	#endif//Pour added 20180927

	#ifdef REJECTION_SEPARATION

	//Pour 20180927
	ADS_write_value(".F_ENABLE_SPINCHK", FALSE, CTYPE_BOOL8); // Force enable of SPIN reject TRAY1 to false
	ADS_write_value(".F_ENABLE_PARTICLE1", FALSE, CTYPE_BOOL8); // Force enable of PARTICLE1 reject to TRAY1 false
	ADS_write_value(".F_ENABLE_PARTICLE2", FALSE, CTYPE_BOOL8); // Force enable of PARTICLE2 reject to TRAY1 false
	ADS_write_value(".F_ENABLE_COSMETIC_1", FALSE, CTYPE_BOOL8); // Force enable of COSMETIC reject to TRAY1 false
	ADS_write_value(".F_ENABLE_COSMETIC_2", FALSE, CTYPE_BOOL8); // Force enable of COSMETIC reject to TRAY1 false
	ADS_write_value(".F_ENABLE_COSMETIC_3", FALSE, CTYPE_BOOL8); // Force enable of COSMETIC reject to TRAY1 false
	ADS_write_value(".F_ENABLE_COSMETIC_4", FALSE, CTYPE_BOOL8); // Force enable of COSMETIC reject to TRAY1 false
	//ADS_write_value(".F_ENABLE_TIPCAP", FALSE, CTYPE_BOOL8); // Force enable of CAP reject to TRAY1 false
	ADS_write_value(".F_ENABLE_TIPCAP_1", FALSE, CTYPE_BOOL8); // Force enable of CAP reject to TRAY1 false
	ADS_write_value(".F_ENABLE_TIPCAP_2", FALSE, CTYPE_BOOL8); // Force enable of CAP reject to TRAY1 false
	ADS_write_value(".F_ENABLE_TIPCAP_3", FALSE, CTYPE_BOOL8); // Force enable of CAP reject to TRAY1 false
	ADS_write_value(".F_ENABLE_FOCOLOR", FALSE, CTYPE_BOOL8); // Force enable of CAP reject to TRAY1 false
	ADS_write_value(".F_ENABLE_BOTTOMA", FALSE, CTYPE_BOOL8); // Force enable of BOTTOMA reject to TRAY1 false
	ADS_write_value(".F_ENABLE_BOTTOMB", FALSE, CTYPE_BOOL8); // Force enable of BOTTOMB reject to TRAY1 false
	ADS_write_value(".F_ENABLE_HGA", FALSE, CTYPE_BOOL8); // Force enable of HGA reject to TRAY1 false
	
	menu_btn[num_menu_btn] = new CMenu_button( string_1668[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1668[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    parameter[num_params++] = new CParameter( ".F_DEV2_SPINCHK",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1666[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE1",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1770[lng],  L"",   0,   0,   1, &file_manager ); // Sidecake
    parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1796[lng],  L"",   0,   0,   1, &file_manager ); // Topcake/skinning (area scan)// string 1772-1796 TOPCAKE-HELL
    parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1676[lng],  L"",   0,   0,   1, &file_manager ); // Sidewall
    parameter[num_params++] = new CParameter( ".F_DEV2_TIPCAP",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1680[lng],  L"",   0,   0,   1, &file_manager ); // Cap 123
    parameter[num_params++] = new CParameter( ".F_DEV2_FOCOLOR",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1774[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    parameter[num_params++] = new CParameter( ".F_DEV2_BOTTOMA",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1776[lng],  L"",   0,   0,   1, &file_manager ); // Bottom A
    parameter[num_params++] = new CParameter( ".F_DEV2_BOTTOMB",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1778[lng],  L"",   0,   0,   1, &file_manager ); // Bottom B
    menu_btn[num_menu_btn]->child->posy += 6; // Set vertical position
	
	num_menu_btn++;

	#endif	//REJECTION_SEPARATION
	//Pour added 20180927
//    parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1674[lng],  L"",   0,   0,   1, &file_manager ); // 
//    parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1675[lng],  L"",   0,   0,   1, &file_manager ); // 
//    parameter[num_params++] = new CParameter( ".F_DEV2_FILLING1",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1684[lng],  L"",   0,   0,   1, &file_manager ); // 
//    parameter[num_params++] = new CParameter( ".F_DEV2_FILLING2",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1685[lng],  L"",   0,   0,   1, &file_manager ); // 


    // *******  SUB-MENU FOR TRIGGERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1690[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1690[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params  ] = new CParameter( ".TIPCAP_TRIGGER_PHASE",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1691[lng], string_step[lng],    0.1, 0.0, 0.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".FOCOLOR_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1692[lng], string_step[lng],    0.2, 0.0, 0.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".BOTTOMA_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1693[lng], string_step[lng],    0.3, 0.0, 0.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".BOTTOMB_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1694[lng], string_step[lng],    0.4, 0.0, 0.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".PART1_TRIGGER_PHASE",      CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1695[lng], string_step[lng],    0.5, 0.0, 3.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".PART2_TRIGGER_PHASE",      CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1696a[lng], string_step[lng],   0.6, 0.0, 3.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";

    //#if SERIAL_N==201400022 // Yaopharma top-cake changed to HEEL cameras
    #ifdef HEEL_INSPECTION
      parameter[num_params  ] = new CParameter( ".COSM_TRIGGER_PHASE",       CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1696d[lng], string_step[lng],   0.7, 0.0, 3.95, &file_manager  );
    #else  // Normal - Top-cake
      parameter[num_params  ] = new CParameter( ".COSM_TRIGGER_PHASE",       CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1696b[lng], string_step[lng],   0.7, 0.0, 3.95, &file_manager  );
    #endif
    parameter[num_params++]->format_spc = L"%.2lf";
    num_menu_btn++;



    #ifdef HGA_LEAKTEST            // HGA components installed
      ADS_write_value( ".F_HGA_ENABLE", TRUE, CTYPE_BOOL8 ); // Force enable HGA
      menu_btn[num_menu_btn] = new CMenu_button( string_1950[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1950[lng] );

	  RECT area_0;
	  pView->menu_btn[pView->num_menu_btn]->child->GetWindowRect(&area_0);
	  area_0.top -= 100;
	  pView->menu_btn[pView->num_menu_btn]->child->MoveWindow(&area_0);
      menu_btn[num_menu_btn]->child->new_size( 320, 100 );
      parameter[num_params  ] = new CParameter( ".HGA_TRIGGER_PHASEA",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1952[lng], string_step[lng],   0.90,    0.0,  0.99, &file_manager  ); // Input phase for HGA trigger A 
      parameter[num_params++]->format_spc = L"%.2lf";
      menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
      parameter[num_params++] = new CParameter( ".DIST_LOAD_HGA",         CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1956[lng], string_step[lng],     72,    0.0,   110, &file_manager  ); // Distance load-hga
	  parameter[num_params++] = new CParameter( ".HGA_PERCENTAGE",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1957[lng], string_unit[lng],     1,     0.0,   100, &file_manager  ); // percentage of vials-hga

	  parameter[num_params++] = new CParameter( ".HGA_THRESHOLD",        CTYPE_REAL  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1958[lng], string_unit[lng],  15.0,      0.0, 21.0, &file_manager  ); // Threshold for accept/reject
	  parameter[num_params++] = new CParameter( ".Norma_Air_Set",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1959[lng], string_unit[lng],  10,      0, 1000, &file_manager  ); // Threshold for accept/reject
	  parameter[num_params++] = new CParameter( ".Norma_Min_Set",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1960[lng], string_unit[lng],  1,      0, 1000, &file_manager  ); // Threshold for accept/reject
	  parameter[num_params++] = new CParameter( ".Norma_Max_Set",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1961[lng], string_unit[lng],  100,      0, 1000, &file_manager  ); // Threshold for accept/reject

      //parameter[num_params++] = new CParameter( ".HGA_THRESHOLDH",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1958[lng], string_unit[lng],  15000,      0, 32000, &file_manager  ); // Threshold for accept/reject
      //parameter[num_params++] = new CParameter( ".HGA_THRESHOLDL",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1960[lng], string_unit[lng],  15000,      0, 32000, &file_manager  ); // Threshold for accept/reject
	  menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
      parameter[num_params++] = new CParameter( ".F_ENABLE_HGA",          CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1964[lng],  L"",   0,   0,   1, &file_manager ); // Sidewall
      parameter[num_params++] = new CParameter( ".F_DEV2_HGA",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1966[lng],  L"",   0,   0,   1, &file_manager ); // Sidewall
      num_menu_btn++;

	  //Pour 20170714 removed==================================
	  /*
      #ifdef HGA_DATAREC
        RECT area;
        menu_btn[num_menu_btn-1]->child->GetWindowRect(&area);
        area.top    -= 50;
        area.bottom -= 50;
        menu_btn[num_menu_btn-1]->child->MoveWindow(&area);
      
        menu_btn[num_menu_btn] = new CMenu_button( string_1970[lng], menu_btn[num_menu_btn-1]->child, &HGAdata_record );
        hgadatarec_btn = menu_btn[num_menu_btn];
        parameter[num_params++] = new CParameter( ".F_HGA_SAMPLE",        CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a[lng],  L"",   0,   0,   1, NULL ); // Enable HGA serial communication
        parameter[num_params++] = new CParameter( ".SCAN_MIN_SET",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976b[lng], string_unit[lng],     100,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".SCAN_MAX_SET",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976c[lng], string_unit[lng],     101,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".WAVETYPE_SET",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976d[lng], string_unit[lng],     102,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".NORMA_MIN_SET",       CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976e[lng], string_unit[lng],     103,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".NORMA_MAX_SET",       CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976f[lng], string_unit[lng],     104,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".NORMA_AIR_SET",       CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976g[lng], string_unit[lng],     105,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        num_menu_btn++;
      #endif
	  */
		//Pour 20170714 removed==================================

		//Pour 20170714 added_start
		#ifdef HGA_DATAREC
        RECT area;
        menu_btn[num_menu_btn-1]->child->GetWindowRect(&area);
        //area.top    -= 50;
        //area.bottom -= 50;
		//Pour 20170714
		area.top    -= 120;
        area.bottom -= 120;
		//Pour 20170714
        menu_btn[num_menu_btn-1]->child->MoveWindow(&area);
      
        menu_btn[num_menu_btn] = new CMenu_button( string_1970[lng], menu_btn[num_menu_btn-1]->child, &HGAdata_record );
        hgadatarec_btn = menu_btn[num_menu_btn];
		//Pour 20170719 added
		parameter[num_params++] = new CParameter( ".F_HGA_SAMPLE",        CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a[lng],  L"",   0,   0,   1, NULL ); // Enable HGA serial communication
		//++++++++++++++++++++
        parameter[num_params++] = new CParameter( ".EN_RS232COM",        CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a0[lng],  L"",   0,   0,   1, NULL ); // Enable HGA serial communication
		//Pour 20170714 added
		parameter[num_params++] = new CParameter( ".HGA_SAMPLING",       CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a1[lng],  L"",   0,   0,   1, NULL ); // Display wave
		parameter[num_params++] = new CParameter( ".HGA_DISPLAYWAVE",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a2[lng],  L"",   0,   0,   1, NULL ); // Enable HGA sampling_button
		//Pour 20170714 added
        parameter[num_params++] = new CParameter( ".HGA_WRITETYPE",      CTYPE_BYTE  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976b[lng], string_unit[lng],     101,    0.0,   255, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".HGA_WRITEADDRESS",   CTYPE_BYTE  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976c[lng], string_unit[lng],     102,    0.0,   255, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".HGA_WRITEDATA",      CTYPE_UNSIGNED |CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976d[lng], string_unit[lng],     103,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
		parameter[num_params++] = new CParameter( ".HGA_WRITECMD",       CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a4[lng],  L"",   0,   0,   1, NULL ); // Enable HGA write_button
        parameter[num_params++] = new CParameter( ".HGA_READTYPE",       CTYPE_BYTE  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976e[lng], string_unit[lng],     104,    0.0,   255, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".HGA_READADDRESS",    CTYPE_BYTE  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976f[lng], string_unit[lng],     105,    0.0,   255, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".HGA_READDATA",       CTYPE_UNSIGNED |CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976g[lng], string_unit[lng],     106,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
		parameter[num_params++] = new CParameter( ".HGA_READCMD",        CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a3[lng],  L"",   0,   0,   1, NULL ); // Enable HGA read_button
        num_menu_btn++;
      #endif
		//Pour 20170714 added_the end

    #endif





    // **************************************************************************************
    // *******                                                                        ******* 
    // *******       SUB-MENU FOR CALIBRATION/ADVANCED PARAMETERS - num_menu_btn=     ******* 
    // *******                                                                        ******* 
    // **************************************************************************************

    menu_btn[num_menu_btn] = new CMenu_button( string_1800[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1800[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    calibration_menu = menu_btn[num_menu_btn];
    main_menu_btn = num_menu_btn;
    num_menu_btn++;


    // ABC phases
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1809[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1809[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".INPUT_PHASE_A",                 CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1810[lng], string_step[lng],   1.50,    0.0,   3.0, &file_manager  ); // Input phase for A valves
    parameter[num_params++] = new CParameter( ".INPUT_PHASE_B",                 CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1812[lng], string_step[lng],   2.50,    0.0,   3.0, &file_manager  ); // Input phase for B valves
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCA",              CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1820[lng], string_step[lng],   2.50,    0.0,   4.0, &file_manager  ); // Input cam phase for A cameras
    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCB",              CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1822[lng], string_step[lng],   3.50,    0.0,   4.0, &file_manager  ); // Input cam phase for B cameras
    //parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCC",              CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1824[lng], string_step[lng],   0.50,    0.0,   4.0, &file_manager  ); // Input cam phase for C cameras
    num_menu_btn++;

    // Carousel height encoder parameters
    menu_btn[num_menu_btn] = new CMenu_button( string_1828[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1828[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MAX_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1830[lng], string_mm[lng],    562.0,  200.0,    700.0, &file_manager  ); // Maximum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MIN_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1832[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Minimum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_mm[lng],    557.0,  200.0,    700.0, &file_manager  ); // Top point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_ec[lng],  9480033,      0, 16777215, &file_manager  ); // Top point height (ec)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Low point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_ec[lng],  9569182,      0, 16777215, &file_manager  ); // Low point height (ec)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    num_menu_btn++;

    // OFFSETS
    menu_btn[num_menu_btn] = new CMenu_button( string_1859[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1848[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".SPIN1_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1850[lng], string_unit[lng],    8,    0,   15, &file_manager  ); // Spin1 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN2_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1852[lng], string_unit[lng],    4,    0,   15, &file_manager  ); // Spin2 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN3_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1854[lng], string_unit[lng],    1,    0,   15, &file_manager  ); // Spin3 offset (motors)
    parameter[num_params++] = new CParameter( ".ALIGN_OFFSET",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1856[lng], string_step[lng], 50.0,  0.0, 60.0, &file_manager  ); // Align offset (steps)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".BOTTOMA_OFS",                   CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1804[lng], string_step[lng], 50.0,  0.0, 60.0, &file_manager  ); // datarecord bottom A offset (heads)
    parameter[num_params++] = new CParameter( ".BOTTOMB_OFS",                   CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1805[lng], string_step[lng], 48.0,  0.0, 60.0, &file_manager  ); // datarecord bottom B offset (heads)
    parameter[num_params++] = new CParameter( ".PART1_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1806[lng], string_step[lng], 40.0,  0.0, 60.0, &file_manager  ); // datarecord particle1/sidewall offset (heads)
    parameter[num_params++] = new CParameter( ".PART2_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1807[lng], string_step[lng], 24.0,  0.0, 60.0, &file_manager  ); // datarecord particle2/sidecake offset (heads)
    parameter[num_params++] = new CParameter( ".COSM_OFS",                      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1808[lng], string_step[lng], 12.0,  0.0, 60.0, &file_manager  ); // datarecord cosmetic /sidewall offset (heads)


    num_menu_btn++;

    // DISTANCES
    menu_btn[num_menu_btn] = new CMenu_button( string_1858[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1848[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".DIST_LOAD_TCA",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1860[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and tip/cap cameras
    parameter[num_params++] = new CParameter( ".DIST_LOAD_FO",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1861[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and FO color camera
    parameter[num_params++] = new CParameter( ".DIST_LOAD_BA",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1862[lng], string_unit[lng],   18,    1,   35, &file_manager  ); // Distance between input and bottom a camera
    parameter[num_params++] = new CParameter( ".DIST_LOAD_BB",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1863[lng], string_unit[lng],   18,    1,   35, &file_manager  ); // Distance between input and bottom b camera
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1A",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1890[lng], string_unit[lng],    7,    1,   15, &file_manager  ); // Distance between input and first part A
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1B",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1892[lng], string_unit[lng],    7,    1,   15, &file_manager  ); // Distance between input and first part B
    //parameter[num_params++] = new CParameter( ".DIST_LOAD_P1C",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1894[lng], string_unit[lng],    8,    1,   15, &file_manager  ); // Distance between input and first part C
    //parameter[num_params++] = new CParameter( ".DIST_LOAD_P1D",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1896[lng], string_unit[lng],    8,    1,   15, &file_manager  ); // Distance between input and first part D
    num_menu_btn++;


    // *******  SUB-MENU FOR BATCH - num_menu_btn=7  ******* 
    menu_btn[num_menu_btn++] = new CMenu_button( string_1310[lng],  menu_btn[7]->child, &Reset_statistics      ); 

    if ( batch_mngr )
    {
      // batch start/stop
      menu_btn[num_menu_btn++] = new CMenu_button( string_1304[lng],  menu_btn[7]->child, &Batch_startstop     ); 
      batch_btn = menu_btn[num_menu_btn-1];
      if ( batch_mngr->current.status ) batch_btn->SetWindowTextW( string_1306[lng] );

      // batch print/report
      menu_btn[num_menu_btn++] = new CMenu_button( string_1308[lng],  menu_btn[7]->child, &Batch_report        ); 
    }

  }

  parcat_1 = L"INSPECTION";
  parcat_2 = NULL;

	parameter[num_params++] = new CParameter( &show_rejects,  CTYPE_BOOL8, 0, menu_btn[1]->child, string_2124[lng],   0,                1,  0,   0, NULL            );
	//parameter[num_params++] = new CParameter( &pseudo_colors, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2122[lng],   0,                1,  0,   0, NULL, &Set_LUT  );//Pour removed 20180927

  #ifdef NEWCAP_V30
    if ( IS_PC1 )
    {
      ADS_write_value( ".F_CAP_V30", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
//  	parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
      parameter[num_params++] = new CParameter( "TRIGGER_CAP_V30.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
    }
  #endif


  #ifdef NEWCAP_DOUBLE
    if ( IS_PC1 )
    {
      ADS_write_value( ".F_DOUBLE_CAP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  	  parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
      parameter[num_params++] = new CParameter( "TRIGGER_DOUBLE_CAP.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
    }
  #endif

  // -----------------------------   S O T T O M E N U     O F     E A C H     C A M E R A    ---------------------------------------------
	for ( UINT i=0 ; i<num_tlc ; i++ ) // Sotto gruppo parametri telecamere - Livello 1 - menu_btn[20,21,22]
  {
    wchar_t msg[50+1];
    swprintf( msg, 50, string_800[lng], i, camera[i].name );
	  menu_btn[num_menu_btn] = new CMenu_button( msg, menu_btn[1]->child );
	  menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    file_manager.Add_separator( msg );

    parcat_1 = msg;
    parcat_2 = NULL;

    #ifdef NEWCAP_DOUBLE
      if ( IS_PC1 && i<3 ) 
      {
//        parameter[num_params++] = new CParameter( &camera[i].shutter,  CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, NULL, i );
//        parameter[num_params++] = new CParameter( &camera[i].shutter2, CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2506[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, NULL, i );
        parameter[num_params++] = new CParameter( &camera[i].shutter,  CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );

        // keep creating to avoid problems with recipes, but HIDE shutter2 parameter windows
        parameter[num_params++] = new CParameter( &camera[i].shutter2, CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2506[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
        parameter[num_params-1]->pt_desc->ShowWindow( SW_HIDE );
        parameter[num_params-1]->pt_val->ShowWindow ( SW_HIDE );
        parameter[num_params-1]->pt_udm->ShowWindow ( SW_HIDE );
      }
      else
      {
//        parameter[num_params++] = new CParameter( &camera[i].shutter,  CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, NULL, i );
        parameter[num_params++] = new CParameter( &camera[i].shutter,    CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng], 1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
        parameter[num_params++] = new CParameter( &camera[i].frame_rate, CTYPE_REAL,  0, menu_btn[num_menu_btn]->child, string_2066[lng], string_fps [lng], 50.0,               0.0,            10000.0, &file_manager, &Set_camera, i );//Pour changed from 6000 to 10000
      }
    #else
      parameter[num_params++] = new CParameter( &camera[i].shutter,    CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
      parameter[num_params++] = new CParameter( &camera[i].frame_rate, CTYPE_REAL,  0, menu_btn[num_menu_btn]->child, string_2066[lng], string_fps [lng],   50.0,               0.0,            6000.0, &file_manager, &Set_camera, i );
    #endif

    num_menu_btn++;

    int menu_btn_par = num_menu_btn-1;
    if ( IS_PC1 ) 
    {
		CRect area;
      menu_btn[1]->child->GetWindowRect(&area);
      area.top    -= 10;
      area.bottom -= 10;
      menu_btn[1]->child->MoveWindow(&area);


      if ( i<3 ) // cap/seal dedicated parameters
      {
        parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
        if ( tip_insp[i] ) tip_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      if ( i>=3 && i<=4 )  // bottom dedicated parameters
      {
        parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
        if ( bottom_insp[i] ) bottom_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      if ( i==5 )  // FO color dedicated parameters (bottom-type if NEWCAP_ORALCAP)
      {
        parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
        if ( focolor_insp[i] ) focolor_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( bottom_insp [i] ) bottom_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( oralfo_insp [i] ) oralfo_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      if ( i>=6 && i<=7 )  // Sidewall dedicated parameters
      {
        //if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2340 );
      }

	  if ( i>=8 && i<=9 ) // SIDE CAKE LINEAR CAMERAS/CONTROL
      {
        if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2342 );
      }

	  if ( i>=10 && i<=11 ) // Top-cake
	  {
		if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2344 );
	  }


    }
	/*
    if ( IS_PC2 ) 
    {
      if ( i<4 ) // SIDE CAKE LINEAR CAMERAS/CONTROL
      {
        if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2342 );
      }
      else       // TOP CAKE LINEAR CAMERAS/CONTROL
      {
        //#if SERIAL_N==201400022 // Yaopharma top-cake changed to HEEL cameras
        #ifdef HEEL_INSPECTION
          if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2346 );
        #else  // Normal - Top-cake
          if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2344 );
        #endif

        if ( waistlayer_insp[i] ) waistlayer_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );

        if ( skinning_insp[i]   ) skinning_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );

      }
    }
	*/
  }

//  menu_btn[1]->child->posy += 10; // Set vertical position

  // particle start/stop learning - show learning
	//parameter[num_params++] = new CParameter( &learning,    CTYPE_BOOL8, 0, menu_btn[1]->child, string_750[lng], 0,  0,  0, 1, NULL, &Learn_models );//Pour removed 20180927

//  menu_btn[1]->child->posy += 10; // Set vertical position
//  menu_btn[num_menu_btn++] = new CMenu_button( string_2054[lng], menu_btn[1]->child, &Show_reflections );
//  menu_btn[num_menu_btn++] = new CMenu_button( string_2042[lng], menu_btn[1]->child, &Filter_reflections );


  #if STN3==CAKETOP_ARDIRECT
    if ( IS_PC2 )
    {
      CRect area;
      menu_btn[1]->child->GetWindowRect(&area);
      area.top    -= 70;
      area.bottom -= 70;
      menu_btn[1]->child->MoveWindow(&area);
    }
  #endif




  // ***************************************************************************
  //
	//               ADD FUNCTIONS/UTILITIES	( container menu_btn[4] )
  //
  // ***************************************************************************

/*  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], menu_btn[4]->child, &Change_view       );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;  */


  #ifdef ALARMLOG_SEPARATE // log alarms separately and add button to show them
    menu_btn[num_menu_btn++] = new CMenu_button( string_104[lng], menu_btn[4]->child, &Show_alarmlog  );
  #endif

  #ifdef NEW_LOGGER // log alarms separately and add button to show them
    menu_btn[num_menu_btn++] = new CMenu_button( string_3900[lng], menu_btn[4]->child, &Show_log  );
  #endif

  parameter[num_params++] = new CParameter( ".O_MACHINE_LIGHT", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_124[lng], L"", 0, 0, 1 ); // machine lights

  parameter[num_params++] = new CParameter( ".F_RUN_BELTS",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_128[lng], L"", 1, 0, 1 ); // run belt/s

  #ifdef VACUUM_PUMP // if defined add button connected to output 6th board/4th output
    parameter[num_params++] = new CParameter( ".O_VACUUM_PUMP",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_340[lng], L"", 1, 0, 1 ); // run vacuum pump
  #endif

  #if SERIAL_N==201400020 // Also add other 3 belts/rotary manual running commands
    parameter[num_params  ] = new CParameter( ".F_MR_PREINPUTBELT", CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_114[lng], L"", 0, 0, 1 ); 
    parameter[num_params  ] = new CParameter( ".F_MR_BYPASSBELT",   CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_110[lng], L"", 0, 0, 1 ); 
    parameter[num_params  ] = new CParameter( ".F_MR_ROTARYTABLE",  CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_112[lng], L"", 0, 0, 1 ); 
  #endif

  menu_btn[num_menu_btn] = new CMenu_button( string_160[lng], menu_btn[4]->child, &Movie_startstop   );
	movie_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  /*
  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], OPERATOR_LEVEL );//SUPERVISOR_LEVEL-OPERATOR_LEVEL on 20200512
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
  }
  */
    #ifdef NEW_PASSW_MNGR  // New users/passwords manager

    if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], OPERATOR_LEVEL );//SUPERVISOR_LEVEL
    num_menu_btn++;
    //menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
	menu_btn[num_menu_btn] = new CMenu_button( string_1036[lng], menu_btn[4]->child);
	password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
	
    file_manager.Add_separator( string_1036[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
	parameter[num_params++] = new CParameter( &password_mngr->chgpwd_days, CTYPE_INT ,  0, menu_btn[num_menu_btn]->child, string_1037[lng], string_day[lng],  90,  1,  360, &file_manager);
	password_mngr->insert_hmi( parameter[num_params-1], SUPERUSER_LEVEL );
	parameter[num_params++] = new CParameter( &password_mngr->logout_timeout, CTYPE_INT ,  0, menu_btn[num_menu_btn]->child, string_1038[lng], string_minute[lng],  3,  1,  30, &file_manager);
	password_mngr->insert_hmi( parameter[num_params-1], SUPERUSER_LEVEL );
	//parameter[num_params++] = new CParameter( &password_mngr->annotate_on, CTYPE_BOOL8, 0, menu_btn[num_menu_btn]->child, string_1035[lng], L"", 1, 0, 1 ); 
	num_menu_btn++;
    menu_btn[num_menu_btn] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
	num_menu_btn++;
  }

  #else
  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
  }
  #endif

  menu_btn[num_menu_btn] = new CMenu_button( string_170[lng], menu_btn[4]->child, &Save_images       );
  saveimages_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

//	parameter[num_params++] = new CParameter( &datarec_on, CTYPE_BOOL8, 0, menu_btn[4]->child, string_2130[lng], 0,  0,  0, 1, NULL, NULL );
	menu_btn[num_menu_btn] = new CMenu_button( string_304[lng], menu_btn[4]->child, &Data_record      );
  datarec_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

	menu_btn[num_menu_btn] = new CMenu_button( string_320[lng], menu_btn[4]->child, &Save_inspections  );
  saveinsp_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

	menu_btn[num_menu_btn] = new CMenu_button( string_324[lng], menu_btn[4]->child, &Save_sequences  );
  saveseq_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  #ifdef GRIPPER_STATISTICS
  if ( IS_PC1 )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_8150[lng], menu_btn[4]->child, &Grippers_statistics );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
    num_menu_btn++;
  }
  #endif



  //#ifdef _DEBUG
  if ( test_process )
  {
	  //menu_btn[num_menu_btn++] = new CMenu_button( string_172[lng],  menu_btn[4]->child, &Load_images       );
    menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[4]->child, &Test_process      ); 
    menu_btn[num_menu_btn++] = new CMenu_button( string_912[lng],  menu_btn[4]->child, &Sequence_acquire  ); 
  }
//#endif
  
 //  ASSERT ( menu_btn[19]==NULL );
 

}



/* Create menu for all functions/parameters */
void CChildView::Create_menu_TIVS_C20(void)
{

  CRect rett;
  GetClientRect( &rett );

	rett.top    = OFFS_COORDY;
  rett.bottom = rett.top + 360;
	rett.left   = OFFS_COORDY;
  rett.right  = rett.Width();

  num_container = 0;

	// --------        CONTENITORE BASE - Livello 0       ------------
	//container_main = new CContainer_main( "menu base", rett, this, IDD_CONTAINER );
	container_main = new CContainer_main( L"menu base", rett, this, IDD_CONTAINER );
	container_main->ShowWindow( SW_SHOW );

  #define BRD_SUP       14

  #define COLA_SX      440
  #define COLB_SX      (COLA_SX+SPACE_X+BTN_DIMX)
  #define COLC_SX      (COLB_SX+SPACE_X+BTN_DIMX)
  #define COLD_SX      (COLA_SX-SPACE_X-BTN_DIMX)

  #define SPACE_X       14
  #define SPACE_Y       14
  #define BTN_DIMX     250 // BUTTONS WIDTH
  #define BTN_DIMY      58 // BUTTONS HEIGHT



	// * * * *    PRIMA COLONNA      * * * *
	CMenu_button::hook_pos = CMenu_button::bottom_left; // child di livello 1 allineati sotto e a sinistra

	// AUTOMATION BUTTON (num_menu_btn=0)
  rett.top    =                BRD_SUP;
  rett.bottom = rett.top    + BTN_DIMY;
  rett.left   =                COLA_SX;
  rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_900[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[0] );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;

 	// INSPECTION BUTTON  (num_menu_btn=1)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_902[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*740*/ ); // regolo dimensione sottomenu parametri ispezione
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[1] );
  num_menu_btn++;

	// * * * *     SECONDA COLONNA      * * * *
	// PULSANTE RICETTE  (num_menu_btn=2)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLB_SX;
	rett.right  = rett.left   + BTN_DIMX;
	recipe_btn = menu_btn[num_menu_btn] = new CMenu_button( string_120[lng], container_main, &Recipe_management );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[2] );
  num_menu_btn++;

	// PULSANTE AVVIO/ARRESTO INSPECTION  (num_menu_btn=3)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	inspection_btn = menu_btn[num_menu_btn] = new CMenu_button( string_150[lng], container_main, &Inspection_startstop  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[3] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;


	// * * * *     TERZA COLONNA      * * * *

	// PULSANTE UTILITA'/FUNZIONI  (num_menu_btn=4)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLC_SX;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_130[lng], container_main );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*450*/ );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[4] );
  num_menu_btn++;

	// PULSANTE DI USCITA  (num_menu_btn=5)
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
	exit_btn = menu_btn[num_menu_btn] = new CMenu_button( string_140[lng], container_main, &On_exit_btn );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[5] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;
  
	// * * * *     TO LEFT DISPLAY SWITCH  (num_menu_btn=6)    * * * *
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLD_SX;
	rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], container_main, &Change_view, -1 );
  menu_btn[num_menu_btn]->MoveWindow( &rett );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;


	// * * * *     LEFT BOTTOM BATCHES   (num_menu_btn=7)   * * * *
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_1300[lng], container_main );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;


  #undef BRD_SUP
  #undef COLA_SX
  #undef COLB_SX
  #undef COLC_SX
  #undef SPACE_X
  #undef SPACE_Y
  #undef BTN_DIMX
  #undef BTN_DIMY

	CParameter::dim_ctrl.cy      = 25; // Regolo la dimensione verticale
	CContainer_wnd::mode         = CContainer_wnd::top_left;
	CContainer_wnd::use_ext_rect = false;
	CMenu_button::hook_pos       = CMenu_button::top_right; // child di livello >1 allineati a destra


  // ***************************************************************************
  //
  //                        AUTOMATION PARAMETERS
  //
  // ***************************************************************************

  parcat_1 = L"PLC";
  parcat_2 = NULL;

  if ( IS_PC1 ) // ( !wcsncmp( PC_name, L"PC1", 3 ) ) 
  {

    // *******  SUB-MENU FOR CAROUSEL - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1510[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".PRODSPEED",               CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1532[lng], string_pcm[lng],   150.0,    10.0,  200.0, &file_manager  ); // production speed
    parameter[num_params++] = new CParameter( ".JOGSPEED",                CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1536[lng], string_pcm[lng],   100.0,    10.0,  200.0, &file_manager  ); // Jog low speed (pcs/min)
    parameter[num_params++] = new CParameter( ".ACCELERATION",            CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1210[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // acceleration
    parameter[num_params++] = new CParameter( ".DECELERATION",            CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1212[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // deceleration
    parameter[num_params++] = new CParameter( ".JERK",                    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1208[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // jerk
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.TARGET_HEIGHT_MM",  CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1504[lng], string_mm[lng], 469.0, 370.0, 469.0, &file_manager  ); // Carousel target height
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.ZEROPOS",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1540[lng], string_pcm[lng],  -0.100,    -2.0,    2.0, &file_manager  ); // Carousel zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "INPSCREW_AXIS.ZEROPOS",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1542[lng], string_pcm[lng],  -0.100,    -2.0,    2.0, &file_manager  ); // Input screw zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "TRACKER_AXIS.ZEROPOS",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1544[lng], string_pcm[lng],   0.500,    -2.0,    2.0, &file_manager  ); // Tracker zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( "INPUT_BELT.SPEED",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1550[lng], string_hz[lng],     25.0,    0.0,   80.0, &file_manager  ); // Inverter speed
    parameter[num_params++]->format_spc = L"%.1lf";
    parameter[num_params  ] = new CParameter( "OUTPUT_BELT.SPEED",        CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1552[lng], string_hz[lng],     25.0,    0.0,   80.0, &file_manager  ); // Inverter speed
    parameter[num_params++]->format_spc = L"%.1lf";

    num_menu_btn++;

    // *******  SUB-MENU FOR GRIPPERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1610[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1610[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".OPEN_OFFSET",       CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1620[lng], string_step[lng],   28.4,   -1.0,  36.1, &file_manager  ); // Grippers opening phase
    parameter[num_params++] = new CParameter( ".ANT_OPEN_MAX",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1622[lng], string_step[lng],    0.5,    0.0,   2.0, &file_manager  ); // Grippers opening advance 
    parameter[num_params++] = new CParameter( ".OPEN_PRESSURE",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1624[lng], string_unit[lng],    3.5,    0.0,   8.0, &file_manager  ); // Grippers opening pressure
    parameter[num_params++] = new CParameter( ".CLOSE_OFFSET",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1630[lng], string_step[lng],   12.7,   -1.0,  36.1, &file_manager  ); // Grippers closing phase
    parameter[num_params++] = new CParameter( ".ANT_CLOSE_MAX",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1632[lng], string_step[lng],    0.5,    0.0,   2.0, &file_manager  ); // Grippers closing advance 
    parameter[num_params++] = new CParameter( ".CLOSE_PRESSURE",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1634[lng], string_unit[lng],    1.5,    0.0,   8.0, &file_manager  ); // Grippers closing pressure 
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GRIPPERS",  CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1612[lng],              L"",      0,      0,       1, &file_manager ); // check opening/closing
    parameter[num_params++] = new CParameter( ".GROPEN_DELAY",      CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1614[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for opening error
    parameter[num_params++] = new CParameter( ".GRCLOSE_DELAY",     CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1616[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for closing error
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CLOSED_LOOP",     CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1636[lng],              L"",      0,      0,       1                ); // closed loop

    num_menu_btn++;

    // *******  SUB-MENU FOR DEVIATORS/OUTPUT - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1640[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1640[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); //380 );
    int main_menu_btn = num_menu_btn;

    parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",                  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_330[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    parameter[num_params++] = new CParameter( ".F_ENABLE_LIGHTCHK",              CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_332[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MAX_WIDTH",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1639[lng], string_step[lng],    0.9,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MIN_WIDTH",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1638[lng], string_step[lng],    0.1,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GOODS",                  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1660[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output goods
    parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS1",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1662[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects1 
   
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_REJECT_SIMULATE",              CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1656[lng],              L"",      0,      0,     1  ); // rejects simulation
    num_menu_btn++;

    // DELAYS
    menu_btn[num_menu_btn] = new CMenu_button( string_1750[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1750[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY1",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1752[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY2",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1754[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY1",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1756[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY2",             CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1758[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1764[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
    parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1766[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    num_menu_btn++;

    // DISTANCES
    menu_btn[num_menu_btn] = new CMenu_button( string_1653[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1653[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV1",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1641[lng], string_step[lng],   77.50,  20.0, 100.0, &file_manager  ); // Distance input photosens - first deviator 
    parameter[num_params++] = new CParameter( ".DIST_LOAD_GOOD",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1642[lng], string_step[lng],   82.75,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ1",                 CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1643[lng], string_step[lng],   87.77,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWI",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1646[lng], string_step[lng],    2.3,    0.0,   4.0, &file_manager  ); // Main starwheel suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWO",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1648[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Main starwheel blowing lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDI",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1650[lng], string_step[lng],    1.3,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDO",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1652[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels blowing lenght (steps)
    num_menu_btn++;


    // *******  SUB-MENU FOR FIRST SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn++] = new CMenu_button( string_1742[lng], menu_btn[0]->child );
    UINT nmbt = num_menu_btn-1;

    file_manager.Add_separator( string_1742[lng] );
    menu_btn[nmbt]->child->new_size( 320, 100 );

    menu_btn[nmbt]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "SEND_SPIN_PARAMETERS.RUN",                 CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1710[lng],              L"",      1,      0,     1                 ); // send data
 
    menu_btn[num_menu_btn++] = new CMenu_button( string_1710[lng],  menu_btn[nmbt]->child, &Send_spin_parameters      ); 

    // NTURN1/2/3: Into PLC is WORD number of full revolutions - Written into LAM 40963/67/71 as BYTE - LAM executes 17067 usteps per each turn (1:1.5 gear ratio)
    // VEL1/2/3:   Into PLC is WORD max speed in RPM - Written into LAM 40960/64/68 as WORD - LAM sets speeds 4x RPM - Gripper will rotate about 1.5 times faster bcs of gear ratio

    // REAL AVERAGE COEFFICIENT IS 1.52 (1.51-1.53) BECAUSE OF SOME ERROR IN LAM SPEED
    // FOR COSMETIC / F/D LINEAR CAMERAS AT 400 pcs/min full revolution in 320ms is required => 3.125 RPS = 187.5 RPM
    // SET 123-124 RPM INTO PLC/PC (500-530 value to be written into LAM speed register bcs 4x)

    menu_btn[nmbt]->child->posy += 30; // Set vertical position
    parameter[num_params++] = new CParameter( ".ALIGN_ENABLE",        CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1718[lng],              L"",      1,      0,     1, &file_manager  ); // enable alignment spin cycle
    parameter[num_params++] = new CParameter( ".F_CHECK_LAM",         CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1730[lng],              L"",      1,      0,     1, NULL           ); // enable LAM error detection
    parameter[num_params++] = new CParameter( ".SPIN1_ENABLE",        CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 1
    parameter[num_params++] = new CParameter( ".VEL1",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1720[lng], string_unit[lng],   1000,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC1",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1722[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC1",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1724[lng], string_unit[lng],   3000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN1",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY1",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance

    menu_btn[nmbt]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN1_LOOP.RUN",       CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle1
    parameter[num_params++] = new CParameter( "SPIN1_LOOP.RUN_LINE",  CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[nmbt]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup
    

    // *******  SUB-MENU FOR SECOND SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1706[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1705[lng] );//Pour marked on 20201119
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN2_ENABLE",        CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 2
    parameter[num_params++] = new CParameter( ".VEL2",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    800,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC2",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC2",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN2",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     12,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY2",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN2_LOOP.RUN",       CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle2
    parameter[num_params++] = new CParameter( "SPIN2_LOOP.RUN_LINE",  CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup

    num_menu_btn++;


    // *******  SUB-MENU FOR THIRD SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1744[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1744[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); 

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN3_ENABLE",        CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 2
    parameter[num_params++] = new CParameter( ".VEL3",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    180,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC3",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC3",                CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN3",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],      4,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY3",              CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN",       CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for spin3
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN_LINE",  CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup

    num_menu_btn++;

    // *******  SUB-MENU FOR EJECTOR MASKS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1668[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1668[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

		RECT area_0;
	pView->menu_btn[pView->num_menu_btn]->child->GetWindowRect(&area_0);
	area_0.top -= 100;
	pView->menu_btn[pView->num_menu_btn]->child->MoveWindow(&area_0);
    //menu_btn[num_menu_btn]->child->new_size( 320, 100 );

//    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_ENABLE_SPINCHK",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1666[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 

//    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE1",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1790a[lng],  L"",   0,   0,   1, &file_manager ); // Sidecake
    parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1794[lng],  L"",   0,   0,   1, &file_manager ); // Topcake
    parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1792a[lng],  L"",   0,   0,   1, &file_manager ); // Sidewall
    parameter[num_params++] = new CParameter( ".F_ENABLE_TIPCAP",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1680[lng],  L"",   0,   0,   1, &file_manager ); // Cap 123
    parameter[num_params++] = new CParameter( ".F_ENABLE_FOCOLOR",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1774[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    parameter[num_params++] = new CParameter( ".F_ENABLE_BOTTOMA",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1776[lng],  L"",   0,   0,   1, &file_manager ); // Bottom A
    parameter[num_params++] = new CParameter( ".F_ENABLE_BOTTOMB",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1778[lng],  L"",   0,   0,   1, &file_manager ); // Bottom B
	parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1674[lng],  L"",   0,   0,   1, &file_manager ); // Filling1
    parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1675[lng],  L"",   0,   0,   1, &file_manager ); // Filling2
    //num_menu_btn++;


		//Pour 20201117
	#ifdef DOUBLE_REJET
    parameter[num_params++] = new CParameter( ".F_DEV2_SPINCHK",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1667[lng],  L"",   0,   0,   1, NULL  /*&file_manager*/  ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE1",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1790b[lng],  L"",   0,   0,   1, &file_manager ); // Sidecake
    parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1794b[lng],  L"",   0,   0,   1, &file_manager ); // Topcake
    parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1686[lng],  L"",   0,   0,   1, &file_manager ); // Sidewall
    parameter[num_params++] = new CParameter( ".F_DEV2_TIPCAP",       CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1688[lng],  L"",   0,   0,   1, &file_manager ); // Cap 123
    parameter[num_params++] = new CParameter( ".F_DEV2_FOCOLOR",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1784[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    parameter[num_params++] = new CParameter( ".F_DEV2_BOTTOMA",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1786[lng],  L"",   0,   0,   1, &file_manager ); // Bottom A
    parameter[num_params++] = new CParameter( ".F_DEV2_BOTTOMB",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1788[lng],  L"",   0,   0,   1, &file_manager ); // Bottom B
	parameter[num_params++] = new CParameter( ".F_DEV2_FILLING1",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1684a[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV2_FILLING2",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1685[lng],  L"",   0,   0,   1, &file_manager ); // 
	num_menu_btn++;
	#endif


    // *******  SUB-MENU FOR TRIGGERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1690[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1690[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params  ] = new CParameter( ".TIPCAP_TRIGGER_PHASE",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1691[lng], string_step[lng],    0.1, 0.0, 0.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".FOCOLOR_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1692[lng], string_step[lng],    0.2, 0.0, 0.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".BOTTOMA_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1693[lng], string_step[lng],    0.3, 0.0, 0.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".BOTTOMB_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1694[lng], string_step[lng],    0.4, 0.0, 0.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".PART1_TRIGGER_PHASE",      CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1695[lng], string_step[lng],    0.5, 0.0, 2.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".PART2_TRIGGER_PHASE",      CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1696a[lng], string_step[lng],   0.6, 0.0, 2.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".COSM_TRIGGER_PHASE",       CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1696b[lng], string_step[lng],   0.7, 0.0, 2.95, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    num_menu_btn++;


	    #ifdef HGA_LEAKTEST            // HGA components installed
      ADS_write_value( ".F_HGA_ENABLE", TRUE, CTYPE_BOOL8 ); // Force enable HGA
      menu_btn[num_menu_btn] = new CMenu_button( string_1950[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1950[lng] );

	  //RECT area_0;
	  pView->menu_btn[pView->num_menu_btn]->child->GetWindowRect(&area_0);
	  area_0.top -= 100;
	  pView->menu_btn[pView->num_menu_btn]->child->MoveWindow(&area_0);
      menu_btn[num_menu_btn]->child->new_size( 320, 100 );
      parameter[num_params  ] = new CParameter( ".HGA_TRIGGER_PHASEA",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1952[lng], string_step[lng],   0.90,    0.0,  0.99, &file_manager  ); // Input phase for HGA trigger A 
      parameter[num_params++]->format_spc = L"%.2lf";
      menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
      parameter[num_params++] = new CParameter( ".DIST_LOAD_HGA",         CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1956[lng], string_step[lng],     72,    0.0,   110, &file_manager  ); // Distance load-hga
	  parameter[num_params++] = new CParameter( ".HGA_PERCENTAGE",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1957[lng], string_unit[lng],     1,     0.0,   100, &file_manager  ); // percentage of vials-hga

	  parameter[num_params++] = new CParameter( ".HGA_THRESHOLD",        CTYPE_REAL  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1958[lng], string_unit[lng],  15.0,      0.0, 21.0, &file_manager  ); // Threshold for accept/reject
	  parameter[num_params++] = new CParameter( ".Norma_Air_Set",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1959[lng], string_unit[lng],  10,      0, 1000, &file_manager  ); // Threshold for accept/reject
	  parameter[num_params++] = new CParameter( ".Norma_Min_Set",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1960[lng], string_unit[lng],  1,      0, 1000, &file_manager  ); // Threshold for accept/reject
	  parameter[num_params++] = new CParameter( ".Norma_Max_Set",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1961[lng], string_unit[lng],  100,      0, 1000, &file_manager  ); // Threshold for accept/reject

      //parameter[num_params++] = new CParameter( ".HGA_THRESHOLDH",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1958[lng], string_unit[lng],  15000,      0, 32000, &file_manager  ); // Threshold for accept/reject
      //parameter[num_params++] = new CParameter( ".HGA_THRESHOLDL",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1960[lng], string_unit[lng],  15000,      0, 32000, &file_manager  ); // Threshold for accept/reject
	  menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
      parameter[num_params++] = new CParameter( ".F_ENABLE_HGA",          CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1964[lng],  L"",   0,   0,   1, &file_manager ); // Sidewall
      parameter[num_params++] = new CParameter( ".F_DEV2_HGA",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1966[lng],  L"",   0,   0,   1, &file_manager ); // Sidewall
      num_menu_btn++;

	  //Pour 20170714 removed==================================
	  /*
      #ifdef HGA_DATAREC
        RECT area;
        menu_btn[num_menu_btn-1]->child->GetWindowRect(&area);
        area.top    -= 50;
        area.bottom -= 50;
        menu_btn[num_menu_btn-1]->child->MoveWindow(&area);
      
        menu_btn[num_menu_btn] = new CMenu_button( string_1970[lng], menu_btn[num_menu_btn-1]->child, &HGAdata_record );
        hgadatarec_btn = menu_btn[num_menu_btn];
        parameter[num_params++] = new CParameter( ".F_HGA_SAMPLE",        CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a[lng],  L"",   0,   0,   1, NULL ); // Enable HGA serial communication
        parameter[num_params++] = new CParameter( ".SCAN_MIN_SET",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976b[lng], string_unit[lng],     100,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".SCAN_MAX_SET",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976c[lng], string_unit[lng],     101,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".WAVETYPE_SET",        CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976d[lng], string_unit[lng],     102,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".NORMA_MIN_SET",       CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976e[lng], string_unit[lng],     103,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".NORMA_MAX_SET",       CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976f[lng], string_unit[lng],     104,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".NORMA_AIR_SET",       CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976g[lng], string_unit[lng],     105,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
        num_menu_btn++;
      #endif
	  */
		//Pour 20170714 removed==================================

		//Pour 20170714 added_start
		#ifdef HGA_DATAREC
        RECT area;
        menu_btn[num_menu_btn-1]->child->GetWindowRect(&area);
        //area.top    -= 50;
        //area.bottom -= 50;
		//Pour 20170714
		area.top    -= 120;
        area.bottom -= 120;
		//Pour 20170714
        menu_btn[num_menu_btn-1]->child->MoveWindow(&area);
      
        menu_btn[num_menu_btn] = new CMenu_button( string_1970[lng], menu_btn[num_menu_btn-1]->child, &HGAdata_record );
        hgadatarec_btn = menu_btn[num_menu_btn];
		//Pour 20170719 added
		parameter[num_params++] = new CParameter( ".F_HGA_SAMPLE",        CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a[lng],  L"",   0,   0,   1, NULL ); // Enable HGA serial communication
		//++++++++++++++++++++
        parameter[num_params++] = new CParameter( ".EN_RS232COM",        CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a0[lng],  L"",   0,   0,   1, NULL ); // Enable HGA serial communication
		//Pour 20170714 added
		parameter[num_params++] = new CParameter( ".HGA_SAMPLING",       CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a1[lng],  L"",   0,   0,   1, NULL ); // Display wave
		parameter[num_params++] = new CParameter( ".HGA_DISPLAYWAVE",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a2[lng],  L"",   0,   0,   1, NULL ); // Enable HGA sampling_button
		//Pour 20170714 added
        parameter[num_params++] = new CParameter( ".HGA_WRITETYPE",      CTYPE_BYTE  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976b[lng], string_unit[lng],     101,    0.0,   255, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".HGA_WRITEADDRESS",   CTYPE_BYTE  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976c[lng], string_unit[lng],     102,    0.0,   255, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".HGA_WRITEDATA",      CTYPE_UNSIGNED |CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976d[lng], string_unit[lng],     103,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
		parameter[num_params++] = new CParameter( ".HGA_WRITECMD",       CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a4[lng],  L"",   0,   0,   1, NULL ); // Enable HGA write_button
        parameter[num_params++] = new CParameter( ".HGA_READTYPE",       CTYPE_BYTE  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976e[lng], string_unit[lng],     104,    0.0,   255, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".HGA_READADDRESS",    CTYPE_BYTE  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976f[lng], string_unit[lng],     105,    0.0,   255, &file_manager  ); // Scan minimum set   0 - 65535
        parameter[num_params++] = new CParameter( ".HGA_READDATA",       CTYPE_UNSIGNED |CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976g[lng], string_unit[lng],     106,    0.0,   65535, &file_manager  ); // Scan minimum set   0 - 65535
		parameter[num_params++] = new CParameter( ".HGA_READCMD",        CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn-1]->child, string_1976a3[lng],  L"",   0,   0,   1, NULL ); // Enable HGA read_button
        num_menu_btn++;
      #endif
		//Pour 20170714 added_the end

    #endif



    // **************************************************************************************
    // *******                                                                        ******* 
    // *******       SUB-MENU FOR CALIBRATION/ADVANCED PARAMETERS - num_menu_btn=     ******* 
    // *******                                                                        ******* 
    // **************************************************************************************

    menu_btn[num_menu_btn] = new CMenu_button( string_1800[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1800[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    calibration_menu = menu_btn[num_menu_btn];
    main_menu_btn = num_menu_btn;
    num_menu_btn++;


    // ABC phases
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1809[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1809[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".INPUT_PHASE_A",                 CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1810[lng], string_step[lng],   1.50,    0.0,   3.0, &file_manager  ); // Input phase for A valves
    parameter[num_params++] = new CParameter( ".INPUT_PHASE_B",                 CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1812[lng], string_step[lng],   2.50,    0.0,   3.0, &file_manager  ); // Input phase for B valves
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCA",              CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1820[lng], string_step[lng],   2.50,    0.0,   3.0, &file_manager  ); // Input cam phase for A cameras
//    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCB",              CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1822[lng], string_step[lng],   1.50,    0.0,   3.0, &file_manager  ); // Input cam phase for B cameras
//    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCC",              CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1824[lng], string_step[lng],   0.50,    0.0,   3.0, &file_manager  ); // Input cam phase for C cameras
    num_menu_btn++;

    // Carousel height encoder parameters
    menu_btn[num_menu_btn] = new CMenu_button( string_1828[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1828[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MAX_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1830[lng], string_mm[lng],    562.0,  200.0,    700.0, &file_manager  ); // Maximum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MIN_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1832[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Minimum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_mm[lng],    557.0,  200.0,    700.0, &file_manager  ); // Top point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_ec[lng],  9480033,      0, 16777215, &file_manager  ); // Top point height (ec)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Low point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_ec[lng],  9569182,      0, 16777215, &file_manager  ); // Low point height (ec)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    num_menu_btn++;

    // OFFSETS
    menu_btn[num_menu_btn] = new CMenu_button( string_1859[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1848[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".SPIN1_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1850[lng], string_unit[lng],    8,    0,   18, &file_manager  ); // Spin1 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN2_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1852[lng], string_unit[lng],    4,    0,   18, &file_manager  ); // Spin2 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN3_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1854[lng], string_unit[lng],    1,    0,   18, &file_manager  ); // Spin3 offset (motors)
    parameter[num_params++] = new CParameter( ".ALIGN_OFFSET",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1856[lng], string_step[lng], 20.0,  0.0, 36.0, &file_manager  ); // Align offset (steps)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".BOTTOMA_OFS",                   CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1804[lng], string_step[lng], 35.0,  0.0, 36.0, &file_manager  ); // datarecord bottom A offset (heads)
    parameter[num_params++] = new CParameter( ".BOTTOMB_OFS",                   CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1805[lng], string_step[lng],  6.0,  0.0, 36.0, &file_manager  ); // datarecord bottom B offset (heads)
    parameter[num_params++] = new CParameter( ".PART1_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1806[lng], string_step[lng], 30.0,  0.0, 36.0, &file_manager  ); // datarecord particle1/sidewall offset (heads)
    parameter[num_params++] = new CParameter( ".PART2_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1807[lng], string_step[lng], 24.0,  0.0, 36.0, &file_manager  ); // datarecord particle2/sidecake offset (heads)
    parameter[num_params++] = new CParameter( ".COSM_OFS",                      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1808[lng], string_step[lng], 12.0,  0.0, 36.0, &file_manager  ); // datarecord cosmetic /sidewall offset (heads)
    num_menu_btn++;

    // DISTANCES
    menu_btn[num_menu_btn] = new CMenu_button( string_1858[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1848[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".DIST_LOAD_TCA",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1860[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and tip/cap cameras
    parameter[num_params++] = new CParameter( ".DIST_LOAD_FO",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1861[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and FO color camera
    parameter[num_params++] = new CParameter( ".DIST_LOAD_BA",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1862[lng], string_unit[lng],   18,    1,   35, &file_manager  ); // Distance between input and bottom a camera
    parameter[num_params++] = new CParameter( ".DIST_LOAD_BB",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1863[lng], string_unit[lng],   18,    1,   35, &file_manager  ); // Distance between input and bottom b camera
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1A",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1890[lng], string_unit[lng],    7,    1,   15, &file_manager  ); // Distance between input and first part A
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1B",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1892[lng], string_unit[lng],    7,    1,   15, &file_manager  ); // Distance between input and first part B
//    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1C",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1894[lng], string_unit[lng],    8,    1,   15, &file_manager  ); // Distance between input and first part C
//    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1D",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1896[lng], string_unit[lng],    8,    1,   15, &file_manager  ); // Distance between input and first part D
    num_menu_btn++;


    // *******  SUB-MENU FOR BATCH - num_menu_btn=7  ******* 
    menu_btn[num_menu_btn++] = new CMenu_button( string_1310[lng],  menu_btn[7]->child, &Reset_statistics      ); 

    if ( batch_mngr )
    {
      // batch start/stop
      menu_btn[num_menu_btn++] = new CMenu_button( string_1304[lng],  menu_btn[7]->child, &Batch_startstop     ); 
      batch_btn = menu_btn[num_menu_btn-1];
      if ( batch_mngr->current.status ) batch_btn->SetWindowTextW( string_1306[lng] );

      // batch print/report
      menu_btn[num_menu_btn++] = new CMenu_button( string_1308[lng],  menu_btn[7]->child, &Batch_report        ); 
    }

  }



  parcat_1 = L"INSPECTION";
  parcat_2 = NULL;


	parameter[num_params++] = new CParameter( &liquid_mode, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2140[lng],   0,  1,  0,   0, &file_manager, &Set_lqfdmode  );
  lqfdmode_txt = parameter[num_params-1]->pt_flag;  // Puntatore al controllo checkbox
  lqfdmode_txt->add_onoff = FALSE; // disable ON/OFF/COLOR/DEPRESSED automatic changes


	parameter[num_params++] = new CParameter( &show_rejects,  CTYPE_BOOL8, 0, menu_btn[1]->child, string_2124[lng],   0,  1,  0,   0, NULL            );

	parameter[num_params++] = new CParameter( &pseudo_colors, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2122[lng],   0,  1,  0,   0, NULL, &Set_LUT  );

  #ifdef NEWCAP_DOUBLE
    if ( IS_PC1 )
    {
      ADS_write_value( ".F_DOUBLE_CAP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  	  parameter[num_params++] = new CParameter( &show_back_light,              CTYPE_BOOL8,                0, menu_btn[1]->child, string_2502[lng],    0,   1,  0,  0, NULL, &Set_LUT  );
      parameter[num_params++] = new CParameter( "TRIGGER_DOUBLE_CAP.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818 [lng],  L"",   0,  0,  1, NULL            ); // 
    }
  #endif

  // -----------------------------   S O T T O M E N U     O F     E A C H     C A M E R A    ---------------------------------------------
	for ( UINT i=0 ; i<num_tlc ; i++ ) // Sotto gruppo parametri telecamere - Livello 1 - menu_btn[20,21,22]
  {
    wchar_t msg[50+1];
    swprintf( msg, 50, string_800[lng], i, camera[i].name );
	  menu_btn[num_menu_btn] = new CMenu_button( msg, menu_btn[1]->child );
	  menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    file_manager.Add_separator( msg );

    parcat_1 = msg;
    parcat_2 = NULL;

    #ifdef NEWCAP_DOUBLE
      if ( IS_PC1 && i<3 ) 
      {
        parameter[num_params++] = new CParameter( &camera[i].shutter,  CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );

        // keep creating to avoid problems with recipes, but HIDE shutter2 parameter windows
        parameter[num_params++] = new CParameter( &camera[i].shutter2, CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2506[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
        parameter[num_params-1]->pt_desc->ShowWindow( SW_HIDE );
        parameter[num_params-1]->pt_val->ShowWindow ( SW_HIDE );
        parameter[num_params-1]->pt_udm->ShowWindow ( SW_HIDE );
      }
      else
      {
        parameter[num_params++] = new CParameter( &camera[i].shutter,    CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng], 1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
        parameter[num_params++] = new CParameter( &camera[i].frame_rate, CTYPE_REAL,  0, menu_btn[num_menu_btn]->child, string_2066[lng], string_fps [lng], 50.0,               0.0,            6000.0, &file_manager, &Set_camera, i );
      }
    #else
      parameter[num_params++] = new CParameter( &camera[i].shutter,    CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
      parameter[num_params++] = new CParameter( &camera[i].frame_rate, CTYPE_REAL,  0, menu_btn[num_menu_btn]->child, string_2066[lng], string_fps [lng],   50.0,               0.0,            6000.0, &file_manager, &Set_camera, i );
    #endif

    num_menu_btn++;

    int menu_btn_par = num_menu_btn-1;
    if ( IS_PC1 ) 
    {
      if ( i<3 ) // cap/seal dedicated parameters
      {
        parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
        if ( tip_insp[i] ) tip_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      if ( i>=3 && i<=4 )  // bottom dedicated parameters
      {
        parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
        if ( bottom_insp[i] ) bottom_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      if ( i==5 )  // FO color dedicated parameters
      {
        parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
        if ( focolor_insp[i] ) focolor_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      if ( i>=6 && i<=7 )  // Sidewall dedicated parameters //9 for first C20 machine, 7 for second machine
      {
        if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child              );
        if ( fillingl_insp[i] ) fillingl_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child              );
        //if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2340 );//Pour removed for second machine 20190319
      }
    }

    if ( IS_PC2 ) //Pour marked 20190319
    {

      if ( i<2 ) // SIDE CAKE LINEAR CAMERAS/CONTROL
      {
        if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2340 );//Pour changed from 2342 to 2340 for second machine 20190319
      }
	  //Pour added for testing on 20190411
	  if( i>=2 && i<=3 )
	  {
		if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2344 );
	  }

	  	if( i>=4 && i<=5 )
	  {
		if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2342 );
	  }

		if( i>=6 && i<=7 )
	  {
		if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child              );
	  }

	  //Pour added for testing on 20190411
	  /*
	  //Pour removed for testing on 20190411
      else     
      {
        if ( i<6 ) // TOP CAKE LINEAR CAMERAS/CONTROL// 4 for first machine, 6 for second machine
        {
			if( i<4 )
			{
				if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2344 );//Pour changed from 2340 to 2342 for second machine 20190319
			}
			else
          if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2342 );
        }
        else       // PARTICLE2
        {
          if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child              );
          //if ( fillingl_insp[i] ) fillingl_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child              );
        }
		//Pour removed for testing on 20190411
		
      }



/*      if ( i<2 ) // SIDE CAKE LINEAR CAMERAS/CONTROL
      {
        if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2342 );
      }
      else       // TOP CAKE LINEAR CAMERAS/CONTROL
      {
        if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child, string_2344 );
      } */
    }

  }


  menu_btn[1]->child->posy += 10; // Set vertical position

  /*
  //Pour removed learning function 20190318
  // particle start/stop learning - show learning
	parameter[num_params++] = new CParameter( &learning,    CTYPE_BOOL8, 0, menu_btn[1]->child, string_2052[lng], 0,  0,  0, 1, NULL, &Learn_reflections );

  // Add reflections sub-menu
  int refl_menu = num_menu_btn;
  menu_btn[num_menu_btn++] = new CMenu_button( string_2034[lng], menu_btn[1]->child );
	menu_btn[refl_menu]->child->new_size( 320, 100 );
  menu_btn[num_menu_btn++] = new CMenu_button( string_2054[lng], menu_btn[refl_menu]->child, &Show_reflections   );
  menu_btn[num_menu_btn++] = new CMenu_button( string_2042[lng], menu_btn[refl_menu]->child, &Filter_reflections );
  menu_btn[num_menu_btn++] = new CMenu_button( string_2036[lng], menu_btn[refl_menu]->child, &Export_reflections );
  menu_btn[num_menu_btn++] = new CMenu_button( string_2038[lng], menu_btn[refl_menu]->child, &Import_reflections );
  //Pour removed learning function 20190318
  */

  RECT area;
  menu_btn[1]->child->GetWindowRect(&area);
  area.top    -= 30;
  area.bottom -= 30;
  menu_btn[1]->child->MoveWindow(&area);




  // ***************************************************************************
  //
	//               ADD FUNCTIONS/UTILITIES	( container menu_btn[4] )
  //
  // ***************************************************************************

/*  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], menu_btn[4]->child, &Change_view       );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;  */


  parameter[num_params++] = new CParameter( ".O_MACHINE_LIGHT", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_124[lng], L"", 0, 0, 1 ); // machine lights

  parameter[num_params++] = new CParameter( ".F_RUN_BELTS",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_128[lng], L"", 1, 0, 1 ); // run belt/s

  #if SERIAL_N==201400020 // Also add other 3 belts/rotary manual running commands
    parameter[num_params  ] = new CParameter( ".F_MR_PREINPUTBELT", CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_114[lng], L"", 0, 0, 1 ); 
    parameter[num_params  ] = new CParameter( ".F_MR_BYPASSBELT",   CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_110[lng], L"", 0, 0, 1 ); 
    parameter[num_params  ] = new CParameter( ".F_MR_ROTARYTABLE",  CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_112[lng], L"", 0, 0, 1 ); 
  #endif

  menu_btn[num_menu_btn] = new CMenu_button( string_160[lng], menu_btn[4]->child, &Movie_startstop   );
	movie_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

    #ifdef ALARMLOG_SEPARATE // log alarms separately and add button to show them
    menu_btn[num_menu_btn++] = new CMenu_button( string_104[lng], menu_btn[4]->child, &Show_alarmlog  );
  #endif

  #ifdef NEW_LOGGER // log alarms separately and add button to show them
    menu_btn[num_menu_btn++] = new CMenu_button( string_3900[lng], menu_btn[4]->child, &Show_log  );
  #endif



  //Pour 20200728
   //Pour marked on 20200423
	#ifdef NEW_PASSW_MNGR
	if ( password_mngr )
  //if (logger)
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], OPERATOR_LEVEL );//SUPERVISOR_LEVEL changed to OPERATOR_LEVEL on 20200427
    num_menu_btn++;
    //menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
	menu_btn[num_menu_btn] = new CMenu_button( string_1036[lng], menu_btn[4]->child);
	password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
	
    file_manager.Add_separator( string_1036[lng] );

	// Add Password control sub-menu on 20200713
    int log_menu = num_menu_btn;//Pour
    menu_btn[log_menu]->child->new_size( 320, 100 );//Pour
	parameter[num_params++] = new CParameter( &password_mngr->chgpwd_days, CTYPE_INT ,  0, menu_btn[log_menu]->child, string_1037[lng], string_day[lng],  90,  1,  360, &file_manager);//Pour marked on 20200713
	password_mngr->insert_hmi( parameter[num_params-1], SUPERUSER_LEVEL );
	parameter[num_params++] = new CParameter( &password_mngr->logout_timeout, CTYPE_INT ,  0, menu_btn[log_menu]->child, string_1038[lng], string_minute[lng],  3,  1,  30, &file_manager);
	password_mngr->insert_hmi( parameter[num_params-1], SUPERUSER_LEVEL );
	parameter[num_params++] = new CParameter( &password_mngr->annotate_on, CTYPE_BOOL8, 0, menu_btn[log_menu]->child, string_1035[lng], L"", 0, 1, 1 ); 
	num_menu_btn++;
    menu_btn[num_menu_btn] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
	num_menu_btn++;
  }
  
  //Pour marked on 20200423
  #else
  
  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], OPERATOR_LEVEL );//SUPERVISOR_LEVEL changed to OPERATOR_LEVEL on 20200427
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
  }
  
  #endif

  //Pour 20200728


  menu_btn[num_menu_btn] = new CMenu_button( string_170[lng], menu_btn[4]->child, &Save_images       );
  saveimages_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

//	parameter[num_params++] = new CParameter( &datarec_on, CTYPE_BOOL8, 0, menu_btn[4]->child, string_2130[lng], 0,  0,  0, 1, NULL, NULL );
	menu_btn[num_menu_btn] = new CMenu_button( string_304[lng], menu_btn[4]->child, &Data_record      );
  datarec_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

	menu_btn[num_menu_btn] = new CMenu_button( string_320[lng], menu_btn[4]->child, &Save_inspections  );
  saveinsp_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

	menu_btn[num_menu_btn] = new CMenu_button( string_324[lng], menu_btn[4]->child, &Save_sequences  );
  saveseq_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  #ifdef GRIPPER_STATISTICS
  if ( IS_PC1 )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_8150[lng], menu_btn[4]->child, &Grippers_statistics );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
    num_menu_btn++;
  }
  #endif

  //#ifdef _DEBUG
  if ( test_process )
  {

	  //menu_btn[num_menu_btn++] = new CMenu_button( string_172[lng],  menu_btn[4]->child, &Load_images       );
    menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[4]->child, &Test_process      ); 
    menu_btn[num_menu_btn++] = new CMenu_button( string_912[lng],  menu_btn[4]->child, &Sequence_acquire  ); 
  }
//  #endif
  
 //  ASSERT ( menu_btn[19]==NULL );


 

}



/* Create menu for all functions/parameters */
void CChildView::Create_menu_TIVS_A20L(void)
{


  CRect rett;
  GetClientRect( &rett );

	rett.top    =    OFFS_COORDY;
  rett.bottom = rett.top + 360;
	rett.left   = OFFS_COORDY;
  rett.right  = rett.Width();

  num_container = 0;

	// --------        CONTENITORE BASE - Livello 0       ------------
	container_main = new CContainer_main( L"menu base", rett, this, IDD_CONTAINER );
	container_main->ShowWindow( SW_SHOW );


  #define BRD_SUP       14

  #define COLA_SX      440
  #define COLB_SX      (COLA_SX+SPACE_X+BTN_DIMX)
  #define COLC_SX      (COLB_SX+SPACE_X+BTN_DIMX)
  #define COLD_SX      (COLA_SX-SPACE_X-BTN_DIMX)

  #define SPACE_X       14
  #define SPACE_Y       14
  #define BTN_DIMX     250 // BUTTONS WIDTH
  #define BTN_DIMY      58 // BUTTONS HEIGHT


	// * * * *    PRIMA COLONNA      * * * *
	CMenu_button::hook_pos = CMenu_button::bottom_left; // child di livello 1 allineati sotto e a sinistra

	// AUTOMATION BUTTON (num_menu_btn=0)
  rett.top    =                BRD_SUP;
  rett.bottom = rett.top    + BTN_DIMY;
  rett.left   =                COLA_SX;
  rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_900[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[0] );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;

 	// INSPECTION BUTTON  (num_menu_btn=1)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_902[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*740*/ ); // regolo dimensione sottomenu parametri ispezione
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[1] );
  num_menu_btn++;

	// * * * *     SECONDA COLONNA      * * * *
	// PULSANTE RICETTE  (num_menu_btn=2)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLB_SX;
	rett.right  = rett.left   + BTN_DIMX;
	recipe_btn = menu_btn[num_menu_btn] = new CMenu_button( string_120[lng], container_main, &Recipe_management );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[2] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;

	// PULSANTE AVVIO/ARRESTO INSPECTION  (num_menu_btn=3)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	inspection_btn = menu_btn[num_menu_btn] = new CMenu_button( string_150[lng], container_main, &Inspection_startstop  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[3] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;


	// * * * *     TERZA COLONNA      * * * *

	// PULSANTE UTILITA'/FUNZIONI  (num_menu_btn=4)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLC_SX;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_130[lng], container_main );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*450*/ );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[4] );
  num_menu_btn++;

	// PULSANTE DI USCITA  (num_menu_btn=5)
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
	exit_btn = menu_btn[num_menu_btn] = new CMenu_button( string_140[lng], container_main, &On_exit_btn );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[5] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;
  
	// * * * *     TO LEFT DISPLAY SWITCH  (num_menu_btn=6)    * * * *
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLD_SX;
	rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], container_main, &Change_view, -1 );
  menu_btn[num_menu_btn]->MoveWindow( &rett );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;


	// * * * *     LEFT BOTTOM BATCHES   (num_menu_btn=7)   * * * *
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_1300[lng], container_main );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[6] );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;


  #undef BRD_SUP
  #undef COLA_SX
  #undef COLB_SX
  #undef COLC_SX
  #undef SPACE_X
  #undef SPACE_Y
  #undef BTN_DIMX
  #undef BTN_DIMY

	CParameter::dim_ctrl.cy      = 25; // Regolo la dimensione verticale
	CContainer_wnd::mode         = CContainer_wnd::top_left;
	CContainer_wnd::use_ext_rect = false;
	CMenu_button::hook_pos       = CMenu_button::top_right; // child di livello >1 allineati a destra


  // ***************************************************************************
  //
  //                        AUTOMATION PARAMETERS
  //
  // ***************************************************************************

  parcat_1 = L"PLC";
  parcat_2 = NULL;

  //if ( IS_PC1 ) // ( !wcsncmp( PC_name, L"PC1", 3 ) ) 
  {

    // *******  SUB-MENU FOR CAROUSEL - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1510[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".PRODSPEED",                    CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1532[lng], string_pcm[lng],   200.0,    10.0,  220.0, &file_manager  ); // Jog high speed (pcs/min)
    //if ( password_mngr ) password_mngr->insert_hmi( parameter[num_params-1], pwd_levels[7] );

    parameter[num_params++] = new CParameter( ".JOGSPEED",                     CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1536[lng], string_pcm[lng],   150.0,    10.0,  220.0, &file_manager  ); // Jog low speed (pcs/min)
    parameter[num_params++] = new CParameter( ".ACCELERATION",                 CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1210[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // acceleration
    parameter[num_params++] = new CParameter( ".DECELERATION",                 CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1212[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // deceleration
    parameter[num_params++] = new CParameter( ".JERK",                         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1208[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // jerk
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.TARGET_HEIGHT_MM",  CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1504[lng], string_mm[lng], 480.3, 457.0, 520.0, &file_manager  ); // Carousel target height
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.ZEROPOS",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1540[lng], string_unit[lng],   0.50,    -2.0,    2.0, &file_manager  ); // Carousel zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "INPSCREW_AXIS.ZEROPOS",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1542[lng], string_unit[lng],   0.50,    -2.0,    2.0, &file_manager  ); // Input screw zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "TRACKER_AXIS.ZEROPOS",          CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1544[lng], string_unit[lng],   0.50,    -2.0,    2.0, &file_manager  ); // Tracker zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "HVTRANSPORT_AXIS.ZEROPOS",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3510[lng], string_unit[lng],   0.50,    -2.0,    2.0, &file_manager  ); // HV transport zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
		//Pour added for new sever motor 20180127
	parameter[num_params  ] = new CParameter( "HVSORTING_AXIS.ZEROPOS",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3510a[lng], string_unit[lng],   0.50,    -2.0,    2.0, &file_manager  ); // HV transport zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";

    
//    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.SECFDBK_ZEROPOS", CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1546[lng], string_unit[lng],   0.000,    -4.0,    4.0, &file_manager  ); // Cam zero position second feedback (units)
//    parameter[num_params++]->format_spc = L"%.3lf";
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( "INPUT_BELT.SPEED",              CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1550[lng], string_hz[lng],     25.0,     0.0,   80.0, &file_manager  ); // Input belt speed
    parameter[num_params++]->format_spc = L"%.1lf";

    parameter[num_params++] = new CParameter( "DEVIBRATOR.SPEED",              CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3570[lng], string_percent[lng],  25.0,   0.0,  100.0, &file_manager  ); // Devibrator speed in percent

    num_menu_btn++;

    // *******  SUB-MENU FOR HV LT - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_3520[lng], menu_btn[0]->child );
    hv_menu = menu_btn[num_menu_btn];
    file_manager.Add_separator( string_3520[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".F_HV_ENABLE",                 CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3504[lng],              L"",      1,      0,        1, &file_manager  ); // enable HV functions into PLC
    //Pour removed 20180913 
    //parameter[num_params  ] = new CParameter( "HV_MANAGER.HVREAD_A",          CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3530[lng], string_unit[lng],   0.50,    0.01,    0.99, &file_manager  ); // HV read phase A
    //parameter[num_params++]->format_spc = L"%.2lf";
//    parameter[num_params  ] = new CParameter( "HV_MANAGER.HVREAD_B",          CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3532[lng], string_unit[lng],   0.50,    0.01,    0.99, &file_manager  ); // HV read phase A
    parameter[num_params  ] = new CParameter( "HV_MANAGER.HVREAD_W",          CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3533[lng], string_unit[lng],   0.50,    0.1,     0.9,  &file_manager  ); // HV read phase width
    parameter[num_params++]->format_spc = L"%.2lf";

/*    parameter[num_params++] = new CParameter( ".HVBLOCK_1.O_VOLTAGE_SET",     CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3540[lng], string_unit[lng],   0,    0,  32767, &file_manager  ); // HV set voltage for HV1
    parameter[num_params++] = new CParameter( ".HVBLOCK_2.O_VOLTAGE_SET",     CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3542[lng], string_unit[lng],   0,    0,  32767, &file_manager  ); // HV set voltage for HV2
    parameter[num_params++] = new CParameter( ".HVBLOCK_3.O_VOLTAGE_SET",     CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3544[lng], string_unit[lng],   0,    0,  32767, &file_manager  ); // HV set voltage for HV3 */

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( ".HVBLOCK_1.O_VOLTAGE_SET",   CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3540[lng], string_kvolt[lng],   0,  0.0,   50.0, &file_manager  ); // HV set voltage for HV1
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_2.O_VOLTAGE_SET",   CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3542[lng], string_kvolt[lng],   0,  0.0,   50.0, &file_manager  ); // HV set voltage for HV2
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_3.O_VOLTAGE_SET",   CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3544[lng], string_kvolt[lng],   0,  0.0,   50.0, &file_manager  ); // HV set voltage for HV3
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_4.O_VOLTAGE_SET",   CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3546[lng], string_kvolt[lng],   0,  0.0,   50.0, &file_manager  ); // HV set voltage for HV4
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    /*
    parameter[num_params++] = new CParameter( ".HVBLOCK_1.THRESHOLD",       CTYPE_INT|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3550[lng], string_unit[lng],   0,  0.0, 20000.0, &file_manager  ); // Threshold set for HV1
    parameter[num_params++] = new CParameter( ".HVBLOCK_2.THRESHOLD",       CTYPE_INT|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3552[lng], string_unit[lng],   0,  0.0, 20000.0, &file_manager  ); // Threshold set for HV2
    parameter[num_params++] = new CParameter( ".HVBLOCK_3.THRESHOLD",       CTYPE_INT|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3554[lng], string_unit[lng],   0,  0.0, 20000.0, &file_manager  ); // Threshold set for HV3
    parameter[num_params++] = new CParameter( ".HVBLOCK_4.THRESHOLD",       CTYPE_INT|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3556[lng], string_unit[lng],   0,  0.0, 20000.0, &file_manager  ); // Threshold set for HV4
    parameter[num_params++] = new CParameter( "HV_MANAGER.MAX_ERROR",       CTYPE_INT|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_2080[lng], string_unit[lng], 900,  0.0, 32000.0, &file_manager  ); // Maximum overall error
    */

	//Pour removed 20180913
	/*
    parameter[num_params  ] = new CParameter( ".HVBLOCK_1.THRESHOLD",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3550[lng], string_ma[lng],   1,  0.0, 20.0, &file_manager  ); // Threshold set for HV1
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 20.0, 32767 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_2.THRESHOLD",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3552[lng], string_ma[lng],   1,  0.0, 20.0, &file_manager  ); // Threshold set for HV2
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 20.0, 32767 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_3.THRESHOLD",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3554[lng], string_ma[lng],   1,  0.0, 20.0, &file_manager  ); // Threshold set for HV3
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 20.0, 32767 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_4.THRESHOLD",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3556[lng], string_ma[lng],   1,  0.0, 20.0, &file_manager  ); // Threshold set for HV4
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 20.0, 32767 );
    parameter[num_params  ] = new CParameter( "HV_MANAGER.MAX_ERROR",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_2080[lng], string_ma[lng],  10,  0.0, 20.0, &file_manager  ); // Maximum overall error
    hvmax_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 20.0, 32767 );
	*/
	//Pour removed 20180913

	//Pour marked to be added 20180913
	parameter[num_params  ] = new CParameter( ".HVBLOCK_1.THRESHOLD_MIN",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3550[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV1 min
	hv1min_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 32767 );
	parameter[num_params  ] = new CParameter( ".HVBLOCK_1.THRESHOLD_MAX",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3550a[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV1 max
	hv1max_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 32767 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_2.THRESHOLD_MIN",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3552[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV2 min
	hv2min_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 32767 );
	parameter[num_params  ] = new CParameter( ".HVBLOCK_2.THRESHOLD_MAX",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3552a[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV2 max
	hv2max_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 32767 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_3.THRESHOLD_MIN",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3554[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV3 min
	hv3min_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 32767 );
	parameter[num_params  ] = new CParameter( ".HVBLOCK_3.THRESHOLD_MAX",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3554a[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV3 max
	hv3max_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 32767 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_4.THRESHOLD_MIN",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3556[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV4 min
	hv4min_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 32767 );
	parameter[num_params  ] = new CParameter( ".HVBLOCK_4.THRESHOLD_MAX",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3556a[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV4 max
	hv4max_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 32767 );

//    parameter[num_params++]->format_spc = L"%.2lf";
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params  ] = new CParameter( "HVSPIN_MOTOR.SPEED",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3522[lng], string_hz[lng],  25.0,  0.0,   80.0, &file_manager  ); // Spinning speed of HV belt
    parameter[num_params++]->format_spc = L"%.1lf";

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_HV1_LOOP",                 CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3506[lng],         L"",      1,      0,      1, &file_manager  ); // enable HV functions into PLC
    f_hvloop_a = parameter[num_params-1];
	//Pour added 20180913
	parameter[num_params++] = new CParameter( ".F_HV2_LOOP",                 CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3506b[lng],         L"",      1,      0,      1, &file_manager  ); // enable HV functions into PLC
    f_hvloop_b = parameter[num_params-1];
	parameter[num_params++] = new CParameter( ".F_HV3_LOOP",                 CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3506c[lng],         L"",      1,      0,      1, &file_manager  ); // enable HV functions into PLC
    f_hvloop_c = parameter[num_params-1];
	parameter[num_params++] = new CParameter( ".F_HV4_LOOP",                 CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3506d[lng],         L"",      1,      0,      1, &file_manager  ); // enable HV functions into PLC
    f_hvloop_d = parameter[num_params-1];
	//Pour added 20180913


    RECT area;
    menu_btn[num_menu_btn]->child->GetWindowRect(&area);
    area.top -= 210;
	area.bottom -= 210;
    menu_btn[num_menu_btn]->child->MoveWindow(&area);

    num_menu_btn++;

    menu_btn[num_menu_btn] = new CMenu_button( string_3560[lng], menu_btn[num_menu_btn-1]->child, &HVdata_record );
    hvdatarec_btn = menu_btn[num_menu_btn];
    num_menu_btn++;



    // *******  SUB-MENU FOR GRIPPERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1610[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1610[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".OPEN_OFFSET",       CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1620[lng], string_step[lng],   10.0,    0.0,    36.0, &file_manager  ); // Grippers opening phase
    parameter[num_params++] = new CParameter( ".ANT_OPEN_MAX",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1622[lng], string_step[lng],    0.5,    0.0,     2.0, &file_manager  ); // Grippers opening advance 
    parameter[num_params++] = new CParameter( ".OPEN_PRESSURE",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1624[lng], string_unit[lng],    3.5,    0.0,     8.0, &file_manager  ); // Grippers opening pressure
    parameter[num_params++] = new CParameter( ".CLOSE_OFFSET",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1630[lng], string_step[lng],   20.0,    0.0,    36.0, &file_manager  ); // Grippers closing phase
    parameter[num_params++] = new CParameter( ".ANT_CLOSE_MAX",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1632[lng], string_step[lng],    0.5,    0.0,     2.0, &file_manager  ); // Grippers closing advance 
    parameter[num_params++] = new CParameter( ".CLOSE_PRESSURE",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1634[lng], string_unit[lng],    1.5,    0.0,     8.0, &file_manager  ); // Grippers closing pressure 
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GRIPPERS",  CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1612[lng],              L"",      0,      0,       1, &file_manager ); // check opening/closing
    parameter[num_params++] = new CParameter( ".GROPEN_DELAY",      CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1614[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for opening error
    parameter[num_params++] = new CParameter( ".GRCLOSE_DELAY",     CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1616[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for closing error
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params  ] = new CParameter( ".F_CLOSED_LOOP",     CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1636[lng],              L"",      0,      0,       1                ); // closed loop
    f_closed_loop = parameter[num_params++];
    ASSERT( f_closed_loop==parameter[num_params-1] );

    num_menu_btn++;

    // *******  SUB-MENU FOR DEVIATORS/OUTPUT - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1640[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1640[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); //380 );
    int main_menu_btn = num_menu_btn;

    parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_330[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
	//Pour added for seperately doors alarm 20180913
	parameter[num_params++] = new CParameter( ".F_ALARM_HVDOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_330a[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    parameter[num_params++] = new CParameter( ".F_ENABLE_LIGHTCHK",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_332[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MAX_WIDTH", CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1639[lng], string_step[lng],    0.9,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MIN_WIDTH", CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1638[lng], string_step[lng],    0.1,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GOODS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1660[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output goods
    parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS1",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1662[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects1 
    parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS2",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1664[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects2

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "PRODUCT_FLOW.LOAD_VAL",           CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1654[lng], string_unit[lng],      0,      0,  1023  ); // Loading initial value
    parameter[num_params++] = new CParameter( ".F_REJECT_SIMULATE",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1656[lng],              L"",      0,      0,     1  ); // rejects simulation
    num_menu_btn++;

    // DELAYS
    menu_btn[num_menu_btn] = new CMenu_button( string_1750[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1750[lng] );
    //menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    //parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_330[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn-1]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1752[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1754[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1756[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1758[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1760[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej2 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1762[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej2 full
	//Pour added for MAX quantity of HVrejection 20180525
	parameter[num_params++] = new CParameter( ".MAX_CONTINUOUSREJECTS",          CTYPE_INT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1762b[lng], string_step[lng], 20,   0, 100, &file_manager  ); // Max number of HV rejection

    #ifdef INPUTBELT_SENSOR // Id defined set input sensor delays
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY1",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1764[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY2",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1766[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    #endif
    #ifdef FALLEN_CONTAINER // If defined, use code to check fallen containers/set delay/enable alarm
      parameter[num_params++] = new CParameter( "ALARMS_CHECK.FALLEN_DELAY",     CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1769[lng], string_msec[lng],   300,   0, 1000000, &file_manager  ); // Delay to trigger fallen container alarm
    #endif      
    num_menu_btn++;

    // DISTANCES
    menu_btn[num_menu_btn] = new CMenu_button( string_1653[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1653[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV1",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1641[lng], string_step[lng],   77.50,  20.0, 100.0, &file_manager  ); // Distance input photosens - first deviator
	parameter[num_params++] = new CParameter( ".DIST_DEV1_DEV2",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1645[lng], string_step[lng],   4.00,  1.0, 10.0, &file_manager  ); // Distance input photosens - first deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV3",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1647[lng], string_step[lng],   77.50,  20.0, 100.0, &file_manager  ); // Distance input photosens - first deviator 

    parameter[num_params++] = new CParameter( ".DIST_LOAD_GOOD",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1642[lng], string_step[lng],   82.75,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ1",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1643[lng], string_step[lng],   87.77,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ2",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1644[lng], string_step[lng],   95.09,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
	//Pour added 20210116
    //parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ3",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1644b[lng], string_step[lng],   95.09,   1.0, 200.0, &file_manager  ); // Distance first deviator - HV reject deviator
	parameter[num_params++] = new CParameter( ".DIST_LOAD_HVGOOD",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1644c[lng], string_step[lng],   95.09,   1.0, 200.0, &file_manager  ); // Distance first deviator - HV good deviator
	//Pour added 20210116

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWI",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1646[lng], string_step[lng],    2.3,    0.0,   4.0, &file_manager  ); // Main starwheel suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWO",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1648[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Main starwheel blowing lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDI",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1650[lng], string_step[lng],    1.3,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDO",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1652[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels blowing lenght (steps)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_DV2RI",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1988[lng], string_step[lng],    2.3,    0.0,   4.0, &file_manager  ); // Main starwheel suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_DV2RO",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1990[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Main starwheel blowing lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_DV2LI",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1992[lng], string_step[lng],    1.3,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_DV2LO",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1994[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels blowing lenght (steps)
    num_menu_btn++;

    // *******  SUB-MENU FOR FIRST SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1700[lng], menu_btn[0]->child );
    //UINT nmbt = num_menu_btn-1;

    file_manager.Add_separator( string_1700[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "SEND_SPIN_PARAMETERS.RUN",                 CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1710[lng],              L"",      1,      0,     1                 ); // send data
 
    menu_btn[num_menu_btn+1]  = new CMenu_button( string_1710[lng],  menu_btn[num_menu_btn]->child, &Send_spin_parameters      ); // ATTENTION TO num_menu_btn!!!

    menu_btn[num_menu_btn]->child->posy += 30; // Set vertical position
    parameter[num_params++] = new CParameter( ".ALIGN_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1718[lng],              L"",      1,      0,     1, &file_manager  ); // enable alignment spin cycle
    parameter[num_params++] = new CParameter( ".F_CHECK_LAM",            CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1730[lng],              L"",      1,      0,     1, NULL           ); // enable LAM error detection
    parameter[num_params++] = new CParameter( ".SPIN1_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 1
    parameter[num_params++] = new CParameter( ".VEL1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],   1000,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   3000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN1",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY1",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN1_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle1
    num_menu_btn++;

    num_menu_btn++; // for send_spin_parameters


    // *******  SUB-MENU FOR SECOND SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1701[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1701[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN2_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 2
    parameter[num_params++] = new CParameter( ".VEL2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    800,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN2",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     12,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY2",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN2_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle2
    num_menu_btn++;


    // *******  SUB-MENU FOR THIRD SPINNING - num_menu_btn=  ******* 
    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM
      menu_btn[num_menu_btn] = new CMenu_button( string_1707[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1707[lng] );
    #else
      menu_btn[num_menu_btn] = new CMenu_button( string_1703[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1703[lng] );
    #endif
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN3_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin3
    parameter[num_params++] = new CParameter( ".VEL3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    180,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN3",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],      4,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY3",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for spin3
 //   parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN_LINE",     CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup
    num_menu_btn++;


    // *******  SUB-MENU FOR EJECTOR MASKS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1668[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1668[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_ENABLE_SPINCHK",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1666[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_SPINCHK",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1667[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
   
    parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE1",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1670[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1672[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1674[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1675[lng],  L"",   0,   0,   1, &file_manager ); // 
    

    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM  // Station 3 is for particle
      ADS_write_value( ".F_PARTICLE_3", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high to fix counting for particles/particle3
      parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1673[lng],  L"",   0,   0,   1, &file_manager ); // 
    #else // Normal cosmetic
      parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1678[lng],  L"",   0,   0,   1, &file_manager ); // 
    #endif
   
    parameter[num_params++] = new CParameter( ".F_ENABLE_TIPCAP",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1680[lng],  L"",   0,   0,   1, &file_manager ); // 

    //parameter[num_params++] = new CParameter( ".F_ENABLE_LD",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1980[lng],  L"",   0,   0,   1, &file_manager ); // 

    #ifdef FO_COLOR
      parameter[num_params++] = new CParameter( ".F_ENABLE_FOCOLOR",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1774[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    #endif
    #ifdef DOTRING_COLOR
      parameter[num_params++] = new CParameter( ".F_ENABLE_DRCOLOR",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1779[lng],  L"",   0,   0,   1, &file_manager ); // DR color
    #endif

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
      
    parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE1",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1682[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE2",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1683[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_FILLING1",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1684[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV2_FILLING2",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1685[lng],  L"",   0,   0,   1, &file_manager ); // 

    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM  // Station 3 is for particle
      parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1687[lng],  L"",   0,   0,   1, &file_manager ); // 
    #else // Normal cosmetic
      parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1686[lng],  L"",   0,   0,   1, &file_manager ); // 
    #endif

    parameter[num_params++] = new CParameter( ".F_DEV2_TIPCAP",       CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1688[lng],  L"",   0,   0,   1, &file_manager ); // 

    //parameter[num_params++] = new CParameter( ".F_DEV2_LD",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1982[lng],  L"",   0,   0,   1, &file_manager ); // 
    

    //parameter[num_params++] = new CParameter( ".F_DEV2_HV",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1982[lng],  L"",   0,   0,   1, &file_manager ); // 

    #ifdef FO_COLOR
      parameter[num_params++] = new CParameter( ".F_DEV2_FOCOLOR",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1784[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    #endif
    #ifdef DOTRING_COLOR
      parameter[num_params++] = new CParameter( ".F_DEV2_DRCOLOR",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1789[lng],  L"",   0,   0,   1, &file_manager ); // DR color
    #endif


    num_menu_btn++;

    // *******  SUB-MENU FOR TRIGGERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1690[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1690[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params  ] = new CParameter( ".TIPCAP_TRIGGER_PHASE",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1691[lng], string_step[lng], 0.10, 0.0, 0.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
    #ifdef FO_COLOR
      parameter[num_params  ] = new CParameter( ".FOCOLOR_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1692[lng], string_step[lng],  0.2, 0.0, 0.95, &file_manager  );
      parameter[num_params++]->format_spc = L"%.2lf";
    #endif
    #ifdef DOTRING_COLOR
      parameter[num_params  ] = new CParameter( ".DRCOLOR_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1696c[lng], string_step[lng],  0.2, 0.0, 0.95, &file_manager  );
      parameter[num_params++]->format_spc = L"%.2lf";
    #endif
    parameter[num_params  ] = new CParameter( ".PART1_TRIGGER_PHASE",      CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1697[lng], string_step[lng], 0.11, 0.01, 1.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".PART2_TRIGGER_PHASE",      CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1698[lng], string_step[lng], 0.12, 0.01, 1.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";

    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM  // Station 3 is for particle
      parameter[num_params  ] = new CParameter( ".COSM_TRIGGER_PHASE",       CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1698b[lng], string_step[lng], 0.13, 0.01, 1.91, &file_manager  );
    #else // Normal cosmetic
      parameter[num_params  ] = new CParameter( ".COSM_TRIGGER_PHASE",       CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1699[lng], string_step[lng], 0.13, 0.0, 3.91, &file_manager  );
    #endif
    parameter[num_params++]->format_spc = L"%.2lf";

    num_menu_btn++;


    // *******  SUB-MENU FOR CALIBRATION/ADVANCED PARAMETERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1800[lng], menu_btn[0]->child );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[7] );
    file_manager.Add_separator( string_1800[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    calibration_menu = menu_btn[num_menu_btn];
    main_menu_btn = num_menu_btn;
    num_menu_btn++;


    // ABC phases
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1809[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1809[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".INPUT_PHASE_A",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1810[lng], string_step[lng],   1.50,    0.0,   3.0, &file_manager  ); // Input phase for A valves
    parameter[num_params++] = new CParameter( ".INPUT_PHASE_B",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1812[lng], string_step[lng],   2.50,    0.0,   3.0, &file_manager  ); // Input phase for B valves
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCA",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1820[lng], string_step[lng],   1.50,    0.0,   2.0, &file_manager  ); // Input cam phase for A cameras
    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCB",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1822[lng], string_step[lng],   1.50,    0.0,   2.0, &file_manager  ); // Input cam phase for B cameras
//    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCC",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1824[lng], string_step[lng],   0.50,    0.0,   4.0, &file_manager  ); // Input cam phase for C cameras
    //num_menu_btn++;
	menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

	#ifdef HV_LEAKTEST
	//Pour added 20180821
	parameter[num_params++] = new CParameter( ".INPUT_HV_PHASE_A",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1810a[lng], string_step[lng],   1.50,    0.0,   3.0, &file_manager  ); // Input HV phase for A valves
    parameter[num_params++] = new CParameter( ".INPUT_HV_PHASE_B",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1812a[lng], string_step[lng],   2.50,    0.0,   3.0, &file_manager  ); // Input HV phase for B valves
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
	//Pour added 20180821
#endif//HV_LEAKTEST
	num_menu_btn++;

    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1828[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1828[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MAX_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1830[lng], string_mm[lng],    562.0,  200.0,    700.0, &file_manager  ); // Maximum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MIN_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1832[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Minimum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_mm[lng],    557.0,  200.0,    700.0, &file_manager  ); // Top point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_ec[lng],  9480033,      0, 16777215, &file_manager  ); // Top point height (ec)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Low point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_ec[lng],  9569182,      0, 16777215, &file_manager  ); // Low point height (ec)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    num_menu_btn++;

    // Spin offsets and distances
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1848[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1848[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".SPIN1_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1850[lng], string_unit[lng],    8,    0,   18, &file_manager  ); // Spin1 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN2_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1852[lng], string_unit[lng],    4,    0,   18, &file_manager  ); // Spin2 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN3_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1854[lng], string_unit[lng],    1,    0,   18, &file_manager  ); // Spin3 offset (motors)
    parameter[num_params++] = new CParameter( ".ALIGN_OFFSET",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1856[lng], string_step[lng], 20.0,  0.0, 36.0, &file_manager  ); // Align offset (steps)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".PART1_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1801[lng], string_step[lng], 32.0,  0.0, 36.0, &file_manager  ); // datarecord particle1 offset (heads)
    parameter[num_params++] = new CParameter( ".PART2_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1802[lng], string_step[lng], 24.0,  0.0, 36.0, &file_manager  ); // datarecord particle2 offset (heads)
    parameter[num_params++] = new CParameter( ".COSM_OFS",                      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1803[lng], string_step[lng], 12.0,  0.0, 36.0, &file_manager  ); // datarecord particle3/cosmetic offset (heads)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".DIST_LOAD_TCA",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1860[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and tip/cap cameras
    //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
    #ifdef FO_COLOR
      parameter[num_params++] = new CParameter( ".DIST_LOAD_FO",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1861[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and FO color camera
    #endif
    #ifdef DOTRING_COLOR
      parameter[num_params++] = new CParameter( ".DIST_LOAD_DR",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1861b[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and DR color camera
    #endif
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1A",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1864[lng], string_unit[lng],    7,    0,   15, &file_manager  ); // Distance between input and first part A
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1B",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1865[lng], string_unit[lng],    7,    0,   15, &file_manager  ); // Distance between input and first part B

    //parameter[num_params++] = new CParameter( ".DIST_LOAD_HV",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3534[lng], string_step[lng],   80,   30,  100, &file_manager  ); // Distance between input and HV result in machine steps
		//Pour changed 20180301
    parameter[num_params++] = new CParameter( ".DIST_LOAD_HV1",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3534[lng], string_step[lng],   80,   30,  100, &file_manager  ); // Distance between input and HV1 result in machine steps
	parameter[num_params++] = new CParameter( ".DIST_LOAD_HV2",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3534b[lng], string_step[lng],   80,   30,  100, &file_manager  ); // Distance between input and HV2 result in machine steps
	parameter[num_params++] = new CParameter( ".DIST_LOAD_HV3",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3534c[lng], string_step[lng],   80,   30,  100, &file_manager  ); // Distance between input and HV3 result in machine steps
	parameter[num_params++] = new CParameter( ".DIST_LOAD_HV4",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3534d[lng], string_step[lng],   80,   30,  100, &file_manager  ); // Distance between input and HV4 result in machine steps

    //num_menu_btn++;

    num_menu_btn++;





    // *******  SUB-MENU FOR BATCH - num_menu_btn=7  ******* 
/*    menu_btn[num_menu_btn] = new CMenu_button( string_1310[lng], menu_btn[7]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position */

    menu_btn[num_menu_btn++] = new CMenu_button( string_1310[lng],  menu_btn[7]->child, &Reset_statistics      ); 

    if ( batch_mngr )
    {
      // batch start/stop
      menu_btn[num_menu_btn++] = new CMenu_button( string_1304[lng],  menu_btn[7]->child, &Batch_startstop     ); 
      batch_btn = menu_btn[num_menu_btn-1];
      if ( batch_mngr->current.status ) batch_btn->SetWindowTextW( string_1306[lng] );

      // batch print/report
      menu_btn[num_menu_btn++] = new CMenu_button( string_1308[lng],  menu_btn[7]->child, &Batch_report        ); 
    }

  }


  // ***************************************************************************
  //
  //                           PARAMETRI DI ISPEZIONE/MISURA
  //
  // ***************************************************************************

  parcat_1 = L"INSPECTION";
  parcat_2 = NULL;

	parameter[num_params++] = new CParameter( &show_rejects,  CTYPE_BOOL8, 0, menu_btn[1]->child, string_2124[lng],   0,                1,  0,   0, NULL            );
	parameter[num_params++] = new CParameter( &pseudo_colors, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2122[lng],   0,                1,  0,   0, NULL, &Set_LUT  );


  #if STN1==PARTICLE_BOTH // First  station defined for particle with selectable back/bottom light
    if ( IS_PC1 )	parameter[num_params++] = new CParameter( &stn1_part_back, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2076[lng],   0,             1,  0,   0, &file_manager, &Set_stn1_mode     );
  #endif


    #ifdef NEWCAP_V30
      if ( IS_PC1 )
      {
        ADS_write_value( ".F_CAP_V30", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  //  	parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
        parameter[num_params++] = new CParameter( "TRIGGER_CAP_V30.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
      }
    #endif

    #ifdef NEWCAP_DOUBLE
      ADS_write_value( ".F_DOUBLE_CAP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  	  parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
      parameter[num_params++] = new CParameter( "TRIGGER_DOUBLE_CAP.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
    #endif

    #ifdef NEW_TRIPLE_TIP
      ADS_write_value( ".F_TRIPLE_TIP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  	  //parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
      //parameter[num_params++] = new CParameter( "TRIGGER_DOUBLE_CAP.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
    #endif



  // -----------------------------   S O T T O M E N U     O F     E A C H     C A M E R A    ---------------------------------------------
	for ( UINT i=0 ; i<num_tlc ; i++ ) // Sotto gruppo parametri telecamere - Livello 1 - menu_btn[20,21,22]
  {
    wchar_t msg[50+1];
//    swprintf( msg, string_810[lng], i+1 );
    swprintf( msg, 50, string_800[lng], i, camera[i].name );
	  menu_btn[num_menu_btn] = new CMenu_button( msg, menu_btn[1]->child );
	  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*300*/ );
    file_manager.Add_separator( msg );

    parcat_1 = msg;
    parcat_2 = NULL;


    parameter[num_params++] = new CParameter( &camera[i].shutter,    CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
    parameter[num_params++] = new CParameter( &camera[i].frame_rate, CTYPE_REAL,  0, menu_btn[num_menu_btn]->child, string_2066[lng], string_fps [lng],   50.0,               0.0,            6000.0, &file_manager, &Set_camera, i );
    num_menu_btn++;

    int menu_btn_par = num_menu_btn-1;
    //if ( IS_PC1 ) 
    {
      if ( i<3 ) // tip/cap dedicated parameters
      {
        parameter[num_params++] = new CParameter( &camera[i].trigger,    CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
        #if defined NEW_TRIPLE_TIP && !defined COMBINED_TIPCAP
          if ( i==0 ) parameter[num_params++] = new CParameter( "TRIGGER_TRIPLE_TIP.FREE_RUN",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[menu_btn_par]->child, string_606[lng],  L"",   0,   0,   1, NULL ); // 
        #endif
        if ( tip_insp[i] ) tip_insp[i]->Add_menu_parameters( menu_btn[num_menu_btn-1]->child );
      }

      if ( i>=3 && i<=4 )       // particle1/filling dedicated parameters
      {
        if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( fillingl_insp[i] ) fillingl_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
      #ifdef FO_COLOR
        if ( i==7 )  // FO color dedicated parameters
        {
          parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
          if ( focolor_insp[i] ) focolor_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
          if ( bottom_insp [i] ) bottom_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
          if ( oralfo_insp [i] ) oralfo_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        }
      #endif

      #ifdef DOTRING_COLOR
        if ( i==7 || i==8 )  // dotring color dedicated parameters
        {
          if ( i==7 ) parameter[num_params++] = new CParameter( "TRIGGER_DOTRING.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[menu_btn_par]->child, string_606[lng],  L"",   0,   0,   1, NULL ); // 
          parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
          if ( drcolor_insp[i] ) drcolor_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        }
      #endif

    }

    //if ( IS_PC2 ) 
    {
      if ( i>=5 && i<=6 )       // particle2/filling dedicated parameters
      {
        if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( fillingl_insp[i] ) fillingl_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }
      if ( i>=7 && i<=8 )       // particle3/filling dedicated parameters
      {
        if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }
    }

  }


  #ifndef NEW_PARTICLE // For new particle DON'T ADD learning menu

    menu_btn[1]->child->posy += 10; // Set vertical position

    // particle start/stop learning - show learning
	  parameter[num_params++] = new CParameter( &learning,    CTYPE_BOOL8, 0, menu_btn[1]->child, string_2052[lng], 0,  0,  0, 1, NULL, &Learn_reflections );

    // Add reflections sub-menu
    int refl_menu = num_menu_btn;
    menu_btn[num_menu_btn++] = new CMenu_button( string_2034[lng], menu_btn[1]->child );
	  menu_btn[refl_menu]->child->new_size( 320, 100 );

    menu_btn[num_menu_btn++] = new CMenu_button( string_2054[lng], menu_btn[refl_menu]->child, &Show_reflections   );
    menu_btn[num_menu_btn++] = new CMenu_button( string_2042[lng], menu_btn[refl_menu]->child, &Filter_reflections );
    menu_btn[num_menu_btn++] = new CMenu_button( string_2036[lng], menu_btn[refl_menu]->child, &Export_reflections );
    menu_btn[num_menu_btn++] = new CMenu_button( string_2038[lng], menu_btn[refl_menu]->child, &Import_reflections );

  #endif // NEW_PARTICLE - For new particle DON'T ADD learning menu











  // ***************************************************************************
  //
	//               ADD FUNCTIONS/UTILITIES	( container menu_btn[4] )
  //
  // ***************************************************************************

/*  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], menu_btn[4]->child, &Change_view       );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;  */

  parameter[num_params++] = new CParameter( ".O_MACHINE_LIGHT", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_124[lng],  L"", 0, 0, 1 ); // machine lights

  parameter[num_params++] = new CParameter( ".F_RUN_BELTS",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_128[lng],  L"", 1, 0, 1 ); // run belt/s

  parameter[num_params++] = new CParameter( "DEVIBRATOR.RUN",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_3568[lng], L"", 1, 0, 1 ); // run devibrator


  #ifdef REVERSE_BELT    // If defined button is added to allow reverse of belt in manual/jog mode
    parameter[num_params++] = new CParameter( ".F_REVERSE_BELT",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_142[lng], L"", 1, 0, 1 ); // reverse input belt direction in jog mode
  #endif

  #ifdef VACUUM_PUMP // if defined add button connected to output 6th board/4th output
    parameter[num_params++] = new CParameter( ".O_VACUUM_PUMP",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_340[lng], L"", 1, 0, 1 ); // run vacuum pump
  #endif

  menu_btn[num_menu_btn] = new CMenu_button( string_160[lng], menu_btn[4]->child, &Movie_startstop   );
	movie_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

    //Pour marked on 20200427
    #ifdef ALARMLOG_SEPARATE // log alarms separately and add button to show them
  if ( password_mngr )
  { 
	menu_btn[num_menu_btn] = new CMenu_button( string_104[lng], menu_btn[4]->child, &Show_alarmlog  );
	password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );//MAINTENANCE_LEVEL
	num_menu_btn++;
  }
  #endif


  #ifdef NEW_LOGGER // log alarms separately and add button to show them
    menu_btn[num_menu_btn++] = new CMenu_button( string_3900[lng], menu_btn[4]->child, &Show_log  );
  #endif

  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
  }

	menu_btn[num_menu_btn] = new CMenu_button( string_170[lng], menu_btn[4]->child, &Save_images       );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveimages_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

//	parameter[num_params++] = new CParameter( &datarec_on, CTYPE_BOOL8, 0, menu_btn[4]->child, string_2130[lng], 0,  0,  0, 1, NULL, NULL );
	menu_btn[num_menu_btn] = new CMenu_button( string_304[lng], menu_btn[4]->child, &Data_record       );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  inpdatarec_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  #ifdef SAVE_INPUTDATA
    if ( IS_PC1 )
    {
      menu_btn[num_menu_btn] = new CMenu_button( string_354[lng], menu_btn[4]->child, &Inpdata_record );
      if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
      inpdatarec_btn = menu_btn[num_menu_btn];
      num_menu_btn++;
    }
    if ( IS_PC2 ) // Used for filling level NITIN
    {
      menu_btn[num_menu_btn] = new CMenu_button( string_360[lng], menu_btn[4]->child, &Inpdata_record );
      if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
      inpdatarec_btn = menu_btn[num_menu_btn];
      num_menu_btn++;
    }
  #endif

	menu_btn[num_menu_btn] = new CMenu_button( string_320[lng], menu_btn[4]->child, &Save_inspections  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveinsp_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

	menu_btn[num_menu_btn] = new CMenu_button( string_324[lng], menu_btn[4]->child, &Save_sequences  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveseq_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  #ifdef GRIPPER_STATISTICS
  //if ( IS_PC1 )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_8150[lng], menu_btn[4]->child, &Grippers_statistics );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
    num_menu_btn++;
  }
  #endif

//  #ifdef DEBUGPC //_DEBUG
  if ( test_process )
  {
	  //menu_btn[num_menu_btn++] = new CMenu_button( string_172[lng],  menu_btn[4]->child, &Load_images       );
    menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[4]->child, &Test_process      ); 
    //menu_btn[num_menu_btn++] = new CMenu_button( string_912[lng],  menu_btn[4]->child, &Sequence_acquire  ); 
  }
//  #endif
   // menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[4]->child, &Test_process      ); 
  
 //  ASSERT ( menu_btn[19]==NULL );
 



}

//Pour added for TIVS-A20 20180523
/* Create menu for all functions/parameters */
void CChildView::Create_menu_TIVS_A20(void)
{


  CRect rett;
  GetClientRect( &rett );

	rett.top    =    OFFS_COORDY;
  rett.bottom = rett.top + 360;
	rett.left   = OFFS_COORDY;
  rett.right  = rett.Width();

  num_container = 0;

	// --------        CONTENITORE BASE - Livello 0       ------------
	container_main = new CContainer_main( L"menu base", rett, this, IDD_CONTAINER );
	container_main->ShowWindow( SW_SHOW );


  #define BRD_SUP       14

  #define COLA_SX      440
  #define COLB_SX      (COLA_SX+SPACE_X+BTN_DIMX)
  #define COLC_SX      (COLB_SX+SPACE_X+BTN_DIMX)
  #define COLD_SX      (COLA_SX-SPACE_X-BTN_DIMX)

  #define SPACE_X       14
  #define SPACE_Y       14
  #define BTN_DIMX     250 // BUTTONS WIDTH
  #define BTN_DIMY      58 // BUTTONS HEIGHT


	// * * * *    PRIMA COLONNA      * * * *
	CMenu_button::hook_pos = CMenu_button::bottom_left; // child di livello 1 allineati sotto e a sinistra

	// AUTOMATION BUTTON (num_menu_btn=0)
  rett.top    =                BRD_SUP;
  rett.bottom = rett.top    + BTN_DIMY;
  rett.left   =                COLA_SX;
  rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_900[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[0] );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;

 	// INSPECTION BUTTON  (num_menu_btn=1)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_902[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*740*/ ); // regolo dimensione sottomenu parametri ispezione
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[1] );
  num_menu_btn++;

	// * * * *     SECONDA COLONNA      * * * *
	// PULSANTE RICETTE  (num_menu_btn=2)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLB_SX;
	rett.right  = rett.left   + BTN_DIMX;
	recipe_btn = menu_btn[num_menu_btn] = new CMenu_button( string_120[lng], container_main, &Recipe_management );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[2] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;

	// PULSANTE AVVIO/ARRESTO INSPECTION  (num_menu_btn=3)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	inspection_btn = menu_btn[num_menu_btn] = new CMenu_button( string_150[lng], container_main, &Inspection_startstop  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[3] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;


	// * * * *     TERZA COLONNA      * * * *

	// PULSANTE UTILITA'/FUNZIONI  (num_menu_btn=4)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLC_SX;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_130[lng], container_main );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*450*/ );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[4] );
  num_menu_btn++;

	// PULSANTE DI USCITA  (num_menu_btn=5)
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
	exit_btn = menu_btn[num_menu_btn] = new CMenu_button( string_140[lng], container_main, &On_exit_btn );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[5] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;
  
	// * * * *     TO LEFT DISPLAY SWITCH  (num_menu_btn=6)    * * * *
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLD_SX;
	rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], container_main, &Change_view, -1 );
  menu_btn[num_menu_btn]->MoveWindow( &rett );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;


	// * * * *     LEFT BOTTOM BATCHES   (num_menu_btn=7)   * * * *
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_1300[lng], container_main );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[6] );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;


  #undef BRD_SUP
  #undef COLA_SX
  #undef COLB_SX
  #undef COLC_SX
  #undef SPACE_X
  #undef SPACE_Y
  #undef BTN_DIMX
  #undef BTN_DIMY

	CParameter::dim_ctrl.cy      = 25; // Regolo la dimensione verticale
	CContainer_wnd::mode         = CContainer_wnd::top_left;
	CContainer_wnd::use_ext_rect = false;
	CMenu_button::hook_pos       = CMenu_button::top_right; // child di livello >1 allineati a destra


  // ***************************************************************************
  //
  //                        AUTOMATION PARAMETERS
  //
  // ***************************************************************************

  parcat_1 = L"PLC";
  parcat_2 = NULL;

  //if ( IS_PC1 ) // ( !wcsncmp( PC_name, L"PC1", 3 ) ) 
  {

    // *******  SUB-MENU FOR CAROUSEL - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1510[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".PRODSPEED",                    CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1532[lng], string_pcm[lng],   200.0,    10.0,  220.0, &file_manager  ); // Jog high speed (pcs/min)
    //if ( password_mngr ) password_mngr->insert_hmi( parameter[num_params-1], pwd_levels[7] );

    parameter[num_params++] = new CParameter( ".JOGSPEED",                     CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1536[lng], string_pcm[lng],   150.0,    10.0,  220.0, &file_manager  ); // Jog low speed (pcs/min)
    parameter[num_params++] = new CParameter( ".ACCELERATION",                 CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1210[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // acceleration
    parameter[num_params++] = new CParameter( ".DECELERATION",                 CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1212[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // deceleration
    parameter[num_params++] = new CParameter( ".JERK",                         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1208[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // jerk
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.TARGET_HEIGHT_MM",  CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1504[lng], string_mm[lng], 480.3, 457.0, 520.0, &file_manager  ); // Carousel target height
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.ZEROPOS",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1540[lng], string_unit[lng],   0.50,    -2.0,    2.0, &file_manager  ); // Carousel zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "INPSCREW_AXIS.ZEROPOS",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1542[lng], string_unit[lng],   0.50,    -2.0,    2.0, &file_manager  ); // Input screw zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "TRACKER_AXIS.ZEROPOS",          CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1544[lng], string_unit[lng],   0.50,    -2.0,    2.0, &file_manager  ); // Tracker zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    //parameter[num_params  ] = new CParameter( "HVTRANSPORT_AXIS.ZEROPOS",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3510[lng], string_unit[lng],   0.50,    -2.0,    2.0, &file_manager  ); // HV transport zero position (units)
    //parameter[num_params++]->format_spc = L"%.3lf";
    
//    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.SECFDBK_ZEROPOS", CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1546[lng], string_unit[lng],   0.000,    -4.0,    4.0, &file_manager  ); // Cam zero position second feedback (units)
//    parameter[num_params++]->format_spc = L"%.3lf";
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( "INPUT_BELT.SPEED",              CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1550[lng], string_hz[lng],     25.0,     0.0,   80.0, &file_manager  ); // Input belt speed
    parameter[num_params++]->format_spc = L"%.1lf";

    //parameter[num_params++] = new CParameter( "DEVIBRATOR.SPEED",              CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3570[lng], string_percent[lng],  25.0,   0.0,  100.0, &file_manager  ); // Devibrator speed in percent

    num_menu_btn++;

    // *******  SUB-MENU FOR GRIPPERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1610[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1610[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".OPEN_OFFSET",       CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1620[lng], string_step[lng],   10.0,    0.0,    36.0, &file_manager  ); // Grippers opening phase
    parameter[num_params++] = new CParameter( ".ANT_OPEN_MAX",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1622[lng], string_step[lng],    0.5,    0.0,     2.0, &file_manager  ); // Grippers opening advance 
    parameter[num_params++] = new CParameter( ".OPEN_PRESSURE",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1624[lng], string_unit[lng],    3.5,    0.0,     8.0, &file_manager  ); // Grippers opening pressure
    parameter[num_params++] = new CParameter( ".CLOSE_OFFSET",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1630[lng], string_step[lng],   20.0,    0.0,    36.0, &file_manager  ); // Grippers closing phase
    parameter[num_params++] = new CParameter( ".ANT_CLOSE_MAX",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1632[lng], string_step[lng],    0.5,    0.0,     2.0, &file_manager  ); // Grippers closing advance 
    parameter[num_params++] = new CParameter( ".CLOSE_PRESSURE",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1634[lng], string_unit[lng],    1.5,    0.0,     8.0, &file_manager  ); // Grippers closing pressure 
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GRIPPERS",  CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1612[lng],              L"",      0,      0,       1, &file_manager ); // check opening/closing
    parameter[num_params++] = new CParameter( ".GROPEN_DELAY",      CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1614[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for opening error
    parameter[num_params++] = new CParameter( ".GRCLOSE_DELAY",     CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1616[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for closing error
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params  ] = new CParameter( ".F_CLOSED_LOOP",     CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1636[lng],              L"",      0,      0,       1                ); // closed loop
    f_closed_loop = parameter[num_params++];
    ASSERT( f_closed_loop==parameter[num_params-1] );

    num_menu_btn++;

    // *******  SUB-MENU FOR DEVIATORS/OUTPUT - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1640[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1640[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); //380 );
    int main_menu_btn = num_menu_btn;

    parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_330[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    parameter[num_params++] = new CParameter( ".F_ENABLE_LIGHTCHK",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_332[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MAX_WIDTH", CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1639[lng], string_step[lng],    0.9,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MIN_WIDTH", CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1638[lng], string_step[lng],    0.1,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GOODS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1660[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output goods
    //parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS1",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1662[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects1 
    //parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS2",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1664[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects2

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "PRODUCT_FLOW.LOAD_VAL",           CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1654[lng], string_unit[lng],      0,      0,  1023  ); // Loading initial value
    //parameter[num_params++] = new CParameter( ".F_REJECT_SIMULATE",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1656[lng],              L"",      0,      0,     1  ); // rejects simulation
    num_menu_btn++;

    // DELAYS
    menu_btn[num_menu_btn] = new CMenu_button( string_1750[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1750[lng] );
    //menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    //parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_330[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn-1]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1752[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1754[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1756[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1758[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej1 full
    //parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1760[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej2 full
    //parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1762[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej2 full

    #ifdef INPUTBELT_SENSOR // Id defined set input sensor delays
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY1",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1764[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY2",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1766[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    #endif
    #ifdef FALLEN_CONTAINER // If defined, use code to check fallen containers/set delay/enable alarm
      parameter[num_params++] = new CParameter( "ALARMS_CHECK.FALLEN_DELAY",     CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1769[lng], string_msec[lng],   300,   0, 1000000, &file_manager  ); // Delay to trigger fallen container alarm
    #endif      
    num_menu_btn++;

    // DISTANCES
    menu_btn[num_menu_btn] = new CMenu_button( string_1653[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1653[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV1",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1641[lng], string_step[lng],   77.50,  20.0, 100.0, &file_manager  ); // Distance input photosens - first deviator 
    //parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV3",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1647[lng], string_step[lng],   77.50,  20.0, 100.0, &file_manager  ); // Distance input photosens - first deviator 

    parameter[num_params++] = new CParameter( ".DIST_LOAD_GOOD",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1642[lng], string_step[lng],   82.75,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    //parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ1",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1643[lng], string_step[lng],   87.77,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    //parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ2",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1644[lng], string_step[lng],   95.09,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWI",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1646[lng], string_step[lng],    2.3,    0.0,   4.0, &file_manager  ); // Main starwheel suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWO",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1648[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Main starwheel blowing lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDI",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1650[lng], string_step[lng],    1.3,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDO",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1652[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels blowing lenght (steps)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_DV2RI",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1988[lng], string_step[lng],    2.3,    0.0,   4.0, &file_manager  ); // Main starwheel suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_DV2RO",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1990[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Main starwheel blowing lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_DV2LI",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1992[lng], string_step[lng],    1.3,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_DV2LO",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1994[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels blowing lenght (steps)
    num_menu_btn++;

    // *******  SUB-MENU FOR FIRST SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1700[lng], menu_btn[0]->child );
    //UINT nmbt = num_menu_btn-1;

    file_manager.Add_separator( string_1700[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "SEND_SPIN_PARAMETERS.RUN",                 CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1710[lng],              L"",      1,      0,     1                 ); // send data
 
    menu_btn[num_menu_btn+1]  = new CMenu_button( string_1710[lng],  menu_btn[num_menu_btn]->child, &Send_spin_parameters      ); // ATTENTION TO num_menu_btn!!!

    menu_btn[num_menu_btn]->child->posy += 30; // Set vertical position
    parameter[num_params++] = new CParameter( ".ALIGN_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1718[lng],              L"",      1,      0,     1, &file_manager  ); // enable alignment spin cycle
    parameter[num_params++] = new CParameter( ".F_CHECK_LAM",            CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1730[lng],              L"",      1,      0,     1, NULL           ); // enable LAM error detection
    parameter[num_params++] = new CParameter( ".SPIN1_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 1
    parameter[num_params++] = new CParameter( ".VEL1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],   1000,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   3000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN1",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY1",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN1_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle1
    num_menu_btn++;

    num_menu_btn++; // for send_spin_parameters


    // *******  SUB-MENU FOR SECOND SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1701[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1701[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN2_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 2
    parameter[num_params++] = new CParameter( ".VEL2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    800,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN2",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     12,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY2",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN2_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle2
    num_menu_btn++;


    // *******  SUB-MENU FOR THIRD SPINNING - num_menu_btn=  ******* 
    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM
      menu_btn[num_menu_btn] = new CMenu_button( string_1707[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1707[lng] );
    #else
      menu_btn[num_menu_btn] = new CMenu_button( string_1703[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1703[lng] );
    #endif
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN3_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin3
    parameter[num_params++] = new CParameter( ".VEL3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    180,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN3",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],      4,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY3",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for spin3
 //   parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN_LINE",     CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup
    num_menu_btn++;


    // *******  SUB-MENU FOR EJECTOR MASKS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1668[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1668[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_ENABLE_SPINCHK",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1666[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV2_SPINCHK",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1667[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
   
    parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE1",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1670[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1672[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1674[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1675[lng],  L"",   0,   0,   1, &file_manager ); // 
    

    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM  // Station 3 is for particle
      ADS_write_value( ".F_PARTICLE_3", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high to fix counting for particles/particle3
      parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1673[lng],  L"",   0,   0,   1, &file_manager ); // 
    #else // Normal cosmetic
      parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1678[lng],  L"",   0,   0,   1, &file_manager ); // 
    #endif
   
    parameter[num_params++] = new CParameter( ".F_ENABLE_TIPCAP",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1680[lng],  L"",   0,   0,   1, &file_manager ); // 

//    parameter[num_params++] = new CParameter( ".F_ENABLE_LD",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1980[lng],  L"",   0,   0,   1, &file_manager ); // 

    #ifdef FO_COLOR
      parameter[num_params++] = new CParameter( ".F_ENABLE_FOCOLOR",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1774[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    #endif
    #ifdef DOTRING_COLOR
      parameter[num_params++] = new CParameter( ".F_ENABLE_DRCOLOR",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1779[lng],  L"",   0,   0,   1, &file_manager ); // DR color
    #endif

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
      /*
    parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE1",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1682[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE2",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1683[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_FILLING1",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1684[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_FILLING2",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1685[lng],  L"",   0,   0,   1, &file_manager ); // 

    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM  // Station 3 is for particle
      parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1687[lng],  L"",   0,   0,   1, &file_manager ); // 
    #else // Normal cosmetic
      parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1686[lng],  L"",   0,   0,   1, &file_manager ); // 
    #endif

    parameter[num_params++] = new CParameter( ".F_DEV2_TIPCAP",       CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1688[lng],  L"",   0,   0,   1, &file_manager ); // 

    parameter[num_params++] = new CParameter( ".F_DEV2_LD",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1982[lng],  L"",   0,   0,   1, &file_manager ); // 
    */

    //parameter[num_params++] = new CParameter( ".F_DEV2_HV",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1982[lng],  L"",   0,   0,   1, &file_manager ); // 

    #ifdef FO_COLOR
      parameter[num_params++] = new CParameter( ".F_DEV2_FOCOLOR",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1784[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    #endif
    #ifdef DOTRING_COLOR
      parameter[num_params++] = new CParameter( ".F_DEV2_DRCOLOR",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1789[lng],  L"",   0,   0,   1, &file_manager ); // DR color
    #endif


    num_menu_btn++;

    // *******  SUB-MENU FOR TRIGGERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1690[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1690[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params  ] = new CParameter( ".TIPCAP_TRIGGER_PHASE",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1691[lng], string_step[lng], 0.10, 0.0, 0.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
    #ifdef FO_COLOR
      parameter[num_params  ] = new CParameter( ".FOCOLOR_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1692[lng], string_step[lng],  0.2, 0.0, 0.95, &file_manager  );
      parameter[num_params++]->format_spc = L"%.2lf";
    #endif
    #ifdef DOTRING_COLOR
      parameter[num_params  ] = new CParameter( ".DRCOLOR_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1696c[lng], string_step[lng],  0.2, 0.0, 0.95, &file_manager  );
      parameter[num_params++]->format_spc = L"%.2lf";
    #endif
    parameter[num_params  ] = new CParameter( ".PART1_TRIGGER_PHASE",      CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1697[lng], string_step[lng], 0.11, 0.01, 1.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".PART2_TRIGGER_PHASE",      CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1698[lng], string_step[lng], 0.12, 0.01, 1.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";

    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM  // Station 3 is for particle
      parameter[num_params  ] = new CParameter( ".COSM_TRIGGER_PHASE",       CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1698b[lng], string_step[lng], 0.13, 0.01, 1.91, &file_manager  );
    #else // Normal cosmetic
      parameter[num_params  ] = new CParameter( ".COSM_TRIGGER_PHASE",       CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1699[lng], string_step[lng], 0.13, 0.0, 3.91, &file_manager  );
    #endif
    parameter[num_params++]->format_spc = L"%.2lf";

    num_menu_btn++;


    // *******  SUB-MENU FOR CALIBRATION/ADVANCED PARAMETERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1800[lng], menu_btn[0]->child );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[7] );
    file_manager.Add_separator( string_1800[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    calibration_menu = menu_btn[num_menu_btn];
    main_menu_btn = num_menu_btn;
    num_menu_btn++;


    // ABC phases
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1809[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1809[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".INPUT_PHASE_A",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1810[lng], string_step[lng],   1.50,    0.0,   3.0, &file_manager  ); // Input phase for A valves
    parameter[num_params++] = new CParameter( ".INPUT_PHASE_B",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1812[lng], string_step[lng],   2.50,    0.0,   3.0, &file_manager  ); // Input phase for B valves
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCA",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1820[lng], string_step[lng],   1.50,    0.0,   2.0, &file_manager  ); // Input cam phase for A cameras
//    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCB",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1822[lng], string_step[lng],   3.50,    0.0,   2.0, &file_manager  ); // Input cam phase for B cameras
//    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCC",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1824[lng], string_step[lng],   0.50,    0.0,   4.0, &file_manager  ); // Input cam phase for C cameras
    num_menu_btn++;


    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1828[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1828[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MAX_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1830[lng], string_mm[lng],    562.0,  200.0,    700.0, &file_manager  ); // Maximum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MIN_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1832[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Minimum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_mm[lng],    557.0,  200.0,    700.0, &file_manager  ); // Top point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_ec[lng],  9480033,      0, 16777215, &file_manager  ); // Top point height (ec)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Low point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_ec[lng],  9569182,      0, 16777215, &file_manager  ); // Low point height (ec)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    num_menu_btn++;

    // Spin offsets and distances
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1848[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1848[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".SPIN1_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1850[lng], string_unit[lng],    8,    0,   18, &file_manager  ); // Spin1 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN2_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1852[lng], string_unit[lng],    4,    0,   18, &file_manager  ); // Spin2 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN3_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1854[lng], string_unit[lng],    1,    0,   18, &file_manager  ); // Spin3 offset (motors)
    parameter[num_params++] = new CParameter( ".ALIGN_OFFSET",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1856[lng], string_step[lng], 20.0,  0.0, 36.0, &file_manager  ); // Align offset (steps)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( ".PART1_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1801[lng], string_step[lng], 32.0,  0.0, 36.0, &file_manager  ); // datarecord particle1 offset (heads)
    //parameter[num_params++] = new CParameter( ".PART2_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1802[lng], string_step[lng], 24.0,  0.0, 36.0, &file_manager  ); // datarecord particle2 offset (heads)
    //parameter[num_params++] = new CParameter( ".COSM_OFS",                      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1803[lng], string_step[lng], 12.0,  0.0, 36.0, &file_manager  ); // datarecord particle3/cosmetic offset (heads)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".DIST_LOAD_TCA",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1860[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and tip/cap cameras
    //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
    #ifdef FO_COLOR
      parameter[num_params++] = new CParameter( ".DIST_LOAD_FO",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1861[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and FO color camera
    #endif
    #ifdef DOTRING_COLOR
      parameter[num_params++] = new CParameter( ".DIST_LOAD_DR",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1861b[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and DR color camera
    #endif
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1A",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1864[lng], string_unit[lng],    7,    0,   15, &file_manager  ); // Distance between input and first part A
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1B",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1865[lng], string_unit[lng],    7,    0,   15, &file_manager  ); // Distance between input and first part B

    //parameter[num_params++] = new CParameter( ".DIST_LOAD_HV",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3534[lng], string_step[lng],   80,   30,  100, &file_manager  ); // Distance between input and HV result in machine steps

    num_menu_btn++;





    // *******  SUB-MENU FOR BATCH - num_menu_btn=7  ******* 
/*    menu_btn[num_menu_btn] = new CMenu_button( string_1310[lng], menu_btn[7]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position */

    menu_btn[num_menu_btn++] = new CMenu_button( string_1310[lng],  menu_btn[7]->child, &Reset_statistics      ); 

    if ( batch_mngr )
    {
      // batch start/stop
      menu_btn[num_menu_btn++] = new CMenu_button( string_1304[lng],  menu_btn[7]->child, &Batch_startstop     ); 
      batch_btn = menu_btn[num_menu_btn-1];
      if ( batch_mngr->current.status ) batch_btn->SetWindowTextW( string_1306[lng] );

      // batch print/report
      menu_btn[num_menu_btn++] = new CMenu_button( string_1308[lng],  menu_btn[7]->child, &Batch_report        ); 
    }

  }


  // ***************************************************************************
  //
  //                           PARAMETRI DI ISPEZIONE/MISURA
  //
  // ***************************************************************************

  parcat_1 = L"INSPECTION";
  parcat_2 = NULL;

	parameter[num_params++] = new CParameter( &show_rejects,  CTYPE_BOOL8, 0, menu_btn[1]->child, string_2124[lng],   0,                1,  0,   0, NULL            );
	parameter[num_params++] = new CParameter( &pseudo_colors, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2122[lng],   0,                1,  0,   0, NULL, &Set_LUT  );


  #if STN1==PARTICLE_BOTH // First  station defined for particle with selectable back/bottom light
    if ( IS_PC1 )	parameter[num_params++] = new CParameter( &stn1_part_back, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2076[lng],   0,             1,  0,   0, &file_manager, &Set_stn1_mode     );
  #endif


    #ifdef NEWCAP_V30
      if ( IS_PC1 )
      {
        ADS_write_value( ".F_CAP_V30", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  //  	parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
        parameter[num_params++] = new CParameter( "TRIGGER_CAP_V30.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
      }
    #endif

    #ifdef NEWCAP_DOUBLE
      ADS_write_value( ".F_DOUBLE_CAP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  	  parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
      parameter[num_params++] = new CParameter( "TRIGGER_DOUBLE_CAP.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
    #endif

    #ifdef NEW_TRIPLE_TIP
      ADS_write_value( ".F_TRIPLE_TIP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  	  //parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
      //parameter[num_params++] = new CParameter( "TRIGGER_DOUBLE_CAP.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
    #endif



  // -----------------------------   S O T T O M E N U     O F     E A C H     C A M E R A    ---------------------------------------------
	for ( UINT i=0 ; i<num_tlc ; i++ ) // Sotto gruppo parametri telecamere - Livello 1 - menu_btn[20,21,22]
  {
    wchar_t msg[50+1];
//    swprintf( msg, string_810[lng], i+1 );
    swprintf( msg, 50, string_800[lng], i, camera[i].name );
	  menu_btn[num_menu_btn] = new CMenu_button( msg, menu_btn[1]->child );
	  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*300*/ );
    file_manager.Add_separator( msg );

    parcat_1 = msg;
    parcat_2 = NULL;


    parameter[num_params++] = new CParameter( &camera[i].shutter,    CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
    parameter[num_params++] = new CParameter( &camera[i].frame_rate, CTYPE_REAL,  0, menu_btn[num_menu_btn]->child, string_2066[lng], string_fps [lng],   50.0,               0.0,            6000.0, &file_manager, &Set_camera, i );
    num_menu_btn++;

    int menu_btn_par = num_menu_btn-1;
    //if ( IS_PC1 ) 
    {
      if ( i<3 ) // tip/cap dedicated parameters
      {
        parameter[num_params++] = new CParameter( &camera[i].trigger,    CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
        #if defined NEW_TRIPLE_TIP && !defined COMBINED_TIPCAP
          if ( i==0 ) parameter[num_params++] = new CParameter( "TRIGGER_TRIPLE_TIP.FREE_RUN",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[menu_btn_par]->child, string_606[lng],  L"",   0,   0,   1, NULL ); // 
        #endif
        if ( tip_insp[i] ) tip_insp[i]->Add_menu_parameters( menu_btn[num_menu_btn-1]->child );
      }

      if ( i>=3 && i<=4 )       // particle1/filling dedicated parameters
      {
        if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( fillingl_insp[i] ) fillingl_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
      #ifdef FO_COLOR
        if ( i==7 )  // FO color dedicated parameters
        {
          parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
          if ( focolor_insp[i] ) focolor_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
          if ( bottom_insp [i] ) bottom_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
          if ( oralfo_insp [i] ) oralfo_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        }
      #endif

      #ifdef DOTRING_COLOR
        if ( i==7 || i==8 )  // dotring color dedicated parameters
        {
          if ( i==7 ) parameter[num_params++] = new CParameter( "TRIGGER_DOTRING.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[menu_btn_par]->child, string_606[lng],  L"",   0,   0,   1, NULL ); // 
          parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
          if ( drcolor_insp[i] ) drcolor_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        }
      #endif

    }

    //if ( IS_PC2 ) 
    {
      if ( i>=5 && i<=6 )       // particle2/filling dedicated parameters
      {
        if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( fillingl_insp[i] ) fillingl_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }
      if ( i>=7 && i<=8 )       // particle3/filling dedicated parameters
      {
        if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }
    }

  }


  #ifndef NEW_PARTICLE // For new particle DON'T ADD learning menu

    menu_btn[1]->child->posy += 10; // Set vertical position

    // particle start/stop learning - show learning
	  parameter[num_params++] = new CParameter( &learning,    CTYPE_BOOL8, 0, menu_btn[1]->child, string_2052[lng], 0,  0,  0, 1, NULL, &Learn_reflections );

    // Add reflections sub-menu
    int refl_menu = num_menu_btn;
    menu_btn[num_menu_btn++] = new CMenu_button( string_2034[lng], menu_btn[1]->child );
	  menu_btn[refl_menu]->child->new_size( 320, 100 );

    menu_btn[num_menu_btn++] = new CMenu_button( string_2054[lng], menu_btn[refl_menu]->child, &Show_reflections   );
    menu_btn[num_menu_btn++] = new CMenu_button( string_2042[lng], menu_btn[refl_menu]->child, &Filter_reflections );
    menu_btn[num_menu_btn++] = new CMenu_button( string_2036[lng], menu_btn[refl_menu]->child, &Export_reflections );
    menu_btn[num_menu_btn++] = new CMenu_button( string_2038[lng], menu_btn[refl_menu]->child, &Import_reflections );

  #endif // NEW_PARTICLE - For new particle DON'T ADD learning menu











  // ***************************************************************************
  //
	//               ADD FUNCTIONS/UTILITIES	( container menu_btn[4] )
  //
  // ***************************************************************************

/*  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], menu_btn[4]->child, &Change_view       );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;  */

  parameter[num_params++] = new CParameter( ".O_MACHINE_LIGHT", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_124[lng],  L"", 0, 0, 1 ); // machine lights

  parameter[num_params++] = new CParameter( ".F_RUN_BELTS",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_128[lng],  L"", 1, 0, 1 ); // run belt/s

  //parameter[num_params++] = new CParameter( "DEVIBRATOR.RUN",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_3568[lng], L"", 1, 0, 1 ); // run devibrator


  #ifdef REVERSE_BELT    // If defined button is added to allow reverse of belt in manual/jog mode
    parameter[num_params++] = new CParameter( ".F_REVERSE_BELT",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_142[lng], L"", 1, 0, 1 ); // reverse input belt direction in jog mode
  #endif

  #ifdef VACUUM_PUMP // if defined add button connected to output 6th board/4th output
    parameter[num_params++] = new CParameter( ".O_VACUUM_PUMP",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_340[lng], L"", 1, 0, 1 ); // run vacuum pump
  #endif

  menu_btn[num_menu_btn] = new CMenu_button( string_160[lng], menu_btn[4]->child, &Movie_startstop   );
	movie_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  #ifdef NEW_LOGGER // log alarms separately and add button to show them
    menu_btn[num_menu_btn++] = new CMenu_button( string_3900[lng], menu_btn[4]->child, &Show_log  );
  #endif

  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
  }

	menu_btn[num_menu_btn] = new CMenu_button( string_170[lng], menu_btn[4]->child, &Save_images       );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveimages_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

//	parameter[num_params++] = new CParameter( &datarec_on, CTYPE_BOOL8, 0, menu_btn[4]->child, string_2130[lng], 0,  0,  0, 1, NULL, NULL );
	menu_btn[num_menu_btn] = new CMenu_button( string_304[lng], menu_btn[4]->child, &Data_record       );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  inpdatarec_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  #ifdef SAVE_INPUTDATA
    if ( IS_PC1 )
    {
      menu_btn[num_menu_btn] = new CMenu_button( string_354[lng], menu_btn[4]->child, &Inpdata_record );
      if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
      inpdatarec_btn = menu_btn[num_menu_btn];
      num_menu_btn++;
    }
    if ( IS_PC2 ) // Used for filling level NITIN
    {
      menu_btn[num_menu_btn] = new CMenu_button( string_360[lng], menu_btn[4]->child, &Inpdata_record );
      if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
      inpdatarec_btn = menu_btn[num_menu_btn];
      num_menu_btn++;
    }
  #endif

	menu_btn[num_menu_btn] = new CMenu_button( string_320[lng], menu_btn[4]->child, &Save_inspections  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveinsp_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

	menu_btn[num_menu_btn] = new CMenu_button( string_324[lng], menu_btn[4]->child, &Save_sequences  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveseq_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  #ifdef GRIPPER_STATISTICS
  //if ( IS_PC1 )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_8150[lng], menu_btn[4]->child, &Grippers_statistics );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
    num_menu_btn++;
  }
  #endif

//  #ifdef DEBUGPC //_DEBUG
  if ( test_process )
  {
	  //menu_btn[num_menu_btn++] = new CMenu_button( string_172[lng],  menu_btn[4]->child, &Load_images       );
    menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[4]->child, &Test_process      ); 
    //menu_btn[num_menu_btn++] = new CMenu_button( string_912[lng],  menu_btn[4]->child, &Sequence_acquire  ); 
  }
//  #endif
   // menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[4]->child, &Test_process      ); 
  
 //  ASSERT ( menu_btn[19]==NULL );
 



}
//Pour added for TIVS-A20 20180523

//Pour added for TIVS-A40L 20180124
/* Create menu for all functions/parameters */
void CChildView::Create_menu_TIVS_A40L(void)
{


  CRect rett;
  GetClientRect( &rett );

	rett.top    =    OFFS_COORDY;
  rett.bottom = rett.top + 360;
	rett.left   = OFFS_COORDY;
  rett.right  = rett.Width();

  num_container = 0;

	// --------        CONTENITORE BASE - Livello 0       ------------
	container_main = new CContainer_main( L"menu base", rett, this, IDD_CONTAINER );
	container_main->ShowWindow( SW_SHOW );


  #define BRD_SUP       14

  #define COLA_SX      440
  #define COLB_SX      (COLA_SX+SPACE_X+BTN_DIMX)
  #define COLC_SX      (COLB_SX+SPACE_X+BTN_DIMX)
  #define COLD_SX      (COLA_SX-SPACE_X-BTN_DIMX)

  #define SPACE_X       14
  #define SPACE_Y       14
  #define BTN_DIMX     250 // BUTTONS WIDTH
  #define BTN_DIMY      58 // BUTTONS HEIGHT


	// * * * *    PRIMA COLONNA      * * * *
	CMenu_button::hook_pos = CMenu_button::bottom_left; // child di livello 1 allineati sotto e a sinistra

	// AUTOMATION BUTTON (num_menu_btn=0)
  rett.top    =                BRD_SUP;
  rett.bottom = rett.top    + BTN_DIMY;
  rett.left   =                COLA_SX;
  rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_900[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[0] );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;

 	// INSPECTION BUTTON  (num_menu_btn=1)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_902[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*740*/ ); // regolo dimensione sottomenu parametri ispezione
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[1] );
  num_menu_btn++;

	// * * * *     SECONDA COLONNA      * * * *
	// PULSANTE RICETTE  (num_menu_btn=2)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLB_SX;
	rett.right  = rett.left   + BTN_DIMX;
	recipe_btn = menu_btn[num_menu_btn] = new CMenu_button( string_120[lng], container_main, &Recipe_management );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[2] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;

	// PULSANTE AVVIO/ARRESTO INSPECTION  (num_menu_btn=3)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	inspection_btn = menu_btn[num_menu_btn] = new CMenu_button( string_150[lng], container_main, &Inspection_startstop  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[3] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;


	// * * * *     TERZA COLONNA      * * * *

	// PULSANTE UTILITA'/FUNZIONI  (num_menu_btn=4)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLC_SX;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_130[lng], container_main );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*450*/ );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[4] );
  num_menu_btn++;

	// PULSANTE DI USCITA  (num_menu_btn=5)
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
	exit_btn = menu_btn[num_menu_btn] = new CMenu_button( string_140[lng], container_main, &On_exit_btn );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[5] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;
  
	// * * * *     TO LEFT DISPLAY SWITCH  (num_menu_btn=6)    * * * *
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLD_SX;
	rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], container_main, &Change_view, -1 );
  menu_btn[num_menu_btn]->MoveWindow( &rett );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;


	// * * * *     LEFT BOTTOM BATCHES   (num_menu_btn=7)   * * * *
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_1300[lng], container_main );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[6] );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;


  #undef BRD_SUP
  #undef COLA_SX
  #undef COLB_SX
  #undef COLC_SX
  #undef SPACE_X
  #undef SPACE_Y
  #undef BTN_DIMX
  #undef BTN_DIMY

	CParameter::dim_ctrl.cy      = 25; // Regolo la dimensione verticale
	CContainer_wnd::mode         = CContainer_wnd::top_left;
	CContainer_wnd::use_ext_rect = false;
	CMenu_button::hook_pos       = CMenu_button::top_right; // child di livello >1 allineati a destra


  // ***************************************************************************
  //
  //                        AUTOMATION PARAMETERS
  //
  // ***************************************************************************

  parcat_1 = L"PLC";
  parcat_2 = NULL;

  //Pour changed for A40L because of two computers 20180305

  if ( IS_PC1 ) // ( !wcsncmp( PC_name, L"PC1", 3 ) ) 
  {

    // *******  SUB-MENU FOR CAROUSEL - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1510[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".PRODSPEED",                    CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1532[lng], string_pcm[lng],   200.0,    10.0,  420.0, &file_manager  ); // Jog high speed (pcs/min)
    //if ( password_mngr ) password_mngr->insert_hmi( parameter[num_params-1], pwd_levels[7] );

    parameter[num_params++] = new CParameter( ".JOGSPEED",                     CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1536[lng], string_pcm[lng],   150.0,    10.0,  420.0, &file_manager  ); // Jog low speed (pcs/min)
    parameter[num_params++] = new CParameter( ".ACCELERATION",                 CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1210[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // acceleration
    parameter[num_params++] = new CParameter( ".DECELERATION",                 CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1212[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // deceleration
    parameter[num_params++] = new CParameter( ".JERK",                         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1208[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // jerk
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.TARGET_HEIGHT_MM",  CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1504[lng], string_mm[lng], 480.3, 457.0, 655.0, &file_manager  ); // Carousel target height//Pour changed from 520 to 655
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.ZEROPOS",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1540[lng], string_unit[lng],   0.50,    -2.0,    2.0, &file_manager  ); // Carousel zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "INPSCREW_AXIS.ZEROPOS",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1542[lng], string_unit[lng],   0.50,    -2.0,    2.0, &file_manager  ); // Input screw zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "TRACKER_AXIS.ZEROPOS",          CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1544[lng], string_unit[lng],   0.50,    -2.0,    2.0, &file_manager  ); // Tracker zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "HVTRANSPORT_AXIS.ZEROPOS",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3510[lng], string_unit[lng],   0.50,    -2.0,    2.0, &file_manager  ); // HV transport zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
	//Pour added for new sever motor 20180127
	parameter[num_params  ] = new CParameter( "HVSORTING_AXIS.ZEROPOS",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3510a[lng], string_unit[lng],   0.50,    -2.0,    2.0, &file_manager  ); // HV transport zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    
//    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.SECFDBK_ZEROPOS", CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1546[lng], string_unit[lng],   0.000,    -4.0,    4.0, &file_manager  ); // Cam zero position second feedback (units)
//    parameter[num_params++]->format_spc = L"%.3lf";
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( "INPUT_BELT.SPEED",              CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1550[lng], string_hz[lng],     25.0,     0.0,   80.0, &file_manager  ); // Input belt speed
    parameter[num_params++]->format_spc = L"%.1lf";

    parameter[num_params++] = new CParameter( "DEVIBRATOR.SPEED",              CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3570[lng], string_percent[lng],  25.0,   0.0,  100.0, &file_manager  ); // Devibrator speed in percent

    num_menu_btn++;

    // *******  SUB-MENU FOR HV LT - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_3520[lng], menu_btn[0]->child );
    hv_menu = menu_btn[num_menu_btn];
    file_manager.Add_separator( string_3520[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position  

    parameter[num_params++] = new CParameter( ".F_HV_ENABLE",                 CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3504[lng],              L"",      1,      0,        1, &file_manager  ); // enable HV functions into PLC
     //Pour removed 20180301
//    parameter[num_params  ] = new CParameter( "HV_MANAGER.HVREAD_A",          CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3530[lng], string_unit[lng],   0.50,    0.01,    0.99, &file_manager  ); // HV read phase A
//    parameter[num_params++]->format_spc = L"%.2lf";
//    parameter[num_params  ] = new CParameter( "HV_MANAGER.HVREAD_B",          CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3532[lng], string_unit[lng],   0.50,    0.01,    0.99, &file_manager  ); // HV read phase A
    parameter[num_params  ] = new CParameter( "HV_MANAGER.HVREAD_W",          CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3533[lng], string_unit[lng],   0.50,    0.1,     0.9,  &file_manager  ); // HV read phase width
    parameter[num_params++]->format_spc = L"%.2lf";

/*    parameter[num_params++] = new CParameter( ".HVBLOCK_1.O_VOLTAGE_SET",     CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3540[lng], string_unit[lng],   0,    0,  32767, &file_manager  ); // HV set voltage for HV1
    parameter[num_params++] = new CParameter( ".HVBLOCK_2.O_VOLTAGE_SET",     CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3542[lng], string_unit[lng],   0,    0,  32767, &file_manager  ); // HV set voltage for HV2
    parameter[num_params++] = new CParameter( ".HVBLOCK_3.O_VOLTAGE_SET",     CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3544[lng], string_unit[lng],   0,    0,  32767, &file_manager  ); // HV set voltage for HV3 */

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( ".HVBLOCK_1.O_VOLTAGE_SET",   CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3540[lng], string_kvolt[lng],   0,  0.0,   20.0, &file_manager  ); // HV set voltage for HV1
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_2.O_VOLTAGE_SET",   CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3542[lng], string_kvolt[lng],   0,  0.0,   20.0, &file_manager  ); // HV set voltage for HV2
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_3.O_VOLTAGE_SET",   CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3544[lng], string_kvolt[lng],   0,  0.0,   20.0, &file_manager  ); // HV set voltage for HV3
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_4.O_VOLTAGE_SET",   CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3546[lng], string_kvolt[lng],   0,  0.0,   20.0, &file_manager  ); // HV set voltage for HV4
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    /*
    parameter[num_params++] = new CParameter( ".HVBLOCK_1.THRESHOLD",       CTYPE_INT|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3550[lng], string_unit[lng],   0,  0.0, 20000.0, &file_manager  ); // Threshold set for HV1
    parameter[num_params++] = new CParameter( ".HVBLOCK_2.THRESHOLD",       CTYPE_INT|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3552[lng], string_unit[lng],   0,  0.0, 20000.0, &file_manager  ); // Threshold set for HV2
    parameter[num_params++] = new CParameter( ".HVBLOCK_3.THRESHOLD",       CTYPE_INT|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3554[lng], string_unit[lng],   0,  0.0, 20000.0, &file_manager  ); // Threshold set for HV3
    parameter[num_params++] = new CParameter( ".HVBLOCK_4.THRESHOLD",       CTYPE_INT|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3556[lng], string_unit[lng],   0,  0.0, 20000.0, &file_manager  ); // Threshold set for HV4
    parameter[num_params++] = new CParameter( "HV_MANAGER.MAX_ERROR",       CTYPE_INT|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_2080[lng], string_unit[lng], 900,  0.0, 32000.0, &file_manager  ); // Maximum overall error
    */
//Pour changed 20180301
    parameter[num_params  ] = new CParameter( ".HVBLOCK_1.THRESHOLD_MIN",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3550[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV1 min
	hv1min_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 32767 );
	parameter[num_params  ] = new CParameter( ".HVBLOCK_1.THRESHOLD_MAX",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3550a[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV1 max
	hv1max_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 32767 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_2.THRESHOLD_MIN",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3552[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV2 min
	hv2min_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 32767 );
	parameter[num_params  ] = new CParameter( ".HVBLOCK_2.THRESHOLD_MAX",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3552a[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV2 max
	hv2max_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 32767 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_3.THRESHOLD_MIN",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3554[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV3 min
	hv3min_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 32767 );
	parameter[num_params  ] = new CParameter( ".HVBLOCK_3.THRESHOLD_MAX",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3554a[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV3 max
	hv3max_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 32767 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_4.THRESHOLD_MIN",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3556[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV4 min
	hv4min_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 32767 );
	parameter[num_params  ] = new CParameter( ".HVBLOCK_4.THRESHOLD_MAX",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3556a[lng], string_kvolt[lng],   1,  0.0, 50.0, &file_manager  ); // Threshold set for HV4 max
	hv4max_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 32767 );
//    Pour removed 20180301
//    parameter[num_params  ] = new CParameter( "HV_MANAGER.MAX_ERROR",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_2080[lng], string_ma[lng],  10,  0.0, 20.0, &file_manager  ); // Maximum overall error
//    hvmax_err = parameter[num_params];
//    parameter[num_params++]->Scaling_parameters( 0.0, 0, 20.0, 32767 );


//    parameter[num_params++]->format_spc = L"%.2lf";
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params  ] = new CParameter( "HVSPIN_MOTOR.SPEED",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3522[lng], string_hz[lng],  25.0,  0.0,   80.0, &file_manager  ); // Spinning speed of HV belt
    parameter[num_params++]->format_spc = L"%.1lf";

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_HV1_LOOP",                 CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3506[lng],         L"",      1,      0,      1, &file_manager  ); // enable HV functions into PLC
    f_hvloop_a = parameter[num_params-1];
	//Pour added 20180301
	parameter[num_params++] = new CParameter( ".F_HV2_LOOP",                 CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3506b[lng],         L"",      1,      0,      1, &file_manager  ); // enable HV functions into PLC
    f_hvloop_b = parameter[num_params-1];
	parameter[num_params++] = new CParameter( ".F_HV3_LOOP",                 CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3506c[lng],         L"",      1,      0,      1, &file_manager  ); // enable HV functions into PLC
    f_hvloop_c = parameter[num_params-1];
	parameter[num_params++] = new CParameter( ".F_HV4_LOOP",                 CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3506d[lng],         L"",      1,      0,      1, &file_manager  ); // enable HV functions into PLC
    f_hvloop_d = parameter[num_params-1];
	//Pour added 20180301

    RECT area;
    menu_btn[num_menu_btn]->child->GetWindowRect(&area);
    area.top -= 210;//Pour changed from 60 to 210 20180301
	area.bottom -=210;
    menu_btn[num_menu_btn]->child->MoveWindow(&area);
    num_menu_btn++;

    menu_btn[num_menu_btn] = new CMenu_button( string_3560[lng], menu_btn[num_menu_btn-1]->child, &HVdata_record );
    hvdatarec_btn = menu_btn[num_menu_btn];
    num_menu_btn++;



    // *******  SUB-MENU FOR GRIPPERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1610[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1610[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".OPEN_OFFSET",       CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1620[lng], string_step[lng],   10.0,    0.0,    60.0, &file_manager  ); // Grippers opening phase//Pour 36-60 20180317
    parameter[num_params++] = new CParameter( ".ANT_OPEN_MAX",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1622[lng], string_step[lng],    0.5,    0.0,     2.0, &file_manager  ); // Grippers opening advance 
    parameter[num_params++] = new CParameter( ".OPEN_PRESSURE",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1624[lng], string_unit[lng],    3.5,    0.0,     8.0, &file_manager  ); // Grippers opening pressure
    parameter[num_params++] = new CParameter( ".CLOSE_OFFSET",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1630[lng], string_step[lng],   20.0,    0.0,    60.0, &file_manager  ); // Grippers closing phase//Pour 36-60 20180317
    parameter[num_params++] = new CParameter( ".ANT_CLOSE_MAX",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1632[lng], string_step[lng],    0.5,    0.0,     2.0, &file_manager  ); // Grippers closing advance 
    parameter[num_params++] = new CParameter( ".CLOSE_PRESSURE",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1634[lng], string_unit[lng],    1.5,    0.0,     8.0, &file_manager  ); // Grippers closing pressure 
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GRIPPERS",  CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1612[lng],              L"",      0,      0,       1, &file_manager ); // check opening/closing
    parameter[num_params++] = new CParameter( ".GROPEN_DELAY",      CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1614[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for opening error
    parameter[num_params++] = new CParameter( ".GRCLOSE_DELAY",     CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1616[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for closing error
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params  ] = new CParameter( ".F_CLOSED_LOOP",     CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1636[lng],              L"",      0,      0,       1                ); // closed loop
    f_closed_loop = parameter[num_params++];
    ASSERT( f_closed_loop==parameter[num_params-1] );

    num_menu_btn++;

    // *******  SUB-MENU FOR DEVIATORS/OUTPUT - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1640[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1640[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); //380 );
    int main_menu_btn = num_menu_btn;

    parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_330[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
	//Pour added for seperately doors alarm 20180525
	parameter[num_params++] = new CParameter( ".F_ALARM_HVDOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_330a[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    parameter[num_params++] = new CParameter( ".F_ENABLE_LIGHTCHK",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_332[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MAX_WIDTH", CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1639[lng], string_step[lng],    0.9,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MIN_WIDTH", CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1638[lng], string_step[lng],    0.1,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GOODS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1660[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output goods
    parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS1",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1662[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects1 
    parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS2",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1664[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects2
	//Pour added for rejects 3
	parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS3",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1664a[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects3

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "PRODUCT_FLOW.LOAD_VAL",           CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1654[lng], string_unit[lng],      0,      0,  1023  ); // Loading initial value
    parameter[num_params++] = new CParameter( ".F_REJECT_SIMULATE",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1656[lng],              L"",      0,      0,     1  ); // rejects simulation
    num_menu_btn++;

    // DELAYS
    menu_btn[num_menu_btn] = new CMenu_button( string_1750[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1750[lng] );
    //menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    //parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_330[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn-1]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1752[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1754[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1756[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1758[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1760[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej2 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1762[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej2 full
	//Pour added for HV rejection delay 20180525
	parameter[num_params++] = new CParameter( "MACHINE.REJ3_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1760a[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej3 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ3_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1762a[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej3 full
	//Pour added for MAX quantity of HVrejection 20180525
	parameter[num_params++] = new CParameter( ".MAX_CONTINUOUSREJECTS",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1762b[lng], string_msec[lng], 20,   0, 100, &file_manager  ); // Max number of HV rejection
    #ifdef INPUTBELT_SENSOR // Id defined set input sensor delays
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY1",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1764[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY2",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1766[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    #endif
    #ifdef FALLEN_CONTAINER // If defined, use code to check fallen containers/set delay/enable alarm
      parameter[num_params++] = new CParameter( "ALARMS_CHECK.FALLEN_DELAY",     CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1769[lng], string_msec[lng],   300,   0, 1000000, &file_manager  ); // Delay to trigger fallen container alarm
    #endif      
    num_menu_btn++;

    // DISTANCES
    menu_btn[num_menu_btn] = new CMenu_button( string_1653[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1653[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV1",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1641[lng], string_step[lng],   77.50,  20.0, 100.0, &file_manager  ); // Distance input photosens - first deviator 
	//Pour changed 20180127
	parameter[num_params++] = new CParameter( ".DIST_DEV1_DEV2",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1645[lng], string_step[lng],   4.00,  1.0, 10.0, &file_manager  ); // Distance input photosens - first deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV3",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1647[lng], string_step[lng],   77.50,  20.0, 200.0, &file_manager  ); // Distance input photosens - first deviator of HV
	//Pour changed 20180127
    parameter[num_params++] = new CParameter( ".DIST_LOAD_GOOD",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1642[lng], string_step[lng],   82.75,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ1",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1643[lng], string_step[lng],   87.77,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
    parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ2",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1644[lng], string_step[lng],   95.09,   1.0, 100.0, &file_manager  ); // Distance first deviator - second deviator
	//Pour added 20180301
    parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ3",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1644b[lng], string_step[lng],   95.09,   1.0, 200.0, &file_manager  ); // Distance first deviator - HV reject deviator
	parameter[num_params++] = new CParameter( ".DIST_LOAD_HVGOOD",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1644c[lng], string_step[lng],   95.09,   1.0, 200.0, &file_manager  ); // Distance first deviator - HV good deviator
	//Pour added 20180301
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWI",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1646[lng], string_step[lng],    2.3,    0.0,   4.0, &file_manager  ); // Main starwheel suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWO",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1648[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Main starwheel blowing lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDI",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1650[lng], string_step[lng],    1.3,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDO",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1652[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels blowing lenght (steps)
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_DV2RI",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1988[lng], string_step[lng],    2.3,    0.0,   4.0, &file_manager  ); // Main starwheel suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_DV2RO",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1990[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Main starwheel blowing lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_DV2LI",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1992[lng], string_step[lng],    1.3,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_DV2LO",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1994[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels blowing lenght (steps)
    num_menu_btn++;
/*	
	//Pour added 20180127
	menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
	
	parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_DV3RI",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1988a[lng], string_step[lng],    2.3,    0.0,   4.0, &file_manager  ); // Main starwheel suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_DV3RO",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1990a[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Main starwheel blowing lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_DV3LI",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1992a[lng], string_step[lng],    1.3,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_DV3LO",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1994a[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels blowing lenght (steps)
    num_menu_btn++;
	//Pour added 20180127
*/	

    // *******  SUB-MENU FOR FIRST SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1700[lng], menu_btn[0]->child );
    //UINT nmbt = num_menu_btn-1;

    file_manager.Add_separator( string_1700[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "SEND_SPIN_PARAMETERS.RUN",                 CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1710[lng],              L"",      1,      0,     1                 ); // send data
 
    menu_btn[num_menu_btn+1]  = new CMenu_button( string_1710[lng],  menu_btn[num_menu_btn]->child, &Send_spin_parameters      ); // ATTENTION TO num_menu_btn!!!

    menu_btn[num_menu_btn]->child->posy += 30; // Set vertical position
    parameter[num_params++] = new CParameter( ".ALIGN_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1718[lng],              L"",      1,      0,     1, &file_manager  ); // enable alignment spin cycle
    parameter[num_params++] = new CParameter( ".F_CHECK_LAM",            CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1730[lng],              L"",      1,      0,     1, NULL           ); // enable LAM error detection
    parameter[num_params++] = new CParameter( ".SPIN1_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 1
    parameter[num_params++] = new CParameter( ".VEL1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],   1000,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   3000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN1",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY1",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN1_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle1
    num_menu_btn++;

    num_menu_btn++; // for send_spin_parameters


    // *******  SUB-MENU FOR SECOND SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1701[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1701[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN2_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 2
    parameter[num_params++] = new CParameter( ".VEL2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    800,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN2",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     12,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY2",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN2_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle2
    num_menu_btn++;


    // *******  SUB-MENU FOR THIRD SPINNING - num_menu_btn=  ******* 
    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM
      menu_btn[num_menu_btn] = new CMenu_button( string_1707[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1707[lng] );
    #else
      menu_btn[num_menu_btn] = new CMenu_button( string_1703[lng], menu_btn[0]->child );
      file_manager.Add_separator( string_1703[lng] );
    #endif
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN3_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin3
    parameter[num_params++] = new CParameter( ".VEL3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    180,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN3",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],      4,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY3",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for spin3
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN_LINE",     CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup
    num_menu_btn++;


    // *******  SUB-MENU FOR EJECTOR MASKS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1668[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1668[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_ENABLE_SPINCHK",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1666[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV2_SPINCHK",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1667[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // 
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
   
    parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE1",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1670[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_ENABLE_PARTICLE2",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1672[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING1",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1674[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_ENABLE_FILLING2",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1675[lng],  L"",   0,   0,   1, &file_manager ); // 
    

    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM  // Station 3 is for particle
      ADS_write_value( ".F_PARTICLE_3", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high to fix counting for particles/particle3
      parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1673[lng],  L"",   0,   0,   1, &file_manager ); // 
    #else // Normal cosmetic
      parameter[num_params++] = new CParameter( ".F_ENABLE_COSMETIC",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1678[lng],  L"",   0,   0,   1, &file_manager ); // 
    #endif
   
    parameter[num_params++] = new CParameter( ".F_ENABLE_TIPCAP",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1680[lng],  L"",   0,   0,   1, &file_manager ); // 
	//Pour removed 20180130
    //parameter[num_params++] = new CParameter( ".F_ENABLE_LD",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1980[lng],  L"",   0,   0,   1, &file_manager ); // 

    #ifdef FO_COLOR
      parameter[num_params++] = new CParameter( ".F_ENABLE_FOCOLOR",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1774[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    #endif
    #ifdef DOTRING_COLOR
      parameter[num_params++] = new CParameter( ".F_ENABLE_DRCOLOR",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1779[lng],  L"",   0,   0,   1, &file_manager ); // DR color
    #endif

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //Pour changed 20180124  
    parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE1",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1682[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE2",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1683[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_FILLING1",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1684[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_FILLING2",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1685[lng],  L"",   0,   0,   1, &file_manager ); // 

    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM  // Station 3 is for particle
      parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1687[lng],  L"",   0,   0,   1, &file_manager ); // 
    #else // Normal cosmetic
      parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1686[lng],  L"",   0,   0,   1, &file_manager ); // 
    #endif

    parameter[num_params++] = new CParameter( ".F_DEV2_TIPCAP",       CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1688[lng],  L"",   0,   0,   1, &file_manager ); // 

//    parameter[num_params++] = new CParameter( ".F_DEV2_LD",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1982[lng],  L"",   0,   0,   1, &file_manager ); // 
    //Pour changed 20180124

//    parameter[num_params++] = new CParameter( ".F_DEV2_HV",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1982[lng],  L"",   0,   0,   1, &file_manager ); // 

    #ifdef FO_COLOR
      parameter[num_params++] = new CParameter( ".F_DEV2_FOCOLOR",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1784[lng],  L"",   0,   0,   1, &file_manager ); // FO color
    #endif
    #ifdef DOTRING_COLOR
      parameter[num_params++] = new CParameter( ".F_DEV2_DRCOLOR",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1789[lng],  L"",   0,   0,   1, &file_manager ); // DR color
    #endif


    num_menu_btn++;

    // *******  SUB-MENU FOR TRIGGERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1690[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1690[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params  ] = new CParameter( ".TIPCAP_TRIGGER_PHASE",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1691[lng], string_step[lng], 0.10, 0.0, 0.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
    #ifdef FO_COLOR
      parameter[num_params  ] = new CParameter( ".FOCOLOR_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1692[lng], string_step[lng],  0.2, 0.0, 0.95, &file_manager  );
      parameter[num_params++]->format_spc = L"%.2lf";
    #endif
    #ifdef DOTRING_COLOR
      parameter[num_params  ] = new CParameter( ".DRCOLOR_TRIGGER_PHASE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1696c[lng], string_step[lng],  0.2, 0.0, 0.95, &file_manager  );
      parameter[num_params++]->format_spc = L"%.2lf";
    #endif
    parameter[num_params  ] = new CParameter( ".PART1_TRIGGER_PHASE",      CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1697[lng], string_step[lng], 0.11, 0.01, 1.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".PART2_TRIGGER_PHASE",      CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1698[lng], string_step[lng], 0.12, 0.01, 1.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";

    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM  // Station 3 is for particle
      parameter[num_params  ] = new CParameter( ".COSM_TRIGGER_PHASE",       CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1698b[lng], string_step[lng], 0.13, 0.01, 1.91, &file_manager  );
    #else // Normal cosmetic
      parameter[num_params  ] = new CParameter( ".COSM_TRIGGER_PHASE",       CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1699[lng], string_step[lng], 0.13, 0.0, 3.91, &file_manager  );
    #endif
    parameter[num_params++]->format_spc = L"%.2lf";

    num_menu_btn++;


    // *******  SUB-MENU FOR CALIBRATION/ADVANCED PARAMETERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1800[lng], menu_btn[0]->child );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[7] );
    file_manager.Add_separator( string_1800[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    calibration_menu = menu_btn[num_menu_btn];
    main_menu_btn = num_menu_btn;
    num_menu_btn++;


    // ABC phases
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1809[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1809[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".INPUT_PHASE_A",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1810[lng], string_step[lng],   1.50,    0.0,   3.0, &file_manager  ); // Input phase for A valves
    parameter[num_params++] = new CParameter( ".INPUT_PHASE_B",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1812[lng], string_step[lng],   2.50,    0.0,   3.0, &file_manager  ); // Input phase for B valves
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

	//Pour added 20180317
	parameter[num_params++] = new CParameter( ".INPUT_HV_PHASE_A",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1810a[lng], string_step[lng],   1.50,    0.0,   3.0, &file_manager  ); // Input HV phase for A valves
    parameter[num_params++] = new CParameter( ".INPUT_HV_PHASE_B",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1812a[lng], string_step[lng],   2.50,    0.0,   3.0, &file_manager  ); // Input HV phase for B valves
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
	//Pour added 20180317

    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCA",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1820[lng], string_step[lng],   1.50,    0.0,   4.0, &file_manager  ); // Input cam phase for A cameras
    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCB",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1822[lng], string_step[lng],   3.50,    0.0,   4.0, &file_manager  ); // Input cam phase for B cameras
    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCC",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1824[lng], string_step[lng],   0.50,    0.0,   4.0, &file_manager  ); // Input cam phase for C cameras
    num_menu_btn++;


    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1828[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1828[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MAX_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1830[lng], string_mm[lng],    562.0,  200.0,    700.0, &file_manager  ); // Maximum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MIN_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1832[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Minimum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_mm[lng],    557.0,  200.0,    700.0, &file_manager  ); // Top point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_ec[lng],  9480033,      0, 16777215, &file_manager  ); // Top point height (ec)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Low point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_ec[lng],  9569182,      0, 16777215, &file_manager  ); // Low point height (ec)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    num_menu_btn++;

    // Spin offsets and distances
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1848[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1848[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
	//Pour added 20180303
    menu_btn[num_menu_btn]->child->GetWindowRect(&area);
    area.top -= 40; //Pour changed from 60 to 210 20180301
	area.bottom -=40;
    menu_btn[num_menu_btn]->child->MoveWindow(&area);
	//Pour added 20180303

	
    parameter[num_params++] = new CParameter( ".SPIN1_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1850[lng], string_unit[lng],    8,    0,   18, &file_manager  ); // Spin1 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN2_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1852[lng], string_unit[lng],    4,    0,   18, &file_manager  ); // Spin2 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN3_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1854[lng], string_unit[lng],    1,    0,   18, &file_manager  ); // Spin3 offset (motors)
    parameter[num_params++] = new CParameter( ".ALIGN_OFFSET",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1856[lng], string_step[lng], 20.0,  0.0, 36.0, &file_manager  ); // Align offset (steps)
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".PART1_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1801[lng], string_step[lng], 32.0,  0.0, 36.0, &file_manager  ); // datarecord particle1 offset (heads)
    parameter[num_params++] = new CParameter( ".PART2_OFS",                     CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1802[lng], string_step[lng], 24.0,  0.0, 36.0, &file_manager  ); // datarecord particle2 offset (heads)
    parameter[num_params++] = new CParameter( ".COSM_OFS",                      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1803[lng], string_step[lng], 12.0,  0.0, 36.0, &file_manager  ); // datarecord particle3/cosmetic offset (heads)
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".DIST_LOAD_TCA",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1860[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and tip/cap cameras
    //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
    #ifdef FO_COLOR
      parameter[num_params++] = new CParameter( ".DIST_LOAD_FO",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1861[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and FO color camera
    #endif
    #ifdef DOTRING_COLOR
      parameter[num_params++] = new CParameter( ".DIST_LOAD_DR",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1861b[lng], string_unit[lng],    3,    1,   15, &file_manager  ); // Distance between input and DR color camera
    #endif
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1A",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1864[lng], string_unit[lng],    7,    0,   15, &file_manager  ); // Distance between input and first part A
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1B",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1865[lng], string_unit[lng],    7,    0,   15, &file_manager  ); // Distance between input and first part B
	parameter[num_params++] = new CParameter( ".DIST_LOAD_P1C",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1866[lng], string_unit[lng],    8,    0,   15, &file_manager  ); // Distance between input and first part C
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1D",                 CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1867[lng], string_unit[lng],    8,    0,   15, &file_manager  ); // Distance between input and first part D
	//Pour changed 20180301
    parameter[num_params++] = new CParameter( ".DIST_LOAD_HV1",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3534[lng], string_step[lng],   80,   30,  150, &file_manager  ); // Distance between input and HV1 result in machine steps
	parameter[num_params++] = new CParameter( ".DIST_LOAD_HV2",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3534b[lng], string_step[lng],   80,   30,  150, &file_manager  ); // Distance between input and HV2 result in machine steps
	parameter[num_params++] = new CParameter( ".DIST_LOAD_HV3",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3534c[lng], string_step[lng],   80,   30,  150, &file_manager  ); // Distance between input and HV3 result in machine steps
	parameter[num_params++] = new CParameter( ".DIST_LOAD_HV4",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3534d[lng], string_step[lng],   80,   30,  150, &file_manager  ); // Distance between input and HV4 result in machine steps

    num_menu_btn++;






    // *******  SUB-MENU FOR BATCH - num_menu_btn=7  ******* 
/*    menu_btn[num_menu_btn] = new CMenu_button( string_1310[lng], menu_btn[7]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position */

    menu_btn[num_menu_btn++] = new CMenu_button( string_1310[lng],  menu_btn[7]->child, &Reset_statistics      ); 

    if ( batch_mngr )
    {
      // batch start/stop
      menu_btn[num_menu_btn++] = new CMenu_button( string_1304[lng],  menu_btn[7]->child, &Batch_startstop     ); 
      batch_btn = menu_btn[num_menu_btn-1];
      if ( batch_mngr->current.status ) batch_btn->SetWindowTextW( string_1306[lng] );

      // batch print/report
      menu_btn[num_menu_btn++] = new CMenu_button( string_1308[lng],  menu_btn[7]->child, &Batch_report        ); 
    }

  }


  // ***************************************************************************
  //
  //                           PARAMETRI DI ISPEZIONE/MISURA
  //
  // ***************************************************************************

  parcat_1 = L"INSPECTION";
  parcat_2 = NULL;

	parameter[num_params++] = new CParameter( &show_rejects,  CTYPE_BOOL8, 0, menu_btn[1]->child, string_2124[lng],   0,                1,  0,   0, NULL            );
	parameter[num_params++] = new CParameter( &pseudo_colors, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2122[lng],   0,                1,  0,   0, NULL, &Set_LUT  );


  #if STN1==PARTICLE_BOTH // First  station defined for particle with selectable back/bottom light
    if ( IS_PC1 )	parameter[num_params++] = new CParameter( &stn1_part_back, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2076[lng],   0,             1,  0,   0, &file_manager, &Set_stn1_mode     );
  #endif


    #ifdef NEWCAP_V30
      if ( IS_PC1 )
      {
        ADS_write_value( ".F_CAP_V30", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  //  	parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
        parameter[num_params++] = new CParameter( "TRIGGER_CAP_V30.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
      }
    #endif

    #ifdef NEWCAP_DOUBLE
      ADS_write_value( ".F_DOUBLE_CAP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  	  parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
      parameter[num_params++] = new CParameter( "TRIGGER_DOUBLE_CAP.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
    #endif

    #ifdef NEW_TRIPLE_TIP
      ADS_write_value( ".F_TRIPLE_TIP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  	  //parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
      //parameter[num_params++] = new CParameter( "TRIGGER_DOUBLE_CAP.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
    #endif



  // -----------------------------   S O T T O M E N U     O F     E A C H     C A M E R A    ---------------------------------------------
	for ( UINT i=0 ; i<num_tlc ; i++ ) // Sotto gruppo parametri telecamere - Livello 1 - menu_btn[20,21,22]
  {
    wchar_t msg[50+1];
//    swprintf( msg, string_810[lng], i+1 );
    swprintf( msg, 50, string_800[lng], i, camera[i].name );
	  menu_btn[num_menu_btn] = new CMenu_button( msg, menu_btn[1]->child );
	  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*300*/ );
    file_manager.Add_separator( msg );

    parcat_1 = msg;
    parcat_2 = NULL;


    parameter[num_params++] = new CParameter( &camera[i].shutter,    CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
    parameter[num_params++] = new CParameter( &camera[i].frame_rate, CTYPE_REAL,  0, menu_btn[num_menu_btn]->child, string_2066[lng], string_fps [lng],   50.0,               0.0,            6000.0, &file_manager, &Set_camera, i );
    num_menu_btn++;

    int menu_btn_par = num_menu_btn-1;
    if ( IS_PC1 ) //Pour changed 20180223
    {
      if ( i<3 ) // tip/cap dedicated parameters
      {
        parameter[num_params++] = new CParameter( &camera[i].trigger,    CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
        #if defined NEW_TRIPLE_TIP && !defined COMBINED_TIPCAP
          if ( i==0 ) parameter[num_params++] = new CParameter( "TRIGGER_TRIPLE_TIP.FREE_RUN",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[menu_btn_par]->child, string_606[lng],  L"",   0,   0,   1, NULL ); // 
        #endif
        if ( tip_insp[i] ) tip_insp[i]->Add_menu_parameters( menu_btn[num_menu_btn-1]->child );
      }

      if ( i>=3 && i<=6 ) //Pour changed from 3-6 20180124      // particle1/filling dedicated parameters
      {
        if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( fillingl_insp[i] ) fillingl_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }

      //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
      #ifdef FO_COLOR
        if ( i==7 )  // FO color dedicated parameters
        {
          parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
          if ( focolor_insp[i] ) focolor_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
          if ( bottom_insp [i] ) bottom_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
          if ( oralfo_insp [i] ) oralfo_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        }
      #endif

      #ifdef DOTRING_COLOR
        if ( i==7 || i==8 )  // dotring color dedicated parameters
        {
          if ( i==7 ) parameter[num_params++] = new CParameter( "TRIGGER_DOTRING.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[menu_btn_par]->child, string_606[lng],  L"",   0,   0,   1, NULL ); // 
          parameter[num_params++] = new CParameter( &camera[i].trigger, CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
          if ( drcolor_insp[i] ) drcolor_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        }
      #endif

    }

    if ( IS_PC2 ) //Pour changed 20180223
    {
//      if ( i>=5 && i<=6 )       // particle2/filling dedicated parameters
		if ( i<4 )                //Pour changed 20180124
      {
        if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( fillingl_insp[i] ) fillingl_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }
//      if ( i>=7 && i<=8 )       // particle3/filling dedicated parameters
		else                      //Pour changed 20180124
      {
        if ( particle_insp[i] ) particle_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
        if ( cosmetic_insp[i] ) cosmetic_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
      }
    }

  }


  #ifndef NEW_PARTICLE // For new particle DON'T ADD learning menu

    menu_btn[1]->child->posy += 10; // Set vertical position

    // particle start/stop learning - show learning
	  parameter[num_params++] = new CParameter( &learning,    CTYPE_BOOL8, 0, menu_btn[1]->child, string_2052[lng], 0,  0,  0, 1, NULL, &Learn_reflections );

    // Add reflections sub-menu
    int refl_menu = num_menu_btn;
    menu_btn[num_menu_btn++] = new CMenu_button( string_2034[lng], menu_btn[1]->child );
	  menu_btn[refl_menu]->child->new_size( 320, 100 );

    menu_btn[num_menu_btn++] = new CMenu_button( string_2054[lng], menu_btn[refl_menu]->child, &Show_reflections   );
    menu_btn[num_menu_btn++] = new CMenu_button( string_2042[lng], menu_btn[refl_menu]->child, &Filter_reflections );
    menu_btn[num_menu_btn++] = new CMenu_button( string_2036[lng], menu_btn[refl_menu]->child, &Export_reflections );
    menu_btn[num_menu_btn++] = new CMenu_button( string_2038[lng], menu_btn[refl_menu]->child, &Import_reflections );

  #endif // NEW_PARTICLE - For new particle DON'T ADD learning menu











  // ***************************************************************************
  //
	//               ADD FUNCTIONS/UTILITIES	( container menu_btn[4] )
  //
  // ***************************************************************************

/*  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], menu_btn[4]->child, &Change_view       );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;  */

  parameter[num_params++] = new CParameter( ".O_MACHINE_LIGHT", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_124[lng],  L"", 0, 0, 1 ); // machine lights

  parameter[num_params++] = new CParameter( ".F_RUN_BELTS",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_128[lng],  L"", 1, 0, 1 ); // run belt/s

  parameter[num_params++] = new CParameter( "DEVIBRATOR.RUN",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_3568[lng], L"", 1, 0, 1 ); // run devibrator


  #ifdef REVERSE_BELT    // If defined button is added to allow reverse of belt in manual/jog mode
    parameter[num_params++] = new CParameter( ".F_REVERSE_BELT",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_142[lng], L"", 1, 0, 1 ); // reverse input belt direction in jog mode
  #endif

  #ifdef VACUUM_PUMP // if defined add button connected to output 6th board/4th output
    parameter[num_params++] = new CParameter( ".O_VACUUM_PUMP",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_340[lng], L"", 1, 0, 1 ); // run vacuum pump
  #endif

  menu_btn[num_menu_btn] = new CMenu_button( string_160[lng], menu_btn[4]->child, &Movie_startstop   );
	movie_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  #ifdef NEW_LOGGER // log alarms separately and add button to show them
    menu_btn[num_menu_btn++] = new CMenu_button( string_3900[lng], menu_btn[4]->child, &Show_log  );
  #endif

  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
  }

	menu_btn[num_menu_btn] = new CMenu_button( string_170[lng], menu_btn[4]->child, &Save_images       );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveimages_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  //Pour removed 20180224
/*
//	parameter[num_params++] = new CParameter( &datarec_on, CTYPE_BOOL8, 0, menu_btn[4]->child, string_2130[lng], 0,  0,  0, 1, NULL, NULL );
	menu_btn[num_menu_btn] = new CMenu_button( string_304[lng], menu_btn[4]->child, &Data_record       );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  inpdatarec_btn = menu_btn[num_menu_btn];
  num_menu_btn++;
*/

  #ifdef SAVE_INPUTDATA
    if ( IS_PC1 )
    {
      menu_btn[num_menu_btn] = new CMenu_button( string_354[lng], menu_btn[4]->child, &Inpdata_record );
      if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
      inpdatarec_btn = menu_btn[num_menu_btn];
      num_menu_btn++;
    }
    if ( IS_PC2 ) // Used for filling level NITIN
    {
      menu_btn[num_menu_btn] = new CMenu_button( string_360[lng], menu_btn[4]->child, &Inpdata_record );
      if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
      inpdatarec_btn = menu_btn[num_menu_btn];
      num_menu_btn++;
    }
  #endif
	//Pour removed 20180224
/*
	menu_btn[num_menu_btn] = new CMenu_button( string_320[lng], menu_btn[4]->child, &Save_inspections  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveinsp_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

	menu_btn[num_menu_btn] = new CMenu_button( string_324[lng], menu_btn[4]->child, &Save_sequences  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveseq_btn = menu_btn[num_menu_btn];
  num_menu_btn++;
*/
  #ifdef GRIPPER_STATISTICS
  //if ( IS_PC1 )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_8150[lng], menu_btn[4]->child, &Grippers_statistics );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
    num_menu_btn++;
  }
  #endif
  //Pour removed 20180224
  /*
  //#ifdef DEBUGPC //_DEBUG
  if ( test_process )
  {
	//menu_btn[num_menu_btn++] = new CMenu_button( string_172[lng],  menu_btn[4]->child, &Load_images       );
    menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[4]->child, &Test_process      ); 
    //menu_btn[num_menu_btn++] = new CMenu_button( string_912[lng],  menu_btn[4]->child, &Sequence_acquire  ); 
  }
  //#endif
   // menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[4]->child, &Test_process      ); 
  
 //  ASSERT ( menu_btn[19]==NULL );
 */
}
//Pour added for TIVS-A40L (the end) 20180124



//Pour 20200921
/* Create menu for all functions/parameters */
void CChildView::Create_menu_TIVS_S40(void)
{


  CRect rett;
  GetClientRect( &rett );

	rett.top    =    OFFS_COORDY;
  //rett.bottom = rett.top + 360;
  rett.bottom = rett.top + 168;

  rett.left   = OFFS_COORDY;
  rett.right  = rett.Width()+14;

  num_container = 0;

	// --------        CONTENITORE BASE - Livello 0       ------------
	container_main = new CContainer_main( L"menu base", rett, this, IDD_CONTAINER );
	container_main->ShowWindow( SW_SHOW );


  #define BRD_SUP       14

  #define COLA_SX      440
  #define COLB_SX      (COLA_SX+SPACE_X+BTN_DIMX)
  #define COLC_SX      (COLB_SX+SPACE_X+BTN_DIMX)
  #define COLD_SX      (COLA_SX-SPACE_X-BTN_DIMX)

  #define SPACE_X       14
  #define SPACE_Y       14
  #define BTN_DIMX     250 // BUTTONS WIDTH
  #define BTN_DIMY      58 // BUTTONS HEIGHT


	// * * * *    PRIMA COLONNA      * * * *
	CMenu_button::hook_pos = CMenu_button::bottom_left; // child di livello 1 allineati sotto e a sinistra

	// AUTOMATION BUTTON (num_menu_btn=0)
  rett.top    =                BRD_SUP;
  rett.bottom = rett.top    + BTN_DIMY;
  rett.left   =                COLA_SX;
  rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_900[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[0] );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;

 	// INSPECTION BUTTON  (num_menu_btn=1)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_902[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*740*/ ); // regolo dimensione sottomenu parametri ispezione
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[1] );
  num_menu_btn++;

	// * * * *     SECONDA COLONNA      * * * *
	// PULSANTE RICETTE  (num_menu_btn=2)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLB_SX;
	rett.right  = rett.left   + BTN_DIMX;
	recipe_btn = menu_btn[num_menu_btn] = new CMenu_button( string_120[lng], container_main, &Recipe_management );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[2] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;

	// PULSANTE AVVIO/ARRESTO INSPECTION  (num_menu_btn=3)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	inspection_btn = menu_btn[num_menu_btn] = new CMenu_button( string_150[lng], container_main, &Inspection_startstop  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[3] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;


	// * * * *     TERZA COLONNA      * * * *

	// PULSANTE UTILITA'/FUNZIONI  (num_menu_btn=4)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLC_SX;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_130[lng], container_main );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*450*/ );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[4] );
  num_menu_btn++;

	// PULSANTE DI USCITA  (num_menu_btn=5)
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
	exit_btn = menu_btn[num_menu_btn] = new CMenu_button( string_140[lng], container_main, &On_exit_btn );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[5] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;
  
	// * * * *     TO LEFT DISPLAY SWITCH  (num_menu_btn=6)    * * * *
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLD_SX;
	rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], container_main, &Change_view, -1 );
  menu_btn[num_menu_btn]->MoveWindow( &rett );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;


	// * * * *     LEFT BOTTOM BATCHES   (num_menu_btn=7)   * * * *
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_1300[lng], container_main );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[6] );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;


  #undef BRD_SUP
  #undef COLA_SX
  #undef COLB_SX
  #undef COLC_SX
  #undef SPACE_X
  #undef SPACE_Y
  #undef BTN_DIMX
  #undef BTN_DIMY

	CParameter::dim_ctrl.cy      = 25; // Regolo la dimensione verticale
	CContainer_wnd::mode         = CContainer_wnd::top_left;
	CContainer_wnd::use_ext_rect = false;
	CMenu_button::hook_pos       = CMenu_button::top_right; // child di livello >1 allineati a destra


  // ***************************************************************************
  //
  //                        AUTOMATION PARAMETERS
  //
  // ***************************************************************************

  parcat_1 = L"PLC";
  parcat_2 = NULL;

  //if ( IS_PC1 ) // ( !wcsncmp( PC_name, L"PC1", 3 ) ) 
  {

    // *******  SUB-MENU FOR CAROUSEL - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1510[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".PRODSPEED",                    CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1532[lng], string_pcm[lng],   200.0,    10.0,  420.0, &file_manager  ); // Jog high speed (pcs/min)
    //if ( password_mngr ) password_mngr->insert_hmi( parameter[num_params-1], pwd_levels[7] );

    parameter[num_params++] = new CParameter( ".JOGSPEED",                     CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1536[lng], string_pcm[lng],   150.0,    10.0,  420.0, &file_manager  ); // Jog low speed (pcs/min)
    parameter[num_params++] = new CParameter( ".ACCELERATION",                 CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1210[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // acceleration
    parameter[num_params++] = new CParameter( ".DECELERATION",                 CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1212[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // deceleration
    parameter[num_params++] = new CParameter( ".JERK",                         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1208[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // jerk
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    //parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.TARGET_HEIGHT_MM",  CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1504[lng], string_mm[lng], 480.3, 457.0, 520.0, &file_manager  ); // Carousel target height
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( "INPSCREW_AXIS.ZEROPOS",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1542[lng], string_unit[lng],   0.50,    -3.0,    3.0, &file_manager  ); // Input screw zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.ZEROPOS",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1540[lng], string_unit[lng],   0.50,    -3.0,    3.0, &file_manager  ); // Carousel zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "OUTPUTSTRW_AXIS.ZEROPOS",       CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1549[lng], string_unit[lng],   0.50,    -3.0,    3.0, &file_manager  ); // Input screw zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "TRACKER_AXIS.ZEROPOS",          CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1544[lng], string_unit[lng],   0.50,    -3.0,    3.0, &file_manager  ); // Tracker zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    
    if ( 1 || use_advanced_parameters )
    {
      parameter[num_params  ] = new CParameter( ".TRACK_PERC",              CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1562[lng], string_percent[lng], 62.5,      10,     90, NULL           ); // Tracking percentage 
      parameter[num_params++]->format_spc = L"%.1lf";
    }

//    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.SECFDBK_ZEROPOS", CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1546[lng], string_unit[lng],   0.000,    -4.0,    4.0, &file_manager  ); // Cam zero position second feedback (units)
//    parameter[num_params++]->format_spc = L"%.3lf";
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    /*
    parameter[num_params  ] = new CParameter( "INPUT_BELT.SPEED",              CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1550[lng], string_hz[lng],     25.0,     0.0,   80.0, &file_manager  ); // Input belt speed
    parameter[num_params++]->format_spc = L"%.1lf";

    parameter[num_params++] = new CParameter( "DEVIBRATOR.SPEED",              CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3570[lng], string_percent[lng],  25.0,   0.0,  100.0, &file_manager  ); // Devibrator speed in percent
    */

    num_menu_btn++;


    /*
    // *******  SUB-MENU FOR HV LT - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_3520[lng], menu_btn[0]->child );
    hv_menu = menu_btn[num_menu_btn];
    file_manager.Add_separator( string_3520[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".F_HV_ENABLE",                 CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3504[lng],              L"",      1,      0,        1, &file_manager  ); // enable HV functions into PLC
     
    parameter[num_params  ] = new CParameter( "HV_MANAGER.HVREAD_A",          CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3530[lng], string_unit[lng],   0.50,    0.01,    0.99, &file_manager  ); // HV read phase A
    parameter[num_params++]->format_spc = L"%.2lf";
//    parameter[num_params  ] = new CParameter( "HV_MANAGER.HVREAD_B",          CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3532[lng], string_unit[lng],   0.50,    0.01,    0.99, &file_manager  ); // HV read phase A
    parameter[num_params  ] = new CParameter( "HV_MANAGER.HVREAD_W",          CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3533[lng], string_unit[lng],   0.50,    0.1,     0.9,  &file_manager  ); // HV read phase width
    parameter[num_params++]->format_spc = L"%.2lf";

    parameter[num_params++] = new CParameter( ".HVBLOCK_2.O_VOLTAGE_SET",     CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3542[lng], string_unit[lng],   0,    0,  32767, &file_manager  ); // HV set voltage for HV2
    parameter[num_params++] = new CParameter( ".HVBLOCK_3.O_VOLTAGE_SET",     CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3544[lng], string_unit[lng],   0,    0,  32767, &file_manager  ); // HV set voltage for HV3 

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( ".HVBLOCK_1.O_VOLTAGE_SET",   CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3540[lng], string_kvolt[lng],   0,  0.0,   20.0, &file_manager  ); // HV set voltage for HV1
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_2.O_VOLTAGE_SET",   CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3542[lng], string_kvolt[lng],   0,  0.0,   20.0, &file_manager  ); // HV set voltage for HV2
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_3.O_VOLTAGE_SET",   CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3544[lng], string_kvolt[lng],   0,  0.0,   20.0, &file_manager  ); // HV set voltage for HV3
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_4.O_VOLTAGE_SET",   CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3546[lng], string_kvolt[lng],   0,  0.0,   20.0, &file_manager  ); // HV set voltage for HV4
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( ".HVBLOCK_1.THRESHOLD",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3550[lng], string_ma[lng],   1,  0.0, 20.0, &file_manager  ); // Threshold set for HV1
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 20.0, 32767 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_2.THRESHOLD",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3552[lng], string_ma[lng],   1,  0.0, 20.0, &file_manager  ); // Threshold set for HV2
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 20.0, 32767 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_3.THRESHOLD",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3554[lng], string_ma[lng],   1,  0.0, 20.0, &file_manager  ); // Threshold set for HV3
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 20.0, 32767 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_4.THRESHOLD",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3556[lng], string_ma[lng],   1,  0.0, 20.0, &file_manager  ); // Threshold set for HV4
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 20.0, 32767 );
    parameter[num_params  ] = new CParameter( "HV_MANAGER.MAX_ERROR",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_2080[lng], string_ma[lng],  10,  0.0, 20.0, &file_manager  ); // Maximum overall error
    hvmax_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 20.0, 32767 );


//    parameter[num_params++]->format_spc = L"%.2lf";
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params  ] = new CParameter( "HVSPIN_MOTOR.SPEED",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3522[lng], string_hz[lng],  25.0,  0.0,   80.0, &file_manager  ); // Spinning speed of HV belt
    parameter[num_params++]->format_spc = L"%.1lf";

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_HV_LOOP",                 CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3506[lng],         L"",      1,      0,      1, &file_manager  ); // enable HV functions into PLC
    f_hvloop = parameter[num_params-1];

    RECT area;
    menu_btn[num_menu_btn]->child->GetWindowRect(&area);
    area.top -= 60;
    menu_btn[num_menu_btn]->child->MoveWindow(&area);

    num_menu_btn++;

    menu_btn[num_menu_btn] = new CMenu_button( string_3560[lng], menu_btn[num_menu_btn-1]->child, &HVdata_record );
    hvdatarec_btn = menu_btn[num_menu_btn];
    num_menu_btn++;
*/

    /*


    // *******  SUB-MENU FOR GRIPPERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1610[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1610[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".OPEN_OFFSET",       CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1620[lng], string_step[lng],   10.0,    0.0,    36.0, &file_manager  ); // Grippers opening phase
    parameter[num_params++] = new CParameter( ".ANT_OPEN_MAX",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1622[lng], string_step[lng],    0.5,    0.0,     2.0, &file_manager  ); // Grippers opening advance 
    parameter[num_params++] = new CParameter( ".OPEN_PRESSURE",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1624[lng], string_unit[lng],    3.5,    0.0,     8.0, &file_manager  ); // Grippers opening pressure
    parameter[num_params++] = new CParameter( ".CLOSE_OFFSET",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1630[lng], string_step[lng],   20.0,    0.0,    36.0, &file_manager  ); // Grippers closing phase
    parameter[num_params++] = new CParameter( ".ANT_CLOSE_MAX",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1632[lng], string_step[lng],    0.5,    0.0,     2.0, &file_manager  ); // Grippers closing advance 
    parameter[num_params++] = new CParameter( ".CLOSE_PRESSURE",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1634[lng], string_unit[lng],    1.5,    0.0,     8.0, &file_manager  ); // Grippers closing pressure 
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GRIPPERS",  CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1612[lng],              L"",      0,      0,       1, &file_manager ); // check opening/closing
    parameter[num_params++] = new CParameter( ".GROPEN_DELAY",      CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1614[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for opening error
    parameter[num_params++] = new CParameter( ".GRCLOSE_DELAY",     CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1616[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for closing error
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params  ] = new CParameter( ".F_CLOSED_LOOP",     CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1636[lng],              L"",      0,      0,       1                ); // closed loop
    f_closed_loop = parameter[num_params++];
    ASSERT( f_closed_loop==parameter[num_params-1] );

    num_menu_btn++;

    */

    // *******  SUB-MENU FOR DEVIATORS/OUTPUT - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1640[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1640[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); //380 );
    int main_menu_btn = num_menu_btn;

    parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_330[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    parameter[num_params++] = new CParameter( ".F_ENABLE_LIGHTCHK",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_332[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MAX_WIDTH", CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1639[lng], string_step[lng],    0.9,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MIN_WIDTH", CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1638[lng], string_step[lng],    0.1,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width

    /*
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GOODS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1660[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output goods
    parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS1",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1662[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects1 
    parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS2",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1664[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects2
    */

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "PRODUCT_FLOW.LOAD_VAL",           CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1654[lng], string_unit[lng],      0,      0,  1023  ); // Loading initial value
    parameter[num_params++] = new CParameter( ".F_REJECT_SIMULATE",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1656[lng],              L"",      0,      0,     1  ); // rejects simulation
    num_menu_btn++;

    // DELAYS
    menu_btn[num_menu_btn] = new CMenu_button( string_1750[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1750[lng] );
    //menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    //parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_330[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn-1]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1752[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1754[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1756[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1758[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej1 full
    //parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1760[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej2 full
    //parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1762[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej2 full
    #ifdef INPUTBELT_SENSOR // Id defined set input sensor delays
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY1",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1764[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY2",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1766[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    #endif
    #ifdef FALLEN_CONTAINER // If defined, use code to check fallen containers/set delay/enable alarm
      parameter[num_params++] = new CParameter( "ALARMS_CHECK.FALLEN_DELAY",     CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1769[lng], string_msec[lng],   300,   0, 1000000, &file_manager  ); // Delay to trigger fallen container alarm
    #endif      
    num_menu_btn++;

    // DISTANCES
    menu_btn[num_menu_btn] = new CMenu_button( string_1653[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1653[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV1",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1641  [lng], string_step[lng],   77.50,   1.0, 200.0, &file_manager  ); // Distance input photosens - first deviator 
    parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV2",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1641_2[lng], string_step[lng],   77.50,   1.0, 200.0, &file_manager  ); // Distance input photosens - second deviator 
    parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV3",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1641_3[lng], string_step[lng],   77.50,   1.0, 200.0, &file_manager  ); // Distance input photosens - third deviator 
    parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV4",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1641_4[lng], string_step[lng],   77.50,   1.0, 200.0, &file_manager  ); // Distance input photosens - fourth deviator 
    parameter[num_params++] = new CParameter( ".REJECT_FORCED",               CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1564  [lng], string_unit[lng],       0,     0,  5000, &file_manager  ); // reject forcing for test
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWN",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1646[lng], string_step[lng],    2.3,    0.0,   4.0, &file_manager  ); // Main starwheel suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWP",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1648[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Main starwheel blowing lenght (steps)

	//parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWN",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1646[lng], string_step[lng],    2.3,    0.0,   4.0, &file_manager  ); // Main starwheel suction lenght (steps)
    //parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWP",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1648[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Main starwheel blowing lenght (steps)

//    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDI",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1650[lng], string_step[lng],    1.3,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels suction lenght (steps)
//    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDO",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1652[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels blowing lenght (steps)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    num_menu_btn++;

    // *******  SUB-MENU FOR FIRST SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1700[lng], menu_btn[0]->child );
    //UINT nmbt = num_menu_btn-1;

    file_manager.Add_separator( string_1700[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "SEND_SPIN_PARAMETERS.RUN",                 CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1710[lng],              L"",      1,      0,     1                 ); // send data
 
    menu_btn[num_menu_btn+1]  = new CMenu_button( string_1710[lng],  menu_btn[num_menu_btn]->child, &Send_spin_parameters      ); // ATTENTION TO num_menu_btn!!!

    menu_btn[num_menu_btn]->child->posy += 30; // Set vertical position
    parameter[num_params++] = new CParameter( ".ALIGN_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1718[lng],              L"",      1,      0,     1, &file_manager  ); // enable alignment spin cycle
    parameter[num_params++] = new CParameter( ".F_CHECK_LAM",            CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1730[lng],              L"",      1,      0,     1, NULL           ); // enable LAM error detection
    parameter[num_params++] = new CParameter( ".SPIN1_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 1
    parameter[num_params++] = new CParameter( ".VEL1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],   1000,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   3000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    //parameter[num_params++] = new CParameter( ".NTURN1",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions

		#if SERIAL_N==201900101
	parameter[num_params++] = new CParameter( ".NTURN1",                 CTYPE_REAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
	#else
    parameter[num_params++] = new CParameter( ".NTURN1",                 CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
	#endif


    parameter[num_params++] = new CParameter( ".DELAY1",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN1_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle1
    num_menu_btn++;

    num_menu_btn++; // for send_spin_parameters


    // *******  SUB-MENU FOR SECOND SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1701[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1701[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN2_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 2
    parameter[num_params++] = new CParameter( ".VEL2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    800,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    //parameter[num_params++] = new CParameter( ".NTURN2",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     12,      1,   100, &file_manager  ); // number of revolutions
			#if SERIAL_N==201900101
	parameter[num_params++] = new CParameter( ".NTURN2",                 CTYPE_REAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
	#else
    parameter[num_params++] = new CParameter( ".NTURN2",                 CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
	#endif
    parameter[num_params++] = new CParameter( ".DELAY2",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN2_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle2
    num_menu_btn++;


    // *******  SUB-MENU FOR THIRD SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1719[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1719[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN3_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716c[lng],             L"",      1,      0,     1, &file_manager  ); // enable spin3 (cosmetic)
    //parameter[num_params++] = new CParameter( ".SPIN4_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716n[lng],             L"",      1,      0,     1, &file_manager  ); // enable spin4 (needle)

    parameter[num_params++] = new CParameter( ".VEL3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    180,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    //parameter[num_params++] = new CParameter( ".NTURN3",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],      4,      1,   100, &file_manager  ); // number of revolutions

	#if SERIAL_N==201900101
	parameter[num_params++] = new CParameter( ".NTURN3",                 CTYPE_REAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
	#else
    parameter[num_params++] = new CParameter( ".NTURN3",                 CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
	#endif

    parameter[num_params++] = new CParameter( ".DELAY3",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1224[lng],  L"",  0, 0, 1 ); // inspection loop for spin3
    //parameter[num_params++] = new CParameter( "SPIN4_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1226[lng],  L"",  0, 0, 1 ); // inspection loop for spin3
 //   parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN_LINE",     CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup
    num_menu_btn++;


		    // *******  SUB-MENU FOR FORTH SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1719a[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1719[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( ".SPIN3_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716c[lng],             L"",      1,      0,     1, &file_manager  ); // enable spin3 (cosmetic)
    parameter[num_params++] = new CParameter( ".SPIN4_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716n[lng],             L"",      1,      0,     1, &file_manager  ); // enable spin4 (needle)

    parameter[num_params++] = new CParameter( ".VEL4",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    180,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC4",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC4",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    //parameter[num_params++] = new CParameter( ".NTURN4",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],      4,      1,   100, &file_manager  ); // number of revolutions

	#if SERIAL_N==201900101
	parameter[num_params++] = new CParameter( ".NTURN4",                 CTYPE_REAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
	#else
    parameter[num_params++] = new CParameter( ".NTURN4",                 CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
	#endif

    parameter[num_params++] = new CParameter( ".DELAY4",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1224[lng],  L"",  0, 0, 1 ); // inspection loop for spin3
    parameter[num_params++] = new CParameter( "SPIN4_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1226[lng],  L"",  0, 0, 1 ); // inspection loop for spin3
 //   parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN_LINE",     CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup
    num_menu_btn++;



    // *******  SUB-MENU FOR EJECTOR 1&2 MASKS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_4190[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_4190[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    
    parameter[num_params++] = new CParameter( ".F_DEV1_FLANGE",       CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4200[lng],  L"",   0,   0,   1, &file_manager ); // 
    menu_btn[num_menu_btn]->child->posy += 20; // Set vertical position

//    parameter[num_params++] = new CParameter( ".F_DEV2_SPINCHK",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4198[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE1",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4210[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_FILLING1",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4212[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE2",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4214[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_FILLING2",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4216[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4218[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC2",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4220[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC3",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4222[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC4",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4224[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_BOTTOMA",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4226[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_BOTTOMB",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4228[lng],  L"",   0,   0,   1, &file_manager ); // 
    num_menu_btn++;


    // *******  SUB-MENU FOR EJECTOR 3 MASK - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_4192[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_4192[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

//    parameter[num_params++] = new CParameter( ".F_DEV3_SPINCHK",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4192[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV3_PARTICLE1",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4210[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV3_FILLING1",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4212[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV3_PARTICLE2",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4214[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV3_FILLING2",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4216[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV3_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4218[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV3_COSMETIC2",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4220[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV3_COSMETIC3",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4222[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV3_COSMETIC4",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4224[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV3_BOTTOMA",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4226[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV3_BOTTOMB",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4228[lng],  L"",   0,   0,   1, &file_manager ); // 
    num_menu_btn++;


    // *******  SUB-MENU FOR EJECTOR 4 MASK - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_4194[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_4194[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

//    parameter[num_params++] = new CParameter( ".F_DEV3_SPINCHK",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4192[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV4_PARTICLE1",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4210[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV4_FILLING1",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4212[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV4_PARTICLE2",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4214[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV4_FILLING2",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4216[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV4_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4218[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV4_COSMETIC2",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4220[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV4_COSMETIC3",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4222[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV4_COSMETIC4",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4224[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV4_BOTTOMA",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4226[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV4_BOTTOMB",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4228[lng],  L"",   0,   0,   1, &file_manager ); // 
    num_menu_btn++;






    // *******  SUB-MENU FOR TRIGGERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1690[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1690[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    /*
  tca_trigger_phase:       LREAL :=  0.40; (* Pitch phase value to generate TCA      trigger 0..0.99 *)
  c3a_trigger_phase:       LREAL :=  0.30; (* Pitch phase value to generate C3A      trigger 0..0.99 *)
  c3b_trigger_phase:       LREAL :=  0.40; (* Pitch phase value to generate C3B      trigger 0..0.99 *)
  part1_trigger_phase:     LREAL :=  0.13; (* Cam phase value to generate PARTICLE1  (camera group 2) trigger 0..2.99 *)
  part2_trigger_phase:     LREAL :=  0.14; (* Cam phase value to generate PARTICLE2  (camera group 2) trigger 0..2.99 *)
  cosm1_trigger_phase:     LREAL :=  0.15; (* Cam phase value to generate COSMETIC1  (camera group 1) trigger 0..2.99 *)
  cosm2_trigger_phase:     LREAL :=  0.15; (* Cam phase value to generate COSMETIC1  (camera group 1) trigger 0..2.99 *)
  */

    parameter[num_params  ] = new CParameter( ".TCA_TRIGGER_PHASE",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4254[lng], string_step[lng], 0.10, 0.0, 0.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".C3A_TRIGGER_PHASE",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4256[lng], string_step[lng], 0.10, 0.0, 0.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".C3B_TRIGGER_PHASE",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4258[lng], string_step[lng], 0.10, 0.0, 0.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";

    parameter[num_params  ] = new CParameter( ".COSM1_TRIGGER_PHASE",   CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4250[lng], string_step[lng], 0.10, 0.0, 0.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".PART1_TRIGGER_PHASE",   CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1697[lng], string_step[lng], 0.10, 0.0, 0.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".COSM2_TRIGGER_PHASE",   CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4252[lng], string_step[lng], 0.10, 0.0, 0.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".PART2_TRIGGER_PHASE",   CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1698[lng], string_step[lng], 0.10, 0.0, 0.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";

    num_menu_btn++;


    // *******  SUB-MENU FOR CALIBRATION/ADVANCED PARAMETERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1800[lng], menu_btn[0]->child );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[7] );
    file_manager.Add_separator( string_1800[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    calibration_menu = menu_btn[num_menu_btn];
    main_menu_btn = num_menu_btn;
    num_menu_btn++;


    // ABC phases
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1809[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1809[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".INPUT_PHASE_A",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1810[lng], string_step[lng],   1.50,    0.0,   3.0, &file_manager  ); // Input phase for A valves
    parameter[num_params++] = new CParameter( ".INPUT_PHASE_B",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1812[lng], string_step[lng],   2.50,    0.0,   3.0, &file_manager  ); // Input phase for B valves
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCA",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1820[lng], string_step[lng],   1.50,    0.0,   3.0, &file_manager  ); // Input cam phase for A cameras
    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCB",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1822[lng], string_step[lng],   2.50,    0.0,   3.0, &file_manager  ); // Input cam phase for B cameras
//    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCC",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1824[lng], string_step[lng],   0.50,    0.0,   4.0, &file_manager  ); // Input cam phase for C cameras
    num_menu_btn++;

    /*
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1828[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1828[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MAX_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1830[lng], string_mm[lng],    562.0,  200.0,    700.0, &file_manager  ); // Maximum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MIN_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1832[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Minimum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_mm[lng],    557.0,  200.0,    700.0, &file_manager  ); // Top point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_ec[lng],  9480033,      0, 16777215, &file_manager  ); // Top point height (ec)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Low point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_ec[lng],  9569182,      0, 16777215, &file_manager  ); // Low point height (ec)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    num_menu_btn++;
    */

    // Spin offsets and distances
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1848[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1848[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".SPIN1_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1850[lng], string_unit[lng],   14,    0,   16, &file_manager  ); // Spin1 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN2_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1852[lng], string_unit[lng],   12,    0,   16, &file_manager  ); // Spin2 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN3_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1854[lng], string_unit[lng],    8,    0,   16, &file_manager  ); // Spin3 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN4_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1855[lng], string_unit[lng],    1,    0,   16, &file_manager  ); // Spin3 offset (motors)
    parameter[num_params++] = new CParameter( ".ALIGN_OFFSET",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1856[lng], string_step[lng], 20.0,  0.0, 48.0, &file_manager  ); // Align offset (steps)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    
    parameter[num_params++] = new CParameter( ".DIST_LOAD_TCA",                 CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4240[lng], string_step[lng],       3,   1.0, 100.0, &file_manager  ); // Distance load-TCA
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1A",                 CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4242[lng], string_cams[lng],      19,   1.0, 100.0, &file_manager  ); // Distance load-P1A
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1B",                 CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4244[lng], string_cams[lng],      19,   1.0, 100.0, &file_manager  ); // Distance load-P1B
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1C",                 CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4246[lng], string_cams[lng],      19,   1.0, 100.0, &file_manager  ); // Distance load-P1C
    parameter[num_params++] = new CParameter( ".DIST_LOAD_C3A",                 CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4248[lng], string_step[lng],      50,   1.0, 100.0, &file_manager  ); // Distance load-C3A
    parameter[num_params++] = new CParameter( ".DIST_LOAD_C3B",                 CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4249[lng], string_step[lng],      52,   1.0, 100.0, &file_manager  ); // Distance load-C3B
    
    num_menu_btn++;





    // *******  SUB-MENU FOR BATCH - num_menu_btn=7  ******* 
/*    menu_btn[num_menu_btn] = new CMenu_button( string_1310[lng], menu_btn[7]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position */

    menu_btn[num_menu_btn++] = new CMenu_button( string_1310[lng],  menu_btn[7]->child, &Reset_statistics      ); 

    if ( batch_mngr )
    {
      // batch start/stop
      menu_btn[num_menu_btn++] = new CMenu_button( string_1304[lng],  menu_btn[7]->child, &Batch_startstop     ); 
      batch_btn = menu_btn[num_menu_btn-1];
      if ( batch_mngr->current.status ) batch_btn->SetWindowTextW( string_1306[lng] );

      // batch print/report
      menu_btn[num_menu_btn++] = new CMenu_button( string_1308[lng],  menu_btn[7]->child, &Batch_report        ); 
    }

  }


  // ***************************************************************************
  //
  //                           PARAMETRI DI ISPEZIONE/MISURA
  //
  // ***************************************************************************

  parcat_1 = L"INSPECTION";
  parcat_2 = NULL;

	parameter[num_params++] = new CParameter( &show_rejects,  CTYPE_BOOL8, 0, menu_btn[1]->child, string_2124[lng],   0,                1,  0,   0, NULL            );
	parameter[num_params++] = new CParameter( &pseudo_colors, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2122[lng],   0,                1,  0,   0, NULL, &Set_LUT  );


  #if STN1==PARTICLE_BOTH // First  station defined for particle with selectable back/bottom light
    if ( IS_PC1 )	parameter[num_params++] = new CParameter( &stn1_part_back, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2076[lng],   0,             1,  0,   0, &file_manager, &Set_stn1_mode     );
  #endif


    #ifdef NEWCAP_V30
      if ( IS_PC1 )
      {
        ADS_write_value( ".F_CAP_V30", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  //  	parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
        parameter[num_params++] = new CParameter( "TRIGGER_CAP_V30.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
      }
    #endif

    #ifdef NEWCAP_DOUBLE
      ADS_write_value( ".F_DOUBLE_CAP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  	  parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
      parameter[num_params++] = new CParameter( "TRIGGER_DOUBLE_CAP.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
    #endif

    #ifdef NEW_TRIPLE_TIP
      ADS_write_value( ".F_TRIPLE_TIP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  	  //parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
      //parameter[num_params++] = new CParameter( "TRIGGER_DOUBLE_CAP.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
    #endif



  // -----------------------------   S O T T O M E N U     O F     E A C H     C A M E R A    ---------------------------------------------
	for ( UINT i=0 ; i<num_tlc ; i++ ) // Sotto gruppo parametri telecamere - Livello 1 - menu_btn[20,21,22]
  {
    wchar_t msg[50+1];
//    swprintf( msg, string_810[lng], i+1 );
    swprintf( msg, 50, string_800[lng], i, camera[i].name );
	  menu_btn[num_menu_btn] = new CMenu_button( msg, menu_btn[1]->child );
	  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*300*/ );
    file_manager.Add_separator( msg );

    parcat_1 = msg;
    parcat_2 = NULL;


    parameter[num_params++] = new CParameter( &camera[i].shutter,    CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
    parameter[num_params++] = new CParameter( &camera[i].frame_rate, CTYPE_REAL,  0, menu_btn[num_menu_btn]->child, string_2066[lng], string_fps [lng],   50.0,               0.0,            6000.0, &file_manager, &Set_camera, i );
    num_menu_btn++;

    int menu_btn_par = num_menu_btn-1;

    if ( i<3 ) // tip/cap dedicated parameters
    {
      parameter[num_params++] = new CParameter( &camera[i].trigger,    CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
    }

    if ( pfstopper_insp [i] ) pfstopper_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );

	//if ( flange_insp [i] ) flange_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );

    if ( pfsidewall_insp[i] ) pfsidewall_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
    if ( cosmetic_insp  [i] ) cosmetic_insp  [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );

    //if ( focolor_insp   [i] ) focolor_insp   [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
    //if ( bottom_insp    [i] ) bottom_insp    [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
    //if ( oralfo_insp    [i] ) oralfo_insp    [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );

	//Pour removed for GPO samples test on 20210318
    //if ( particle_insp  [i] ) particle_insp  [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
    //if ( fillingl_insp  [i] ) fillingl_insp  [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
	//Pour removed for GPO samples test on 20210318

		//if ( i>2 && i<11)
	if ( i>=tlcgroupPC1[1][0] && i<=tlcgroupPC1[1][1] ) // P1 dedicated parameters
	{
    if ( particle_insp  [i] ) particle_insp  [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
	}

	if ( i>=tlcgroupPC1[2][0] && i<=tlcgroupPC1[2][1] ) // P2 dedicated parameters
	{
    if ( particle_insp  [i] ) particle_insp  [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
	}

		//Pour marked on 20201119
	#if defined TIVS_S40 || defined TIVS_S60
	if ( i>=tlcgroupPC1[4][0] && i<=tlcgroupPC1[4][1] ) // tip/cap dedicated parameters
    {
	//if ( pfsidewall_insp[i] ) pfsidewall_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
    //if ( cosmetic_insp  [i] ) cosmetic_insp  [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );

	if ( particle_insp  [i] ) particle_insp  [i]->Add_menu_parameters_needle( menu_btn[menu_btn_par]->child );  // To be enabled for new needle shield processing interface.
	//if ( fillingl_insp  [i] ) fillingl_insp  [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );

    }
#endif


  }

  // ***************************************************************************
  //
	//               ADD FUNCTIONS/UTILITIES	( container menu_btn[4] )
  //
  // ***************************************************************************

/*  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], menu_btn[4]->child, &Change_view       );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;  */

  parameter[num_params++] = new CParameter( ".O_MACHINE_LIGHT", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_124[lng],  L"", 0, 0, 1 ); // machine lights

  parameter[num_params++] = new CParameter( ".F_RUN_BELTS",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_128[lng],  L"", 1, 0, 1 ); // run belt/s

  //parameter[num_params++] = new CParameter( "DEVIBRATOR.RUN",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_3568[lng], L"", 1, 0, 1 ); // run devibrator


  #ifdef REVERSE_BELT    // If defined button is added to allow reverse of belt in manual/jog mode
    parameter[num_params++] = new CParameter( ".F_REVERSE_BELT",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_142[lng], L"", 1, 0, 1 ); // reverse input belt direction in jog mode
  #endif

  #ifdef VACUUM_PUMP // if defined add button connected to output 6th board/4th output
    parameter[num_params++] = new CParameter( ".O_VACUUM_PUMP",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_340[lng], L"", 1, 0, 1 ); // run vacuum pump
  #endif

  menu_btn[num_menu_btn] = new CMenu_button( string_160[lng], menu_btn[4]->child, &Movie_startstop   );
	movie_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

    //Pour marked on 20200427
    #ifdef ALARMLOG_SEPARATE // log alarms separately and add button to show them
  if ( password_mngr )
  { 
	menu_btn[num_menu_btn] = new CMenu_button( string_104[lng], menu_btn[4]->child, &Show_alarmlog  );
	password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );//MAINTENANCE_LEVEL
	num_menu_btn++;
  }
  #endif

  #ifdef NEW_LOGGER // log alarms separately and add button to show them
    //if ( password_mngr )
  //{
    menu_btn[num_menu_btn] = new CMenu_button( string_3900[lng], menu_btn[4]->child, &Show_log  );
	//password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );//MAINTENANCE_LEVEL
	num_menu_btn++;
	//}
  #endif


  #ifdef NEW_PASSW_MNGR  // New users/passwords manager
	/*
  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
  }
  */
    if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], OPERATOR_LEVEL );//SUPERVISOR_LEVEL
    num_menu_btn++;
    //menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
	menu_btn[num_menu_btn] = new CMenu_button( string_1036[lng], menu_btn[4]->child);
	password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
	
    file_manager.Add_separator( string_1036[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
	parameter[num_params++] = new CParameter( &password_mngr->chgpwd_days, CTYPE_INT ,  0, menu_btn[num_menu_btn]->child, string_1037[lng], string_day[lng],  90,  1,  360, &file_manager);
	parameter[num_params++] = new CParameter( &password_mngr->logout_timeout, CTYPE_INT ,  0, menu_btn[num_menu_btn]->child, string_1038[lng], string_minute[lng],  10,  1,  30, &file_manager);
	parameter[num_params++] = new CParameter( &password_mngr->annotate_on, CTYPE_BOOL8, 0, menu_btn[num_menu_btn]->child, string_1035[lng], L"", 0, 0, 1 ); 
	num_menu_btn++;
    menu_btn[num_menu_btn] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
	num_menu_btn++;
  }

  #else
  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
  }
  #endif


/*
  #ifdef ALARMLOG_SEPARATE // log alarms separately and add button to show them
    menu_btn[num_menu_btn++] = new CMenu_button( string_104[lng], menu_btn[4]->child, &Show_alarmlog  );
  #endif

  #ifdef NEW_LOGGER // log alarms separately and add button to show them
    menu_btn[num_menu_btn++] = new CMenu_button( string_3900[lng], menu_btn[4]->child, &Show_log  );
  #endif

  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
  }
  */
	
  
  menu_btn[num_menu_btn] = new CMenu_button( string_170[lng], menu_btn[4]->child, &Save_images       );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveimages_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

//	parameter[num_params++] = new CParameter( &datarec_on, CTYPE_BOOL8, 0, menu_btn[4]->child, string_2130[lng], 0,  0,  0, 1, NULL, NULL );
	menu_btn[num_menu_btn] = new CMenu_button( string_304[lng], menu_btn[4]->child, &Data_record       );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  inpdatarec_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  #ifdef SAVE_INPUTDATA
    if ( IS_PC1 )
    {
      menu_btn[num_menu_btn] = new CMenu_button( string_354[lng], menu_btn[4]->child, &Inpdata_record );
      if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
      inpdatarec_btn = menu_btn[num_menu_btn];
      num_menu_btn++;
    }
    if ( IS_PC2 ) // Used for filling level NITIN
    {
      menu_btn[num_menu_btn] = new CMenu_button( string_360[lng], menu_btn[4]->child, &Inpdata_record );
      if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
      inpdatarec_btn = menu_btn[num_menu_btn];
      num_menu_btn++;
    }
  #endif

	menu_btn[num_menu_btn] = new CMenu_button( string_320[lng], menu_btn[4]->child, &Save_inspections  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveinsp_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

	menu_btn[num_menu_btn] = new CMenu_button( string_324[lng], menu_btn[4]->child, &Save_sequences  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveseq_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  #ifdef GRIPPER_STATISTICS
  //if ( IS_PC1 )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_8150[lng], menu_btn[4]->child, &Grippers_statistics );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
    num_menu_btn++;
  }
  #endif

//  #ifdef DEBUGPC //_DEBUG
  if ( test_process )
  {
	  //menu_btn[num_menu_btn++] = new CMenu_button( string_172[lng],  menu_btn[4]->child, &Load_images       );
    menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[4]->child, &Test_process      ); 
    //menu_btn[num_menu_btn++] = new CMenu_button( string_912[lng],  menu_btn[4]->child, &Sequence_acquire  ); 
  }
//  #endif
   // menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[4]->child, &Test_process      ); 
  
 //  ASSERT ( menu_btn[19]==NULL );
 

//	container_main = new CContainer_main( L"menu base", rett, this, IDD_CONTAINER );
  container_main->GetClientRect( &rett );

  rett.bottom -= 200;

  container_main->MoveWindow( &rett );


}


//Pour 20200921
/* Create menu for all functions/parameters */
void CChildView::Create_menu_TIVS_S60(void)
{

  CRect rett;
  GetClientRect( &rett );

	rett.top    =    OFFS_COORDY;
  //rett.bottom = rett.top + 360;
  rett.bottom = rett.top + 168;

  rett.left   = OFFS_COORDY;
  rett.right  = rett.Width()+14;

  num_container = 0;

	// --------        CONTENITORE BASE - Livello 0       ------------
	container_main = new CContainer_main( L"menu base", rett, this, IDD_CONTAINER );
	container_main->ShowWindow( SW_SHOW );


  #define BRD_SUP       14

  #define COLA_SX      440
  #define COLB_SX      (COLA_SX+SPACE_X+BTN_DIMX)
  #define COLC_SX      (COLB_SX+SPACE_X+BTN_DIMX)
  #define COLD_SX      (COLA_SX-SPACE_X-BTN_DIMX)

  #define SPACE_X       14
  #define SPACE_Y       14
  #define BTN_DIMX     250 // BUTTONS WIDTH
  #define BTN_DIMY      58 // BUTTONS HEIGHT


	// * * * *    PRIMA COLONNA      * * * *
	CMenu_button::hook_pos = CMenu_button::bottom_left; // child di livello 1 allineati sotto e a sinistra

	// AUTOMATION BUTTON (num_menu_btn=0)
  rett.top    =                BRD_SUP;
  rett.bottom = rett.top    + BTN_DIMY;
  rett.left   =                COLA_SX;
  rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_900[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[0] );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;

 	// INSPECTION BUTTON  (num_menu_btn=1)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_902[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*740*/ ); // regolo dimensione sottomenu parametri ispezione
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[1] );
  num_menu_btn++;


	// * * * *     SECONDA COLONNA      * * * *
	// PULSANTE RICETTE  (num_menu_btn=2)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLB_SX;
	rett.right  = rett.left   + BTN_DIMX;
	recipe_btn = menu_btn[num_menu_btn] = new CMenu_button( string_120[lng], container_main, &Recipe_management );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[2] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;

	// PULSANTE AVVIO/ARRESTO INSPECTION  (num_menu_btn=3)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	inspection_btn = menu_btn[num_menu_btn] = new CMenu_button( string_150[lng], container_main, &Inspection_startstop  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[3] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;


	// * * * *     TERZA COLONNA      * * * *

	// PULSANTE UTILITA'/FUNZIONI  (num_menu_btn=4)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLC_SX;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_130[lng], container_main );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*450*/ );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[4] );
  num_menu_btn++;

	// PULSANTE DI USCITA  (num_menu_btn=5)
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
	exit_btn = menu_btn[num_menu_btn] = new CMenu_button( string_140[lng], container_main, &On_exit_btn );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[5] );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  num_menu_btn++;
  
	// * * * *     TO LEFT DISPLAY SWITCH  (num_menu_btn=6)    * * * *
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLD_SX;
	rett.right  = rett.left   + BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], container_main, &Change_view, -1 );
  menu_btn[num_menu_btn]->MoveWindow( &rett );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;


	// * * * *     LEFT BOTTOM BATCHES   (num_menu_btn=7)   * * * *
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
  menu_btn[num_menu_btn] = new CMenu_button( string_1300[lng], container_main );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[6] );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*770*/ ); // regolo dimensione sottomenu parametri macchina
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  if ( IS_PC2 ) menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  num_menu_btn++;

	////Pour added on 20201022
	//rett.top    = rett.bottom -	 SPACE_Y -2*BTN_DIMY;
	//rett.bottom = rett.top    - BTN_DIMY;//72
	//rett.left   = rett.left   + 3*BTN_DIMX + 4*SPACE_X;//982
	//rett.right  = rett.left   - BTN_DIMX;//1107
	//XTS1_1_btn = menu_btn[num_menu_btn] = new CMenu_button( string_150[lng], container_main, &Inspection_startstop  );
	//if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[3] );
	//menu_btn[num_menu_btn]->MoveWindow( &rett );
	//////num_menu_btn++;
	////Pour added on 20201022


  #undef BRD_SUP
  #undef COLA_SX
  #undef COLB_SX
  #undef COLC_SX
  #undef SPACE_X
  #undef SPACE_Y
  #undef BTN_DIMX
  #undef BTN_DIMY

	CParameter::dim_ctrl.cy      = 25; // Regolo la dimensione verticale
	CContainer_wnd::mode         = CContainer_wnd::top_left;
	CContainer_wnd::use_ext_rect = false;
	CMenu_button::hook_pos       = CMenu_button::top_right; // child di livello >1 allineati a destra


  // ***************************************************************************
  //
  //                        AUTOMATION PARAMETERS
  //
  // ***************************************************************************

  parcat_1 = L"PLC";
  parcat_2 = NULL;

  if ( IS_PC1 ) // ( !wcsncmp( PC_name, L"PC1", 3 ) ) //Pour enabled on 20210116
  {

    // *******  SUB-MENU FOR CAROUSEL - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1510[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".PRODSPEED",                    CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1532[lng], string_pcm[lng],   200.0,    10.0,  620.0, &file_manager  ); // Jog high speed (pcs/min)
    //if ( password_mngr ) password_mngr->insert_hmi( parameter[num_params-1], pwd_levels[7] );

    parameter[num_params++] = new CParameter( ".JOGSPEED",                     CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1536[lng], string_pcm[lng],   150.0,    10.0,  620.0, &file_manager  ); // Jog low speed (pcs/min)
    parameter[num_params++] = new CParameter( ".ACCELERATION",                 CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1210[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // acceleration
    parameter[num_params++] = new CParameter( ".DECELERATION",                 CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1212[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // deceleration
    parameter[num_params++] = new CParameter( ".JERK",                         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1208[lng], string_unit[lng],    3.0,     0.1,   50.0, &file_manager  ); // jerk
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    //parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.TARGET_HEIGHT_MM",  CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1504[lng], string_mm[lng], 480.3, 457.0, 520.0, &file_manager  ); // Carousel target height
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( "INPSCREW_AXIS.ZEROPOS",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1542[lng], string_unit[lng],   0.50,    -3.0,    3.0, &file_manager  ); // Input screw zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.ZEROPOS",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1540[lng], string_unit[lng],   0.50,    -4.0,    4.0, &file_manager  ); // Carousel zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
    //parameter[num_params  ] = new CParameter( "OUTPUTSTRW_AXIS.ZEROPOS",       CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1549[lng], string_unit[lng],   0.50,    -3.0,    3.0, &file_manager  ); // Input screw zero position (units)
    //parameter[num_params++]->format_spc = L"%.3lf";
    parameter[num_params  ] = new CParameter( "TRACKER_AXIS.ZEROPOS",          CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1544[lng], string_unit[lng],   0.50,    -3.0,    3.0, &file_manager  ); // Tracker zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
	parameter[num_params  ] = new CParameter( "OUTSCREW1_AXIS.ZEROPOS",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1545[lng], string_unit[lng],   0.50,    -3.0,    3.0, &file_manager  ); // output screw zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
	parameter[num_params  ] = new CParameter( "OUTSCREW2_AXIS.ZEROPOS",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1547[lng], string_unit[lng],   0.50,    -3.0,    3.0, &file_manager  ); // output screw zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";

	parameter[num_params  ] = new CParameter( ".DIST_ZERO_SCREW_SYNC",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1566[lng], string_unit[lng],   0.50,    0.1,    300.0, &file_manager  ); // output screw zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";
	parameter[num_params  ] = new CParameter( ".DIST_ZERO_SCREW_SEP",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1568[lng], string_unit[lng],   0.50,     0.1,    300.0, &file_manager  ); // output screw zero position (units)
    parameter[num_params++]->format_spc = L"%.3lf";


    
    if ( 1 || use_advanced_parameters )
    {
      parameter[num_params  ] = new CParameter( ".TRACK_PERC",              CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1562[lng], string_percent[lng], 62.5,      10,     90, NULL           ); // Tracking percentage 
      parameter[num_params++]->format_spc = L"%.1lf";
    }

//    parameter[num_params  ] = new CParameter( "CAROUSEL_AXIS.SECFDBK_ZEROPOS", CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1546[lng], string_unit[lng],   0.000,    -4.0,    4.0, &file_manager  ); // Cam zero position second feedback (units)
//    parameter[num_params++]->format_spc = L"%.3lf";
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    /*
    parameter[num_params  ] = new CParameter( "INPUT_BELT.SPEED",              CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1550[lng], string_hz[lng],     25.0,     0.0,   80.0, &file_manager  ); // Input belt speed
    parameter[num_params++]->format_spc = L"%.1lf";

    parameter[num_params++] = new CParameter( "DEVIBRATOR.SPEED",              CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3570[lng], string_percent[lng],  25.0,   0.0,  100.0, &file_manager  ); // Devibrator speed in percent
    */

    num_menu_btn++;


    /*
    // *******  SUB-MENU FOR HV LT - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_3520[lng], menu_btn[0]->child );
    hv_menu = menu_btn[num_menu_btn];
    file_manager.Add_separator( string_3520[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".F_HV_ENABLE",                 CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3504[lng],              L"",      1,      0,        1, &file_manager  ); // enable HV functions into PLC
     
    parameter[num_params  ] = new CParameter( "HV_MANAGER.HVREAD_A",          CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3530[lng], string_unit[lng],   0.50,    0.01,    0.99, &file_manager  ); // HV read phase A
    parameter[num_params++]->format_spc = L"%.2lf";
//    parameter[num_params  ] = new CParameter( "HV_MANAGER.HVREAD_B",          CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3532[lng], string_unit[lng],   0.50,    0.01,    0.99, &file_manager  ); // HV read phase A
    parameter[num_params  ] = new CParameter( "HV_MANAGER.HVREAD_W",          CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3533[lng], string_unit[lng],   0.50,    0.1,     0.9,  &file_manager  ); // HV read phase width
    parameter[num_params++]->format_spc = L"%.2lf";

    parameter[num_params++] = new CParameter( ".HVBLOCK_2.O_VOLTAGE_SET",     CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3542[lng], string_unit[lng],   0,    0,  32767, &file_manager  ); // HV set voltage for HV2
    parameter[num_params++] = new CParameter( ".HVBLOCK_3.O_VOLTAGE_SET",     CTYPE_INT   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3544[lng], string_unit[lng],   0,    0,  32767, &file_manager  ); // HV set voltage for HV3 

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( ".HVBLOCK_1.O_VOLTAGE_SET",   CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3540[lng], string_kvolt[lng],   0,  0.0,   20.0, &file_manager  ); // HV set voltage for HV1
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_2.O_VOLTAGE_SET",   CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3542[lng], string_kvolt[lng],   0,  0.0,   20.0, &file_manager  ); // HV set voltage for HV2
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_3.O_VOLTAGE_SET",   CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3544[lng], string_kvolt[lng],   0,  0.0,   20.0, &file_manager  ); // HV set voltage for HV3
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_4.O_VOLTAGE_SET",   CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3546[lng], string_kvolt[lng],   0,  0.0,   20.0, &file_manager  ); // HV set voltage for HV4
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 50.0, 16383 );

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params  ] = new CParameter( ".HVBLOCK_1.THRESHOLD",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3550[lng], string_ma[lng],   1,  0.0, 20.0, &file_manager  ); // Threshold set for HV1
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 20.0, 32767 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_2.THRESHOLD",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3552[lng], string_ma[lng],   1,  0.0, 20.0, &file_manager  ); // Threshold set for HV2
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 20.0, 32767 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_3.THRESHOLD",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3554[lng], string_ma[lng],   1,  0.0, 20.0, &file_manager  ); // Threshold set for HV3
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 20.0, 32767 );
    parameter[num_params  ] = new CParameter( ".HVBLOCK_4.THRESHOLD",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3556[lng], string_ma[lng],   1,  0.0, 20.0, &file_manager  ); // Threshold set for HV4
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 20.0, 32767 );
    parameter[num_params  ] = new CParameter( "HV_MANAGER.MAX_ERROR",       CTYPE_SCALED16|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_2080[lng], string_ma[lng],  10,  0.0, 20.0, &file_manager  ); // Maximum overall error
    hvmax_err = parameter[num_params];
    parameter[num_params++]->Scaling_parameters( 0.0, 0, 20.0, 32767 );


//    parameter[num_params++]->format_spc = L"%.2lf";
    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params  ] = new CParameter( "HVSPIN_MOTOR.SPEED",         CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3522[lng], string_hz[lng],  25.0,  0.0,   80.0, &file_manager  ); // Spinning speed of HV belt
    parameter[num_params++]->format_spc = L"%.1lf";

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_HV_LOOP",                 CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_3506[lng],         L"",      1,      0,      1, &file_manager  ); // enable HV functions into PLC
    f_hvloop = parameter[num_params-1];

    RECT area;
    menu_btn[num_menu_btn]->child->GetWindowRect(&area);
    area.top -= 60;
    menu_btn[num_menu_btn]->child->MoveWindow(&area);

    num_menu_btn++;

    menu_btn[num_menu_btn] = new CMenu_button( string_3560[lng], menu_btn[num_menu_btn-1]->child, &HVdata_record );
    hvdatarec_btn = menu_btn[num_menu_btn];
    num_menu_btn++;
*/

    /*


    // *******  SUB-MENU FOR GRIPPERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1610[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1610[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".OPEN_OFFSET",       CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1620[lng], string_step[lng],   10.0,    0.0,    36.0, &file_manager  ); // Grippers opening phase
    parameter[num_params++] = new CParameter( ".ANT_OPEN_MAX",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1622[lng], string_step[lng],    0.5,    0.0,     2.0, &file_manager  ); // Grippers opening advance 
    parameter[num_params++] = new CParameter( ".OPEN_PRESSURE",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1624[lng], string_unit[lng],    3.5,    0.0,     8.0, &file_manager  ); // Grippers opening pressure
    parameter[num_params++] = new CParameter( ".CLOSE_OFFSET",      CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1630[lng], string_step[lng],   20.0,    0.0,    36.0, &file_manager  ); // Grippers closing phase
    parameter[num_params++] = new CParameter( ".ANT_CLOSE_MAX",     CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1632[lng], string_step[lng],    0.5,    0.0,     2.0, &file_manager  ); // Grippers closing advance 
    parameter[num_params++] = new CParameter( ".CLOSE_PRESSURE",    CTYPE_LREAL |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1634[lng], string_unit[lng],    1.5,    0.0,     8.0, &file_manager  ); // Grippers closing pressure 
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GRIPPERS",  CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1612[lng],              L"",      0,      0,       1, &file_manager ); // check opening/closing
    parameter[num_params++] = new CParameter( ".GROPEN_DELAY",      CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1614[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for opening error
    parameter[num_params++] = new CParameter( ".GRCLOSE_DELAY",     CTYPE_DINT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1616[lng], string_msec[lng],    600,      0, 1000000, &file_manager ); // Delay for closing error
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params  ] = new CParameter( ".F_CLOSED_LOOP",     CTYPE_BOOL8 |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1636[lng],              L"",      0,      0,       1                ); // closed loop
    f_closed_loop = parameter[num_params++];
    ASSERT( f_closed_loop==parameter[num_params-1] );

    num_menu_btn++;

    */

    // *******  SUB-MENU FOR DEVIATORS/OUTPUT - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1640[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1640[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); //380 );
    int main_menu_btn = num_menu_btn;

    parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_330[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    parameter[num_params++] = new CParameter( ".F_ENABLE_LIGHTCHK",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_332[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
	parameter[num_params++] = new CParameter( ".F_GRIPSPIN_ALARM",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_334[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    parameter[num_params++] = new CParameter( ".F_GRIPCLOSE_ALARM",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_336[lng],               L"",      0,      0,     1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MAX_WIDTH", CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1639[lng], string_step[lng],    0.9,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.INPUT_MIN_WIDTH", CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1638[lng], string_step[lng],    0.1,    0.0,   1.0, &file_manager  ); // Minimum allowed PS window width

    
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".F_CHECK_GOODS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1660[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output goods
    //parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS1",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1662[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects1 
    //parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS2",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1664[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects2
    //parameter[num_params++] = new CParameter( ".F_CHECK_REJECTS3",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1665[lng],              L"",      0,      0,     1, &file_manager  ); // enable cross check of output rejects2

    //menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "PRODUCT_FLOW.LOAD_VAL",           CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1654[lng], string_unit[lng],      0,      0,  1023  ); // Loading initial value
    //parameter[num_params++] = new CParameter( ".F_REJECT_SIMULATE",           CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[main_menu_btn]->child, string_1656[lng],              L"",      0,      0,     1  ); // rejects simulation
    num_menu_btn++;

    // DELAYS
    menu_btn[num_menu_btn] = new CMenu_button( string_1750[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1750[lng] );
    //menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    //parameter[num_params++] = new CParameter( ".F_ALARM_DOORS",               CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_330[lng],  L"",   0,   0,   1, NULL /* &file_manager */ ); // persistent - not saved into recipes
    menu_btn[num_menu_btn-1]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1752[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
    parameter[num_params++] = new CParameter( "MACHINE.GOOD_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1754[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1756[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ1_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1758[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej1 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1760[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej2 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ2_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1762[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej2 full
	parameter[num_params++] = new CParameter( "MACHINE.REJ3_DELAY1",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1760a[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to start warning for rej2 full
    parameter[num_params++] = new CParameter( "MACHINE.REJ3_DELAY2",          CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1762a[lng], string_msec[lng], 20000,   0, 1000000, &file_manager  ); // Delay to stop for rej2 full

    #ifdef INPUTBELT_SENSOR // Id defined set input sensor delays
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY1",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1764[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to start warning for goods full
      parameter[num_params++] = new CParameter( "MACHINE.INPBELT_DELAY2",        CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1766[lng], string_msec[lng],  1000,   0, 1000000, &file_manager  ); // Delay to stop for goods full
    #endif
    #ifdef FALLEN_CONTAINER // If defined, use code to check fallen containers/set delay/enable alarm
      parameter[num_params++] = new CParameter( "ALARMS_CHECK.FALLEN_DELAY",     CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1769[lng], string_msec[lng],   300,   0, 1000000, &file_manager  ); // Delay to trigger fallen container alarm
    #endif      
    num_menu_btn++;

    // DISTANCES
    menu_btn[num_menu_btn] = new CMenu_button( string_1653[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1653[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
	//Pour added for TIVS_S60 on 20200926
	parameter[num_params++] = new CParameter( ".DIST_LOAD_VE",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1626  [lng], string_step[lng],   77.50,   1.0, 100.0, &file_manager  ); // Distance from load to first rolling-over
	parameter[num_params++] = new CParameter( ".INDEX_VE",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1626a[lng], string_unit[lng],   10,    0,     17, &file_manager  ); // first rolling-over index
    parameter[num_params++] = new CParameter( ".PHASE_VE",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1626b[lng], string_unit[lng],   10,    0,     17, &file_manager  ); // fisrt rolling-over phase
	parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_VE",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1626c[lng], string_step[lng],    1.3,    0.0,  20.0, &file_manager); // fisrt rolling-over starwheel suction length (steps)

    parameter[num_params++] = new CParameter( ".DIST_LOAD_VF",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1628  [lng], string_step[lng],   77.50,   1.0, 200.0, &file_manager  ); // Distance from load to second revert
	parameter[num_params++] = new CParameter( ".INDEX_VF",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1628a[lng], string_unit[lng],   10,     0,    17, &file_manager  ); // second revert index
    parameter[num_params++] = new CParameter( ".PHASE_VF",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1628b[lng], string_unit[lng],   10,     0,    17, &file_manager  ); // second revert phase
	parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_VF",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1628c[lng], string_step[lng],    1.3,    0.0,  20.0, &file_manager); // second revert starwheel suction length (steps)

	//Pour added for TIVS_S60 on 20200926
    parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV1",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1641  [lng], string_step[lng],   77.50,   1.0, 200.0, &file_manager  ); // Distance input photosens - first deviator 
    parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV2",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1641_2[lng], string_step[lng],   77.50,   1.0, 200.0, &file_manager  ); // Distance input photosens - second deviator 
    parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV3",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1641_3[lng], string_step[lng],   77.50,   1.0, 200.0, &file_manager  ); // Distance input photosens - third deviator 
    //parameter[num_params++] = new CParameter( ".DIST_LOAD_DEV4",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1641_4[lng], string_step[lng],   77.50,   1.0, 200.0, &file_manager  ); // Distance input photosens - fourth deviator 

	parameter[num_params++] = new CParameter( ".DIST_LOAD_GOOD",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1642[lng], string_step[lng],   82.75,   1.0, 150.0, &file_manager  ); // Distance first deviator - second deviator
    //parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ1",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1643[lng], string_step[lng],   87.77,   1.0, 150.0, &file_manager  ); // Distance first deviator - second deviator
    //parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ2",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1644[lng], string_step[lng],   95.09,   1.0, 150.0, &file_manager  ); // Distance first deviator - second deviator
	//parameter[num_params++] = new CParameter( ".DIST_LOAD_REJ3",              CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1644[lng], string_step[lng],   95.09,   1.0, 150.0, &file_manager  ); // Distance first deviator - second deviator

    //parameter[num_params++] = new CParameter( ".REJECT_FORCED",               CTYPE_INT  |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1564  [lng], string_unit[lng],       0,     0,  5000, &file_manager  ); // reject forcing for test
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWN",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1646[lng], string_step[lng],    2.3,    0.0,   4.0, &file_manager  ); // Main starwheel suction lenght (steps)
    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_SWP",  CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1648[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Main starwheel blowing lenght (steps)
//    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDI",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1650[lng], string_step[lng],    1.3,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels suction lenght (steps)
//    parameter[num_params++] = new CParameter( "PRODUCT_FLOW.VALVE_OPEN_GDO",    CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1652[lng], string_step[lng],    0.7,    0.0,   4.0, &file_manager  ); // Good/rejects starwheels blowing lenght (steps)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    num_menu_btn++;

    // *******  SUB-MENU FOR FIRST SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1700[lng], menu_btn[0]->child );
    //UINT nmbt = num_menu_btn-1;

    file_manager.Add_separator( string_1700[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "SEND_SPIN_PARAMETERS.RUN",                 CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1710[lng],              L"",      1,      0,     1                 ); // send data
 
    menu_btn[num_menu_btn+1]  = new CMenu_button( string_1710[lng],  menu_btn[num_menu_btn]->child, &Send_spin_parameters      ); // ATTENTION TO num_menu_btn!!!

    menu_btn[num_menu_btn]->child->posy += 30; // Set vertical position
    parameter[num_params++] = new CParameter( ".ALIGN_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1718[lng],              L"",      1,      0,     1, &file_manager  ); // enable alignment spin cycle
    parameter[num_params++] = new CParameter( ".F_CHECK_LAM",            CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1730[lng],              L"",      1,      0,     1, NULL           ); // enable LAM error detection
    parameter[num_params++] = new CParameter( ".SPIN1_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 1
    parameter[num_params++] = new CParameter( ".VEL1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],   1000,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC1",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   3000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN1",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     15,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY1",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN1_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle1
    num_menu_btn++;

    num_menu_btn++; // for send_spin_parameters


    // *******  SUB-MENU FOR SECOND SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1701[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1701[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // 380 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN2_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716[lng],              L"",      1,      0,     1, &file_manager  ); // enable spin particle 2
    parameter[num_params++] = new CParameter( ".VEL2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    800,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   1000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC2",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   1500,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN2",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],     12,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY2",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN2_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1220[lng],  L"",  0, 0, 1 ); // inspection loop for particle2
    num_menu_btn++;


    // *******  SUB-MENU FOR THIRD SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1719[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1719[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( ".SPIN3_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716c[lng],             L"",      1,      0,     1, &file_manager  ); // enable spin3 (cosmetic)
    //parameter[num_params++] = new CParameter( ".SPIN4_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716n[lng],             L"",      1,      0,     1, &file_manager  ); // enable spin4 (needle)

    parameter[num_params++] = new CParameter( ".VEL3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    180,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC3",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN3",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],      4,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY3",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1224[lng],  L"",  0, 0, 1 ); // inspection loop for spin3
    //parameter[num_params++] = new CParameter( "SPIN4_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1226[lng],  L"",  0, 0, 1 ); // inspection loop for spin3
 //   parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN_LINE",     CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup
    num_menu_btn++;

	    // *******  SUB-MENU FOR FORTH SPINNING - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1719a[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1719[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( ".SPIN3_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716c[lng],             L"",      1,      0,     1, &file_manager  ); // enable spin3 (cosmetic)
    parameter[num_params++] = new CParameter( ".SPIN4_ENABLE",           CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1716n[lng],             L"",      1,      0,     1, &file_manager  ); // enable spin4 (needle)

    parameter[num_params++] = new CParameter( ".VEL4",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1720[lng], string_unit[lng],    180,    100,  5000, &file_manager  ); // max spinning speed
    parameter[num_params++] = new CParameter( ".ACC4",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1722[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // acceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".DEC4",                   CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1724[lng], string_unit[lng],   2000,    500, 30000, &file_manager  ); // deceleration (max 30.000 for LAM)
    parameter[num_params++] = new CParameter( ".NTURN4",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1726[lng], string_unit[lng],      4,      1,   100, &file_manager  ); // number of revolutions
    parameter[num_params++] = new CParameter( ".DELAY4",                 CTYPE_INT     |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1728[lng], string_msec[lng],    100,  -1500,  1500, &file_manager  ); // delay / advance
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    //parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1224[lng],  L"",  0, 0, 1 ); // inspection loop for spin3
    parameter[num_params++] = new CParameter( "SPIN4_LOOP.RUN",          CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1226[lng],  L"",  0, 0, 1 ); // inspection loop for spin3
 //   parameter[num_params++] = new CParameter( "SPIN3_LOOP.RUN_LINE",     CTYPE_BOOL8   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1222[lng],  L"",  0, 0, 1 ); // continuous rotation for linear camera setup
    num_menu_btn++;




    // *******  SUB-MENU FOR EJECTOR 1&2 MASKS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_4190[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_4190[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    
    parameter[num_params++] = new CParameter( ".F_DEV1_FLANGE",       CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4200[lng],  L"",   0,   0,   1, &file_manager ); // 
    menu_btn[num_menu_btn]->child->posy += 20; // Set vertical position

    parameter[num_params++] = new CParameter( ".F_DEV2_SPINCHK",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4198[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE1",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4210[lng],  L"",   0,   0,   1, &file_manager ); //
	#ifdef OPACITY_CTRL
	parameter[num_params++] = new CParameter( ".F_DEV2_FILLING1",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_8074[lng],  L"",   0,   0,   1, &file_manager ); //
#else
    parameter[num_params++] = new CParameter( ".F_DEV2_FILLING1",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4212[lng],  L"",   0,   0,   1, &file_manager ); //
#endif
    //parameter[num_params++] = new CParameter( ".F_DEV2_FILLING1",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4212[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_PARTICLE2",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4214[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV2_FILLING2",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4216[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4218[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC2",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4220[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC3",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4222[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV2_COSMETIC4",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4224[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_BOTTOMA",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4226[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV2_BOTTOMB",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4228[lng],  L"",   0,   0,   1, &file_manager ); // 
    num_menu_btn++;


    // *******  SUB-MENU FOR EJECTOR 3 MASK - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_4192[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_4192[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".F_DEV3_SPINCHK",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4198[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV3_PARTICLE1",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4210[lng],  L"",   0,   0,   1, &file_manager ); // 
#ifdef OPACITY_CTRL
	parameter[num_params++] = new CParameter( ".F_DEV3_FILLING1",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_8074[lng],  L"",   0,   0,   1, &file_manager ); //
#else
    parameter[num_params++] = new CParameter( ".F_DEV3_FILLING1",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4212[lng],  L"",   0,   0,   1, &file_manager ); //
#endif
    parameter[num_params++] = new CParameter( ".F_DEV3_PARTICLE2",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4214[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV3_FILLING2",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4216[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV3_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4218[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV3_COSMETIC2",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4220[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV3_COSMETIC3",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4222[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV3_COSMETIC4",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4224[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV3_BOTTOMA",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4226[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV3_BOTTOMB",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4228[lng],  L"",   0,   0,   1, &file_manager ); // 
    num_menu_btn++;

/*
    // *******  SUB-MENU FOR EJECTOR 4 MASK - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_4194[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_4194[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

//    parameter[num_params++] = new CParameter( ".F_DEV3_SPINCHK",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4192[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV4_PARTICLE1",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4210[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV4_FILLING1",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4212[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV4_PARTICLE2",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4214[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV4_FILLING2",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4216[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV4_COSMETIC",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4218[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV4_COSMETIC2",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4220[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV4_COSMETIC3",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4222[lng],  L"",   0,   0,   1, &file_manager ); // 
    //parameter[num_params++] = new CParameter( ".F_DEV4_COSMETIC4",    CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4224[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV4_BOTTOMA",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4226[lng],  L"",   0,   0,   1, &file_manager ); // 
    parameter[num_params++] = new CParameter( ".F_DEV4_BOTTOMB",      CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4228[lng],  L"",   0,   0,   1, &file_manager ); // 
    num_menu_btn++;
*/


	//Pour added for XTS on 20201022
	    // *******  SUB-MENU FOR XTS 1&2  - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_4188[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_4188[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    
    parameter[num_params++] = new CParameter( ".F_XTS1_SETGEARPOS",       CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4170[lng],  L"",   0,   0,   1, &file_manager ); // 
	parameter[num_params++] = new CParameter( ".F_XTS1_STOP",             CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4172[lng],  L"",   0,   0,   1, &file_manager ); //
	parameter[num_params++] = new CParameter( ".F_XTS1_RESET",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4174[lng],  L"",   0,   0,   1, &file_manager ); //
	parameter[num_params++] = new CParameter( ".F_TEST_DENESTER_XTS",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4176[lng],  L"",   0,   0,   1, &file_manager ); // 
    menu_btn[num_menu_btn]->child->posy += 20; // Set vertical position
	parameter[num_params++] = new CParameter( ".F_XTS2_SETGEARPOS",       CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4180[lng],  L"",   0,   0,   1, &file_manager ); // 
	parameter[num_params++] = new CParameter( ".F_XTS2_STOP",             CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4182[lng],  L"",   0,   0,   1, &file_manager ); //
	parameter[num_params++] = new CParameter( ".F_XTS2_RESET",            CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4184[lng],  L"",   0,   0,   1, &file_manager ); //
	parameter[num_params++] = new CParameter( ".F_TEST_RENESTER_XTS",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4186[lng],  L"",   0,   0,   1, &file_manager ); // 


    num_menu_btn++;
	//Pour added for XTS on 20201022



    // *******  SUB-MENU FOR TRIGGERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1690[lng], menu_btn[0]->child );
    file_manager.Add_separator( string_1690[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    /*
  tca_trigger_phase:       LREAL :=  0.40; (* Pitch phase value to generate TCA      trigger 0..0.99 *)
  c3a_trigger_phase:       LREAL :=  0.30; (* Pitch phase value to generate C3A      trigger 0..0.99 *)
  c3b_trigger_phase:       LREAL :=  0.40; (* Pitch phase value to generate C3B      trigger 0..0.99 *)
  part1_trigger_phase:     LREAL :=  0.13; (* Cam phase value to generate PARTICLE1  (camera group 2) trigger 0..2.99 *)
  part2_trigger_phase:     LREAL :=  0.14; (* Cam phase value to generate PARTICLE2  (camera group 2) trigger 0..2.99 *)
  cosm1_trigger_phase:     LREAL :=  0.15; (* Cam phase value to generate COSMETIC1  (camera group 1) trigger 0..2.99 *)
  cosm2_trigger_phase:     LREAL :=  0.15; (* Cam phase value to generate COSMETIC1  (camera group 1) trigger 0..2.99 *)
  */

    parameter[num_params  ] = new CParameter( ".TCA_TRIGGER_PHASE",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4254[lng], string_step[lng], 0.10, 0.0, 0.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".C3A_TRIGGER_PHASE",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4256[lng], string_step[lng], 0.10, 0.0, 0.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".C3B_TRIGGER_PHASE",     CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4258[lng], string_step[lng], 0.10, 0.0, 0.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";

    parameter[num_params  ] = new CParameter( ".COSM1_TRIGGER_PHASE",   CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4250[lng], string_step[lng], 0.10, 0.0, 0.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".PART1_TRIGGER_PHASE",   CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1697[lng], string_step[lng], 0.10, 0.0, 0.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".COSM2_TRIGGER_PHASE",   CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4252[lng], string_step[lng], 0.10, 0.0, 0.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";
    parameter[num_params  ] = new CParameter( ".PART2_TRIGGER_PHASE",   CTYPE_LREAL|CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1698[lng], string_step[lng], 0.10, 0.0, 0.91, &file_manager  );
    parameter[num_params++]->format_spc = L"%.2lf";

    num_menu_btn++;


    // *******  SUB-MENU FOR CALIBRATION/ADVANCED PARAMETERS - num_menu_btn=  ******* 
    menu_btn[num_menu_btn] = new CMenu_button( string_1800[lng], menu_btn[0]->child );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], pwd_levels[7] );
    file_manager.Add_separator( string_1800[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
    calibration_menu = menu_btn[num_menu_btn];
    main_menu_btn = num_menu_btn;
    num_menu_btn++;


    // ABC phases
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1809[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1809[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".INPUT_PHASE_A",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1810[lng], string_step[lng],   1.50,    0.0,   3.0, &file_manager  ); // Input phase for A valves
    parameter[num_params++] = new CParameter( ".INPUT_PHASE_B",         CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1812[lng], string_step[lng],   2.50,    0.0,   3.0, &file_manager  ); // Input phase for B valves
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCA",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1820[lng], string_step[lng],   1.50,    0.0,   4.0, &file_manager  ); // Input cam phase for A cameras
    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCB",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1822[lng], string_step[lng],   2.50,    0.0,   4.0, &file_manager  ); // Input cam phase for B cameras
    parameter[num_params++] = new CParameter( ".INPUT_CAMPHA_TCC",      CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1824[lng], string_step[lng],   0.50,    0.0,   4.0, &file_manager  ); // Input cam phase for C cameras
    num_menu_btn++;

    /*
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1828[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1828[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MAX_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1830[lng], string_mm[lng],    562.0,  200.0,    700.0, &file_manager  ); // Maximum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH_MIN_MM", CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1832[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Minimum allowed carousel height
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_mm[lng],    557.0,  200.0,    700.0, &file_manager  ); // Top point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH2_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1840[lng], string_ec[lng],  9480033,      0, 16777215, &file_manager  ); // Top point height (ec)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MM",    CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_mm[lng],    450.0,  200.0,    700.0, &file_manager  ); // Low point height (mm)
    parameter[num_params++] = new CParameter( "CAROUSEL_HEIGHT_MNGR.CH1_MP",    CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1842[lng], string_ec[lng],  9569182,      0, 16777215, &file_manager  ); // Low point height (ec)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position
    num_menu_btn++;
    */

    // Spin offsets and distances
    //menu_btn[main_menu_btn]->child->posy += 10; // Set vertical position
    menu_btn[num_menu_btn] = new CMenu_button( string_1848[lng], menu_btn[main_menu_btn]->child );
    file_manager.Add_separator( string_1848[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );

    parameter[num_params++] = new CParameter( ".SPIN1_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1850[lng], string_unit[lng],   14,    0,   20, &file_manager  ); // Spin1 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN2_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1852[lng], string_unit[lng],   12,    0,   20, &file_manager  ); // Spin2 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN3_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1854[lng], string_unit[lng],    8,    0,   20, &file_manager  ); // Spin3 offset (motors)
    parameter[num_params++] = new CParameter( ".SPIN4_OFFSET",                  CTYPE_DINT    |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1855[lng], string_unit[lng],    1,    0,   20, &file_manager  ); // Spin3 offset (motors)
    parameter[num_params++] = new CParameter( ".ALIGN_OFFSET",                  CTYPE_LREAL   |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_1856[lng], string_step[lng], 20.0,  0.0,   72.0, &file_manager  ); // Align offset (steps)
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position

    
    parameter[num_params++] = new CParameter( ".DIST_LOAD_TCA",                 CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4240[lng], string_step[lng],       3,   1.0, 100.0, &file_manager  ); // Distance load-TCA
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1A",                 CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4242[lng], string_cams[lng],      19,   1.0, 100.0, &file_manager  ); // Distance load-P1A
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1B",                 CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4244[lng], string_cams[lng],      19,   1.0, 100.0, &file_manager  ); // Distance load-P1B
    parameter[num_params++] = new CParameter( ".DIST_LOAD_P1C",                 CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4246[lng], string_cams[lng],      19,   1.0, 100.0, &file_manager  ); // Distance load-P1C
	parameter[num_params++] = new CParameter( ".DIST_LOAD_P1D",                 CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4247[lng], string_cams[lng],      19,   1.0, 100.0, &file_manager  ); // Distance load-P1D
    parameter[num_params++] = new CParameter( ".DIST_LOAD_C3A",                 CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4248[lng], string_step[lng],      50,   1.0, 110.0, &file_manager  ); // Distance load-C3A
    parameter[num_params++] = new CParameter( ".DIST_LOAD_C3B",                 CTYPE_DINT |CTYPE_BECKHOFF, 0, menu_btn[num_menu_btn]->child, string_4249[lng], string_step[lng],      52,   1.0, 110.0, &file_manager  ); // Distance load-C3B
    
    num_menu_btn++;





    // *******  SUB-MENU FOR BATCH - num_menu_btn=7  ******* 
/*    menu_btn[num_menu_btn] = new CMenu_button( string_1310[lng], menu_btn[7]->child );
    file_manager.Add_separator( string_1510[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 180 );
    menu_btn[num_menu_btn]->child->posy += 10; // Set vertical position */

    menu_btn[num_menu_btn++] = new CMenu_button( string_1310[lng],  menu_btn[7]->child, &Reset_statistics      ); 

    if ( batch_mngr )
    {
      // batch start/stop
      menu_btn[num_menu_btn++] = new CMenu_button( string_1304[lng],  menu_btn[7]->child, &Batch_startstop     ); 
      batch_btn = menu_btn[num_menu_btn-1];
      if ( batch_mngr->current.status ) batch_btn->SetWindowTextW( string_1306[lng] );

      // batch print/report
      menu_btn[num_menu_btn++] = new CMenu_button( string_1308[lng],  menu_btn[7]->child, &Batch_report        ); 
    }

  }


  // ***************************************************************************
  //
  //                           PARAMETRI DI ISPEZIONE/MISURA
  //
  // ***************************************************************************

  parcat_1 = L"INSPECTION";
  parcat_2 = NULL;

  	//Pour added on 20200925 for TIVS_S60
	menu_btn[1]->child->GetClientRect( &rett );
	rett.top +=60;
	menu_btn[1]->child->MoveWindow( &rett );
	//Pour added on 20200925 for TIVS_S60

	parameter[num_params++] = new CParameter( &show_rejects,  CTYPE_BOOL8, 0, menu_btn[1]->child, string_2124[lng],   0,                1,  0,   0, NULL            );
	menu_btn[1]->child->posy -= 5; // Set vertical position
	parameter[num_params++] = new CParameter( &pseudo_colors, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2122[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
	menu_btn[1]->child->posy -= 5; // Set vertical position



  #if STN1==PARTICLE_BOTH // First  station defined for particle with selectable back/bottom light
    if ( IS_PC1 )	parameter[num_params++] = new CParameter( &stn1_part_back, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2076[lng],   0,             1,  0,   0, &file_manager, &Set_stn1_mode     );
  #endif


    #ifdef NEWCAP_V30
      if ( IS_PC1 )
      {
        ADS_write_value( ".F_CAP_V30", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  //  	parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
        parameter[num_params++] = new CParameter( "TRIGGER_CAP_V30.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
      }
    #endif

    #ifdef NEWCAP_DOUBLE
      ADS_write_value( ".F_DOUBLE_CAP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  	  parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
      parameter[num_params++] = new CParameter( "TRIGGER_DOUBLE_CAP.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
    #endif

    #ifdef NEW_TRIPLE_TIP
      ADS_write_value( ".F_TRIPLE_TIP", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high
  	  //parameter[num_params++] = new CParameter( &show_back_light, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2502[lng],   0,                1,  0,   0, NULL, &Set_LUT  );
      //parameter[num_params++] = new CParameter( "TRIGGER_DOUBLE_CAP.FREE_RUN", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[1]->child, string_818[lng],  L"",   0,   0,   1, NULL ); // 
    #endif



  // -----------------------------   S O T T O M E N U     O F     E A C H     C A M E R A    ---------------------------------------------
	for ( UINT i=0 ; i<num_tlc ; i++ ) // Sotto gruppo parametri telecamere - Livello 1 - menu_btn[20,21,22]
  {
    wchar_t msg[50+1];
//    swprintf( msg, string_810[lng], i+1 );
    swprintf( msg, 50, string_800[lng], i, camera[i].name );
	  menu_btn[num_menu_btn] = new CMenu_button( msg, menu_btn[1]->child );
	  menu_btn[num_menu_btn]->child->new_size( 320, 100 /*300*/ );

    file_manager.Add_separator( msg );

    parcat_1 = msg;
    parcat_2 = NULL;


    parameter[num_params++] = new CParameter( &camera[i].shutter,    CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
    parameter[num_params++] = new CParameter( &camera[i].frame_rate, CTYPE_REAL,  0, menu_btn[num_menu_btn]->child, string_2066[lng], string_fps [lng],   50.0,               0.0,            8000.0, &file_manager, &Set_camera, i );
    num_menu_btn++;

    int menu_btn_par = num_menu_btn-1;

	    if ( IS_PC1 )   // added one more PC
    {                   // added one more PC

    //if ( i<3 ) // tip/cap dedicated parameters
	if ( i>=tlcgroupPC1[0][0] && i<=tlcgroupPC1[0][1] ) // tip/cap dedicated parameters
    {
      parameter[num_params++] = new CParameter( &camera[i].trigger,    CTYPE_BOOL8,  0, menu_btn[menu_btn_par]->child, string_2068[lng], 0,   1,   0,   0, &file_manager, &Set_camera, i );
    }

    if ( pfstopper_insp [i] ) pfstopper_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );

	if ( flange_insp [i] ) flange_insp [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );

    if ( pfsidewall_insp[i] ) pfsidewall_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
    if ( cosmetic_insp  [i] ) cosmetic_insp  [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );

    //if ( focolor_insp   [i] ) focolor_insp   [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
    //if ( bottom_insp    [i] ) bottom_insp    [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
    //if ( oralfo_insp    [i] ) oralfo_insp    [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );

	//if ( i>2 && i<11)
	if ( i>=tlcgroupPC1[1][0] && i<=tlcgroupPC1[1][1] ) // P1 dedicated parameters
	{
    if ( particle_insp  [i] ) particle_insp  [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
	}

	if ( i>=tlcgroupPC1[2][0] && i<=tlcgroupPC1[2][1] ) // P2 dedicated parameters
	{
    if ( particle_insp  [i] ) particle_insp  [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
	}


	} // added one more PC

	//Pour removed opacity and filling level control from P1 and P2
	//if ( i>2 && i<7 )
	//{
 //   if ( fillingl_insp  [i] ) fillingl_insp  [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
	//}
	//if ( i>6 && i<11)
	//{
	//if ( fillingl_insp  [i] ) fillingl_insp  [i]->Add_menu_parameters_f( menu_btn[menu_btn_par]->child );
	//}

	if ( IS_PC2 )   // added one more PC
    {                   // added one more PC

	//Pour marked on 20201119, added opacity control on needle shield sation
#if defined TIVS_S40 || defined TIVS_S60
//#ifdef TIVS_S60
		//if ( i>=15 && i<=18)
	if ( i>=tlcgroupPC2[0][0] && i<=tlcgroupPC2[0][1] ) // ( 15<=i<=18 )
	{
	//if ( particle_insp  [i] ) particle_insp  [i]->Add_menu_parameters_needle( menu_btn[menu_btn_par]->child );  // To be enabled for new needle shield processing interface.
	//if ( fillingl_insp  [i] ) fillingl_insp  [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
	//if ( pfsidewall_insp[i] ) pfsidewall_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
    if ( cosmetic_insp  [i] ) cosmetic_insp  [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );


	}
	//Pour marked on 20201119

	if ( i>=tlcgroupPC2[1][0] && i<=tlcgroupPC2[1][1] ) // tip/cap dedicated parameters
    {
	//if ( pfsidewall_insp[i] ) pfsidewall_insp[i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );
    //if ( cosmetic_insp  [i] ) cosmetic_insp  [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );

	if ( particle_insp  [i] ) particle_insp  [i]->Add_menu_parameters_needle( menu_btn[menu_btn_par]->child );  // To be enabled for new needle shield processing interface.
	if ( fillingl_insp  [i] ) fillingl_insp  [i]->Add_menu_parameters( menu_btn[menu_btn_par]->child );

    }

	//}
#endif
	}
  }

  // ***************************************************************************
  //
	//               ADD FUNCTIONS/UTILITIES	( container menu_btn[4] )
  //
  // ***************************************************************************

/*  menu_btn[num_menu_btn] = new CMenu_button( string_540[lng], menu_btn[4]->child, &Change_view       );
	chview_btn = menu_btn[num_menu_btn];
  num_menu_btn++;  */

  parameter[num_params++] = new CParameter( ".O_MACHINE_LIGHT", CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_124[lng],  L"", 0, 0, 1 ); // machine lights

  //parameter[num_params++] = new CParameter( ".F_RUN_BELTS",     CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_128[lng],  L"", 1, 0, 1 ); // run belt/s

  //parameter[num_params++] = new CParameter( "DEVIBRATOR.RUN",   CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_3568[lng], L"", 1, 0, 1 ); // run devibrator

    #ifdef EMPTY_VIAL    // If defined button is added to allow reverse of belt in manual/jog mode
    parameter[num_params++] = new CParameter( ".F_EMPTY_VIAL",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_4196[lng], L"", 0, 0, 1 ); // empty vials
  #endif


  #ifdef REVERSE_BELT    // If defined button is added to allow reverse of belt in manual/jog mode
    parameter[num_params++] = new CParameter( ".F_REVERSE_BELT",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_142[lng], L"", 1, 0, 1 ); // reverse input belt direction in jog mode
  #endif

  #ifdef VACUUM_PUMP // if defined add button connected to output 6th board/4th output
    parameter[num_params++] = new CParameter( ".O_VACUUM_PUMP",  CTYPE_BOOL8|CTYPE_BECKHOFF, 0, menu_btn[4]->child, string_340[lng], L"", 1, 0, 1 ); // run vacuum pump
  #endif

  menu_btn[num_menu_btn] = new CMenu_button( string_160[lng], menu_btn[4]->child, &Movie_startstop   );
	movie_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

    //Pour marked on 20200427
    #ifdef ALARMLOG_SEPARATE // log alarms separately and add button to show them
  if ( password_mngr )
  { 
	menu_btn[num_menu_btn] = new CMenu_button( string_104[lng], menu_btn[4]->child, &Show_alarmlog  );
	password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );//MAINTENANCE_LEVEL
	num_menu_btn++;
  }
  #endif

  #ifdef NEW_LOGGER // log alarms separately and add button to show them
    //if ( password_mngr )
  //{
    menu_btn[num_menu_btn] = new CMenu_button( string_3900[lng], menu_btn[4]->child, &Show_log  );
	//password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );//MAINTENANCE_LEVEL
	num_menu_btn++;
	//}
  #endif

	  if ( IS_PC1 ) //
  {                 //

  #ifdef NEW_PASSW_MNGR  // New users/passwords manager
	/*
  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
  }
  */
    if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], OPERATOR_LEVEL );//SUPERVISOR_LEVEL
    num_menu_btn++;
    //menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
	menu_btn[num_menu_btn] = new CMenu_button( string_1036[lng], menu_btn[4]->child);
	password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
	
    file_manager.Add_separator( string_1036[lng] );
    menu_btn[num_menu_btn]->child->new_size( 320, 100 );
	parameter[num_params++] = new CParameter( &password_mngr->chgpwd_days, CTYPE_INT ,  0, menu_btn[num_menu_btn]->child, string_1037[lng], string_day[lng],  90,  1,  360, &file_manager);
	parameter[num_params++] = new CParameter( &password_mngr->logout_timeout, CTYPE_INT ,  0, menu_btn[num_menu_btn]->child, string_1038[lng], string_minute[lng],  10,  1,  30, &file_manager);
	parameter[num_params++] = new CParameter( &password_mngr->annotate_on, CTYPE_BOOL8, 0, menu_btn[num_menu_btn]->child, string_1035[lng], L"", 0, 0, 1 ); 
	num_menu_btn++;
    menu_btn[num_menu_btn] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
	num_menu_btn++;
  }

  #else
  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
  }
  #endif

	}


/*
  #ifdef ALARMLOG_SEPARATE // log alarms separately and add button to show them
    menu_btn[num_menu_btn++] = new CMenu_button( string_104[lng], menu_btn[4]->child, &Show_alarmlog  );
  #endif

  #ifdef NEW_LOGGER // log alarms separately and add button to show them
    menu_btn[num_menu_btn++] = new CMenu_button( string_3900[lng], menu_btn[4]->child, &Show_log  );
  #endif

  if ( password_mngr )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_1040[lng], menu_btn[4]->child, &Change_passwords  );
    password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
    num_menu_btn++;
    menu_btn[num_menu_btn++] = new CMenu_button( string_1039[lng], menu_btn[4]->child, &Logout  );
  }
  */
	
  
  menu_btn[num_menu_btn] = new CMenu_button( string_170[lng], menu_btn[4]->child, &Save_images       );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveimages_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

//	parameter[num_params++] = new CParameter( &datarec_on, CTYPE_BOOL8, 0, menu_btn[4]->child, string_2130[lng], 0,  0,  0, 1, NULL, NULL );
	menu_btn[num_menu_btn] = new CMenu_button( string_304[lng], menu_btn[4]->child, &Data_record       );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  inpdatarec_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  #ifdef SAVE_INPUTDATA
    if ( IS_PC1 )
    {
      menu_btn[num_menu_btn] = new CMenu_button( string_354[lng], menu_btn[4]->child, &Inpdata_record );
      if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
      inpdatarec_btn = menu_btn[num_menu_btn];
      num_menu_btn++;
    }
    if ( IS_PC2 ) // Used for filling level NITIN
    {
      menu_btn[num_menu_btn] = new CMenu_button( string_360[lng], menu_btn[4]->child, &Inpdata_record );
      if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
      inpdatarec_btn = menu_btn[num_menu_btn];
      num_menu_btn++;
    }
  #endif

	menu_btn[num_menu_btn] = new CMenu_button( string_320[lng], menu_btn[4]->child, &Save_inspections  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveinsp_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

	menu_btn[num_menu_btn] = new CMenu_button( string_324[lng], menu_btn[4]->child, &Save_sequences  );
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  saveseq_btn = menu_btn[num_menu_btn];
  num_menu_btn++;

  #ifdef GRIPPER_STATISTICS
  //if ( IS_PC1 )
  {
    menu_btn[num_menu_btn] = new CMenu_button( string_8150[lng], menu_btn[4]->child, &Grippers_statistics );
    if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
    num_menu_btn++;
  }
  #endif

//  #ifdef DEBUGPC //_DEBUG
  if ( test_process )
  {
	  //menu_btn[num_menu_btn++] = new CMenu_button( string_172[lng],  menu_btn[4]->child, &Load_images       );
    menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[4]->child, &Test_process      ); 
    //menu_btn[num_menu_btn++] = new CMenu_button( string_912[lng],  menu_btn[4]->child, &Sequence_acquire  ); 
  }
//  #endif
   // menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[4]->child, &Test_process      ); 
  
 //  ASSERT ( menu_btn[19]==NULL );
 

//	container_main = new CContainer_main( L"menu base", rett, this, IDD_CONTAINER );
  container_main->GetClientRect( &rett );

  rett.bottom -= 200;

  container_main->MoveWindow( &rett );

  //Pour added new buttons for Debug of XTS on 20201022



  //Pour added new buttons for Debug of XTS on 20201022


}



int CChildView::Prepare_dsporgx( int sta, int end )
{
  int i=0;

  int nimg = end-sta+1;
  ASSERT( nimg>0 && nimg<=NUM_TLC );

  RECT area;
  GetClientRect(&area);
  int width = area.right-area.left;

  int imgwidth = 0;
  for ( i=sta ; i<=end ; i++ )
  {
    ASSERT( camera[i].width > 0 );
    ASSERT( camera[i].scale > 0 );

    if ( camera[i].modedsp==DISPROT_000 ||
         camera[i].modedsp==DISPROT_180 ||
         camera[i].modedsp==DISPLAY_COL ||
         camera[i].modedsp==DISPLAY_COL180 )
    {
      camera[i].dspdim.cx = int( 0.5 + camera[i].width * camera[i].scale );
    }
    else
    {
      camera[i].dspdim.cx = int( 0.5 + camera[i].height * camera[i].scale );
    }

    imgwidth += camera[i].dspdim.cx;
  }

  int remain = width-imgwidth;

  ASSERT( remain > 0 ); // free space to be divided

//  int xspace = remain / ( nimg + 1 );
  int xspace = remain / ( nimg * 2 );

  int x = 0;

  for ( i=sta ; i<=end ; i++ )
  {
    x += xspace;
    camera[i].dsporg.x = x;
    x += camera[i].dspdim.cx;
    x += xspace;
  }


//  ASSERT( nimg*imgw>width );
  return 0;

}




#ifdef STOPPER_CTRL

void CChildView::Create_display_stopper_ctrl(void)
{
  UINT i;
  CString msg;
  
  Basler_initialize();
  ZeroMemory( camera, NUM_TLC*sizeof(Camera_struct) );

  groupnames[1] = string_541;

  // INITIALIZE CAP CAMERAS
  UINT indsta = tlcgroupPC1[0][0]; // first camera HIGH angle light
  UINT indend = tlcgroupPC1[0][1]; // second camera LOW angle light
  for ( i=indsta ; i<=indend ; i++ )
  {
    ASSERT( seal_serials && seal_serials[i] && AfxIsValidString(seal_serials[i],8) );
    sprintf( camera[i].sn, seal_serials[i] );

    ASSERT( seal_names && seal_names[i] && AfxIsValidString(seal_names[i],4) );
    swprintf( camera[i].name, 5, seal_names[i] );

    if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
    {
      msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
      info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
    }

    camera[i].offsetx    =           0;
    camera[i].offsety    =           0;
    camera[i].width      =         780;
    camera[i].height     =         580;
    camera[i].shutter    =         800;
    camera[i].triglab    =           i; // 0-1-2
    camera[i].dsporg.x   =  30 + 100*i;
    camera[i].dsporg.y   =         170;
    camera[i].scale      =         0.5;
    camera[i].acq_mode   = AcquisitionMode_Continuous;  // camera[i].acq_mode   = TriggerMode_On;
    camera[i].trigger    =        TRUE;
    camera[i].strobe     =       FALSE;
    camera[i].frame_rate =         0.0; 
    camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
    camera[i].textnum    =           3;
    camera[i].textwidth  =         360;   // can be used to force width to some specified amount
    camera[i].light_out  = ".O_LIGHT"; // output to be switched ON when TRIGGER WAIT is disabled

    if ( Basler_initialize( i ) )
    {
      msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
      if ( !debug ) Message_box( msg, MBOX_ERROR );
    }
    else
    {
      if ( Basler_parameters( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
    }
  }

  Prepare_dsporgx(indsta,indend);

  for ( i=indsta ; i<=indend ; i++ )
  {
    if ( Basler_display( i ) )
    {
      Message_box( msg_err, MBOX_ERROR );
      return;
    }
    parcat_1 = camera[i].name;
    parcat_2 = L"Stopper";
    tip_insp[i] = new CTip_inspection( i, &file_manager, CAP_INSPECTION );
  }



  //////////////////////////////////////////////////////////////////////////////////////////////////////
  
  // Parametro di lettura/visualizzazione
  #ifdef BECKHOFF

  RECT area_txt;

  CRect area_client;
  GetClientRect( &area_client );

	area_txt.left   =                       OFFS_COORDY;
  area_txt.right  = area_client.Width() - OFFS_COORDY;

  #define HDRIGA 34 // vertical height of text lines
  #define HSRIGA  4 // vertical space between different lines

  area_txt.top    = area_client.bottom - 3*HDRIGA - 3*HSRIGA;
	area_txt.bottom = area_txt.top + HDRIGA;

  machine_txt     = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	machine_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_CONTAIN;
	if ( machine_txt ) machine_txt->SetText( string_008[lng] );

	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

  alarm_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	alarm_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	if ( alarm_txt ) alarm_txt->SetText( L"-" );
  
  // GESTIONE WARNING
	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

  warning_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	warning_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	if ( warning_txt ) warning_txt->SetText( L"-" );

  #undef HRIGA2

  #endif // BECKHOFF

  Invalidate( TRUE );
}
	
#endif // STOPPER_CTRL





#ifdef TIVS_A60
void CChildView::Create_display_TIVS_A60(void)
{

  UINT i;
  CString msg;
  
  Basler_initialize();
//  ZeroMemory( &camera[i], sizeof( Camera_struct ) );
  ZeroMemory( camera, NUM_TLC*sizeof(Camera_struct) );

  if ( IS_PC1 ) // ( !wcsncmp( PC_name, L"PC1", 3 ) )
  {
    groupnames[1] = string_540;
    groupnames[2] = string_542;

    // INITIALIZE TIP/SEAL CAMERAS
//    for ( i=INDSTA0_PC1 ; i<=INDEND0_PC1 ; i++ )
    UINT indsta=tlcgroupPC1[0][0];
    UINT indend=tlcgroupPC1[0][1];
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( tip_serials && tip_serials[i-indsta] && AfxIsValidString(tip_serials[i-indsta],8) );
      sprintf( camera[i].sn, tip_serials[i-indsta] );

      ASSERT( tip_names && tip_names[i-indsta] && AfxIsValidString(tip_names[i-indsta],4) );
      swprintf( camera[i].name, 5, tip_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =         780;
      camera[i].height     =         580;
      camera[i].shutter    =         800;
      camera[i].triglab    =           i; // 0-1-2
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   =         380;
      camera[i].scale      =         0.5;
      camera[i].acq_mode   = AcquisitionMode_Continuous;  // camera[i].acq_mode   = TriggerMode_On;
      camera[i].trigger    =        TRUE;
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         360; // can be used to force width to some specified amount

	  //Pour added for testing 20200316
	  #ifdef TEST_QILU
      camera[i].textnum    =         5;
      #endif
	  //Pour added for testing 20200316

      #ifdef USE_ACA640_TIP
        if ( i==0 )  // change DELAY1 and DELAY2 for DOUBLE_CAP_TRIGGER
        {
          ADS_write_value("TRIGGER_DOUBLE_CAP.DELAY1",  7, CTYPE_DINT ); // a 6 sembra stabile, sotto no metto 7
          ADS_write_value("TRIGGER_DOUBLE_CAP.DELAY2", 90, CTYPE_DINT );
        }
        camera[i].width      =     648; // 650; make it multiple of 4
        camera[i].height     =     490; // 
        camera[i].scale      =     0.6;
      #endif

      #ifdef NEW_TRIPLE_TIP
        camera[i].strobe     =      TRUE;
      #endif

      #ifdef FO_COLOR
        camera[i].light_out  = ".O_LIGHT[1]"; // output to be switched ON when TRIGGER WAIT is disabled
      #endif

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
        //return;
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx( indsta,indend );

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      #ifdef FO_COLOR
        parcat_1 = camera[i].name;
        parcat_2 = L"Cap";
        #ifdef NEWCAP_DOUBLE
          tip_insp[i] = new CTip_inspection( i, &file_manager, TOPLIGHT_INSPECTION );
        #else
          tip_insp[i] = new CTip_inspection( i, &file_manager, CAP_INSPECTION );
        #endif
      #else
        parcat_1 = camera[i].name;
        parcat_2 = L"Tip";
        tip_insp[i] = new CTip_inspection( i, &file_manager ); 
      #endif
    }


    // INITIALIZE PARTICLE1 CAMERAS
    indsta=tlcgroupPC1[1][0];
    indend=tlcgroupPC1[1][1];
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( part1_serials && part1_serials[i-indsta] && AfxIsValidString(part1_serials[i-indsta],8) );
      sprintf( camera[i].sn, part1_serials[i-indsta] );
     
      ASSERT( part1_names && part1_names[i-indsta] && AfxIsValidString(part1_names[i-indsta],4) );
      swprintf( camera[i].name, 5, part1_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           6;
      camera[i].offsety    = (580-PARTICDIMY)/2;
      camera[i].width      =  PARTICDIMX;
      camera[i].height     =  PARTICDIMY;
      camera[i].shutter    =         800;
      camera[i].triglab    =           i; // 3-4-5-6-7-8
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =         0.5;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].sequence   =        TRUE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =           0; //300; // can be used to force width to some specified amount


      #if defined SYNCH_PARTIC && STN1==PARTICLE_BOTTOM // If enabled synch of cameras A/D B/E C/F enabled in HW
        camera[i].trigger  =        TRUE;
      #endif 

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
        //return;
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }

      parcat_1 = camera[i].name;
      parcat_2 = L"Particle1";

      #if STN1==PARTICLE_BOTTOM
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+1, &file_manager );
      #else 
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+1, &file_manager );
      #endif

      #ifdef STN1_FILLING_LEVEL
        parcat_2 = L"Filling level1";
        fillingl_insp[i] = new CFilling_level( i, &file_manager );
        // fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight

        #if STN1==PARTICLE_BOTTOM
          fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight
        #endif
        #if STN1==PARTICLE_BACK
          fillingl_insp[i]->mode = FILLINGL_MODE_ADSORPTION; // backlight
        #endif
        #if STN1==PARTICLE_BOTH
          fillingl_insp[i]->mode = FILLINGL_MODE_SELECTABLE; // selectable bottom/backlight
        #endif
      #endif // STN1_FILLING_LEVEL

    }

    ASSERT( i==9 );

    #ifdef FO_COLOR

      groupnames[1] = string_541;
      groupnames[3] = string_554;
      indsta=tlcgroupPC1[2][0];
      indend=tlcgroupPC1[2][0];

      ASSERT( foc_serials && foc_serials[i-indsta] && AfxIsValidString(foc_serials[i-indsta],8) );
      sprintf( camera[i].sn, foc_serials[i-indsta] );
     
      ASSERT( foc_names && foc_names[i-indsta] && AfxIsValidString(foc_names[i-indsta],4) );
      swprintf( camera[i].name, 5, foc_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].width      =           560;
      camera[i].height     =           560;
      camera[i].offsetx    =   (780-560)/2;
      camera[i].offsety    =   (580-560)/2;
      camera[i].shutter    =           800;
      camera[i].triglab    =            21; // 21
      camera[i].dsporg.x   =    30 + 100*i;
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =           0.7;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =          TRUE; // trigger here
      camera[i].strobe     =         FALSE;
      camera[i].sequence   =         FALSE;
      camera[i].frame_rate =           0.0; 
      camera[i].modedsp    =   DISPROT_000; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =             4;
      camera[i].textwidth  =           390; // can be used to force width to some specified amount
      camera[i].light_out  = ".O_LIGHT[5]"; // output to be switched ON when TRIGGER WAIT is disabled
      camera[i].modedsp    =   DISPLAY_COL; // FO color camera needs color 24bits display - no rotation

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }

      Prepare_dsporgx(indsta,indend);

      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = L"Flip-Off";
      focolor_insp[i] = new CFOcolor_inspection( i, &file_manager );

    #endif

  }


  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////


  if ( IS_PC2 ) // ( !wcsncmp( PC_name, L"PC2", 3 ) )
  {
    groupnames[1] = string_544;

    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM // third station is for particle
      groupnames[2] = string_545;
    #else  // standard cosmetic
      groupnames[2] = string_546;
    #endif

    // INITIALIZE PARTICLE2 CAMERAS
    UINT indsta=tlcgroupPC2[0][0];
    UINT indend=tlcgroupPC2[0][1];
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( part2_serials && part2_serials[i-indsta] && AfxIsValidString(part2_serials[i-indsta],8) );
      sprintf( camera[i].sn, part2_serials[i-indsta] );
     
      ASSERT( part2_names && part2_names[i-indsta] && AfxIsValidString(part2_names[i-indsta],4) );
      swprintf( camera[i].name, 5, part2_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           6;
      camera[i].offsety    = (580-PARTICDIMY)/2;
      camera[i].width      =  PARTICDIMX;
      camera[i].height     =  PARTICDIMY;
      camera[i].shutter    =         800;
      camera[i].triglab    =         i+9; // 9-10-11-12-13-14
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   =         380;
      camera[i].scale      =         0.5;
      camera[i].acq_mode   = AcquisitionMode_Continuous;  
      camera[i].trigger    =       FALSE;
      camera[i].strobe     =        TRUE;
      camera[i].sequence   =        TRUE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =           0; // 300; // can be used to force width to some specified amount


      #if defined SYNCH_PARTIC && STN2==PARTICLE_BOTTOM // If enabled synch of cameras A/D B/E C/F enabled in HW
        camera[i].trigger  =        TRUE;
      #endif

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
        //return;
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = L"Particle2";
      //particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION, &file_manager );

      #if STN2==PARTICLE_BOTTOM
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+2, &file_manager );
      #else 
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+2, &file_manager );
      #endif


      //particle_insp[i]->mode = PARTICLE_MODE_REFLECTION; // bottomlight
      parcat_2 = L"Filling level2";
      fillingl_insp[i] = new CFilling_level( i, &file_manager );
	  //fillingl_insp[i]->mode = FILLINGL_MODE_ADSORPTION; // backlight
      fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight

	//  	if ( i>6 && i<11)
	//{
	//if ( fillingl_insp  [i] ) fillingl_insp  [i]->Add_menu_parameters_f( menu_btn[menu_btn_par]->child );
	//}

    }


    // INITIALIZE COSMETIC CAMERAS (LINE SCAN)
    indsta=tlcgroupPC2[1][0];
    indend=tlcgroupPC2[1][1];
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( cosm_serials && cosm_serials[i-indsta] && AfxIsValidString(cosm_serials[i-indsta],8) );
      sprintf( camera[i].sn, cosm_serials[i-indsta] );
     
      ASSERT( cosm_names && cosm_names[i-indsta] && AfxIsValidString(cosm_names[i-indsta],4) );
      swprintf( camera[i].name, 5, cosm_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      #if STN3==PARTICLE_BOTTOM || STN3==PARTICLE_BACK // station3 is for particle (area scan cameras)
        camera[i].offsetx    =           6;
        camera[i].offsety    = (580-PARTICDIMY)/2;
        camera[i].width      =  PARTICDIMX;
        camera[i].height     =  PARTICDIMY;
        camera[i].shutter    =         800;
        camera[i].triglab    =         i+9; // 15-16-17-18-19-20
        camera[i].dsporg.x   =  30 + 100*i;
        camera[i].dsporg.y   =         380;
        camera[i].scale      =         0.5;
        camera[i].acq_mode   = AcquisitionMode_Continuous;  
        camera[i].trigger    =       FALSE;
        camera[i].strobe     =        TRUE;
        camera[i].sequence   =        TRUE;
        camera[i].frame_rate =         0.0; 
        camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
        camera[i].textnum    =           4;
        camera[i].textwidth  =           0; // 300; // can be used to force width to some specified amount

        #if defined SYNCH_PARTIC && STN3==PARTICLE_BOTTOM // If enabled synch of cameras A/D B/E C/F enabled in HW
          camera[i].trigger  =        TRUE;
        #endif

      #endif


      #if STN3==COSMETIC_BACK // standard cosmetic (line scan cameras)
        camera[i].offsetx    =           0;
        camera[i].offsety    =           0;
        camera[i].width      =        2048; // sensor resolution or less
        camera[i].height     =        1000; // n. of lines
        camera[i].shutter    =         220;
        camera[i].triglab    =         i+9; // 15-16-17-18-19-20
        camera[i].dsporg.x   =  30 + 100*i; 
        camera[i].dsporg.y   = camera[0].dsporg.y;
        camera[i].scale      =         0.2;
        camera[i].acq_mode   = AcquisitionMode_Continuous;
        camera[i].trigger    =       FALSE; // no trigger here
        camera[i].strobe     =       FALSE;
        camera[i].frame_rate =      3200.0; 
        camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
        camera[i].textnum    =           4;
        camera[i].textwidth  =           0; // 300; // can be used to force width to some specified amount
      #endif

      if ( Basler_initialize( i ) )
      {
        //msg.Format( string_520[lng], AtoW(camera[i].sn), msg_err );
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
        //return;
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;

      #if STN3==PARTICLE_BOTTOM // station3 is for particle
        parcat_2 = L"Particle bottomlight";
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+3, &file_manager );
      #endif

      #if STN3==PARTICLE_BACK // station3 is for particle
        parcat_2 = L"Particle backlight";
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+3, &file_manager );
      #endif

      //#if STN3==COSMETIC_BACK // standard cosmetic
      //  parcat_2 = L"Cosmetic";
      //  cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE ); // Cosmetic/sidewall A40/L40
      //  cosmetic_insp[i]->txt_desc = string_838[lng];
      //#endif

		#if defined NEWCOSMETIC_COMBO
	  cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_COMBO ); // Sidewall F40
#elif STN3==COSMETIC_BACK
	  //Pour 20190522
      cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE ); // Sidewall F40
      // changed 20151009 for 2014-00-056 to have new inspection with all parameters 
      //cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE|CSMTYPE_CAKEVOLUME ); // Sidewall F40
      cosmetic_insp[i]->txt_desc = string_838[lng];
#else
#endif





    }
  }
  
  // Parametro di lettura/visualizzazione
  #ifdef BECKHOFF

  RECT area_txt;

  CRect area_client;
  GetClientRect( &area_client );

	area_txt.left   =                       OFFS_COORDY;
  area_txt.right  = area_client.Width() - OFFS_COORDY;

  #define HDRIGA 34 // vertical height of text lines
  #define HSRIGA  4 // vertical space between different lines

  area_txt.top    = area_client.bottom - 3*HDRIGA - 3*HSRIGA;
	area_txt.bottom = area_txt.top + HDRIGA;

  machine_txt     = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	machine_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_CONTAIN;
	if ( machine_txt ) machine_txt->SetText( string_008[lng] );

	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

  alarm_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	alarm_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	alarm_txt->SetText( L"-" );
  
  // GESTIONE WARNING
	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

  warning_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	warning_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	warning_txt->SetText( L"-" );

  #undef HRIGA2
  #endif // BECKHOFF
}
	
#endif // TIVS_A60



#ifdef TIVS_A40
void CChildView::Create_display_TIVS_A40(void) //Create_display_TIVS40_LQ(void)
{

  UINT i;
  CString msg;
  
  Basler_initialize();
//  ZeroMemory( &camera[i], sizeof( Camera_struct ) );
  ZeroMemory( camera, NUM_TLC*sizeof(Camera_struct) );

  if ( IS_PC1 ) // ( !wcsncmp( PC_name, L"PC1", 3 ) )
  {
    groupnames[1] = string_540;
    groupnames[2] = string_542;

//    layout_dsp = new CImage_layout( L"c:\\IVS\\layout.png" );
   // layout_dsp = new CImage_layout( L"layout.png" );

    // INITIALIZE TIP/SEAL CAMERAS
//    for ( i=INDSTA0_PC1 ; i<=INDEND0_PC1 ; i++ )
    UINT indsta=tlcgroupPC1[0][0];
    UINT indend=tlcgroupPC1[0][1];
    for ( i=indsta ; i<=indend ; i++ )
    {
      /* if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        //msg.Format( string_512[lng], i+1 );
        msg.Format( string_514[lng], i+1, camera[i]. );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }  */

      ASSERT( tip_serials && tip_serials[i-indsta] && AfxIsValidString(tip_serials[i-indsta],8) );
      sprintf( camera[i].sn, tip_serials[i-indsta] );

      ASSERT( tip_names && tip_names[i-indsta] && AfxIsValidString(tip_names[i-indsta],4) );
      swprintf( camera[i].name, 5, tip_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =         780;
      camera[i].height     =         580;
      camera[i].shutter    =         800;
      camera[i].triglab    =           i; // 0-1-2
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   =         380;
      camera[i].scale      =         0.5;
      camera[i].acq_mode   = AcquisitionMode_Continuous;  // camera[i].acq_mode   = TriggerMode_On;
      camera[i].trigger    =        TRUE;
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         360; // can be used to force width to some specified amount
      //camera[i].light_out  = ".O_LIGHT[1]"; // output to be switched ON when TRIGGER WAIT is disabled

	  //Pour added for testing 20200318
	  #ifdef TEST_QILU
      camera[i].textnum    =         5;
      #endif
	  //Pour added for testing 20200318

      #ifdef NEW_TRIPLE_TIP
        camera[i].strobe     =      TRUE;
      #endif

      #ifdef NEWCAP_V30
        camera[i].textwidth =        400;
      #endif

      //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
      #ifdef FO_COLOR
        camera[i].light_out  = ".O_LIGHT[1]"; // output to be switched ON when TRIGGER WAIT is disabled
      #endif

		#ifdef LIQUID_COLOR
        camera[i].light_out  = ".O_LIGHT[1]"; // output to be switched ON when TRIGGER WAIT is disabled
      #endif

      if ( Basler_initialize( i ) )
      {
        //msg.Format( string_520[lng], AtoW(camera[i].sn), msg_err );
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
        //return;
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx( indsta,indend );

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      //#if SERIAL_N==201300502 // HENG RUI - CAP/sealing inspection plus FO color!
      #ifdef FO_COLOR
        parcat_1 = camera[i].name;

        #ifdef COMBINED_TIPCAP
          parcat_2 = L"Tip/Cap";
          tip_insp[i] = new CTip_inspection( i, &file_manager, TIPCAP_INSPECTION );

        #else  // COMBINED_TIPCAP
          parcat_2 = L"Cap";

          #ifdef NEWCAP_DOUBLE

            #ifdef    NEWCAP_ORALCAP
              tip_insp[i] = new CTip_inspection( i, &file_manager, ORALCAP_INSPECTION );
            #else  // NEWCAP_ORALCAP
              tip_insp[i] = new CTip_inspection( i, &file_manager, TOPLIGHT_INSPECTION );
            #endif // NEWCAP_ORALCAP

            // tip_insp[i] = new CTip_inspection( i, &file_manager, TOPLIGHT_INSPECTION );

          #else // NEWCAP_DOUBLE
            tip_insp[i] = new CTip_inspection( i, &file_manager, CAP_INSPECTION );
          #endif // NEWCAP_DOUBLE

        #endif // COMBINED_TIPCAP

      #else // FO_COLOR

	          #ifdef LIQUID_COLOR    // if defined liquid color control for zhongke is enabled
          parcat_1 = camera[i].name;
          parcat_2 = L"Tip";
          tip_insp[i] = new CTip_inspection( i, &file_manager );
        #else // LIQUID_COLOR
          parcat_1 = camera[i].name;
          parcat_2 = L"Tip";
          tip_insp[i] = new CTip_inspection( i, &file_manager ); 
        #endif // LIQUID_COLOR

        //parcat_1 = camera[i].name;
        //parcat_2 = L"Tip";
        //tip_insp[i] = new CTip_inspection( i, &file_manager ); 
      #endif // FO_COLOR
    }


    // INITIALIZE PARTICLE1 CAMERAS
    indsta=tlcgroupPC1[1][0];
    indend=tlcgroupPC1[1][1];
    for ( i=indsta ; i<=indend ; i++ )
    {
      /* if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_512[lng], i+1 );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      } */

      ASSERT( part1_serials && part1_serials[i-indsta] && AfxIsValidString(part1_serials[i-indsta],8) );
      sprintf( camera[i].sn, part1_serials[i-indsta] );
     
      ASSERT( part1_names && part1_names[i-indsta] && AfxIsValidString(part1_names[i-indsta],4) );
      swprintf( camera[i].name, 5, part1_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }



      camera[i].offsetx    =           6;
      camera[i].offsety    = (580-PARTICDIMY)/2;
      camera[i].width      =  PARTICDIMX;
      camera[i].height     =  PARTICDIMY;
      camera[i].shutter    =         800;
      camera[i].triglab    =           i; // 3-4-5-6
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =         0.5;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].sequence   =        TRUE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      #if STN1_OR==HORIZONTAL       // if defined cameras are setup horizonthally
        camera[i].dsporg.y   =         380;
        camera[i].modedsp    = DISPROT_000; // DISPROT_000 DISPROT_090 DISPROT_180
        camera[i].scale      =         0.4;
      #endif

      #ifdef SYNCH_PARTIC    // If enabled synch of cameras A/D B/E C/F enabled in HW
        #if STN1==PARTICLE_BOTTOM
          camera[i].trigger  =        TRUE;
        #endif
      #endif 

		  	//Pour added for color difference detection 20210320
	#ifdef COLOR_DETECTION_P1
		if ( i==3 ) camera[i].modedsp  =   DISPLAY_COL90; // P1-A color camera needs color 24bits display
		if ( i==4 ) camera[i].modedsp  =   DISPLAY_COL90; // P1-B color camera needs color 24bits display
		if ( i==5 ) camera[i].modedsp  =   DISPLAY_COL90; // P1-B color camera needs color 24bits display
		if ( i==6 ) camera[i].modedsp  =   DISPLAY_COL90; // P1-B color camera needs color 24bits display
	#endif
	//Pour added for color difference detection 20210320




      if ( Basler_initialize( i ) )
      {
        //msg.Format( string_520[lng], AtoW(camera[i].sn), msg_err );
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
        //return;
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }

      parcat_1 = camera[i].name;
      parcat_2 = L"Particle1";


      #if STN1==PARTICLE_BOTTOM
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+1, &file_manager );
      #endif 
      #if STN1==PARTICLE_BACK
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+1, &file_manager );
      #endif 
      #if STN1==PARTICLE_BOTH
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_BOTH+1, &file_manager );
      #endif 


/*    #if STN1==PARTICLE_BOTTOM
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+1, &file_manager );
      #else // PARTICLE_BACK or PARTICLE_BOTH
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+1, &file_manager );
      #endif */


      #ifdef STN1_FILLING_LEVEL
        parcat_2 = L"Filling level1";
        fillingl_insp[i] = new CFilling_level( i, &file_manager );
        // fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight

        #if STN1==PARTICLE_BOTTOM
          fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight
        #endif
        #if STN1==PARTICLE_BACK
          fillingl_insp[i]->mode = FILLINGL_MODE_ADSORPTION; // backlight
        #endif
        #if STN1==PARTICLE_BOTH
          fillingl_insp[i]->mode = FILLINGL_MODE_SELECTABLE; // selectable bottom/backlight
        #endif

/*        #if STN1==PARTICLE_BOTTOM
          fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight
        #else // PARTICLE_BACK or PARTICLE_BOTH
          fillingl_insp[i]->mode = FILLINGL_MODE_ADSORPTION; // backlight
        #endif */

      #endif // STN1_FILLING_LEVEL



      #if STN1_OR==HORIZONTAL  // if defined cameras are setup horizontally
        particle_insp[i]->mode += PARTICLE_HORIZONTAL;
        fillingl_insp[i]->mode += FILLINGL_MODE_HORIZONTAL; 
      #endif


      // on 2013-002VB test two bottomlight inspections
      // on 2013-029V  test two bottomlight inspections
      // on 2013-004VB test two bottomlight inspections
      // on 2013-005V  test two bottomlight inspections
      // on 2013-008VB test two bottomlight inspections
      /*
      if ( SERIAL_N==2013002 || SERIAL_N==2013029 || SERIAL_N==2013004 || SERIAL_N==201300501 || SERIAL_N==2013008 )//|| SERIAL_N==201300502 ) 
      {
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION, &file_manager );
      }
      else particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION, &file_manager );
      */
    }

    ASSERT( i==7 );
    //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - includes FO color as last camera
    #ifdef FO_COLOR

      groupnames[1] = string_541;
      groupnames[3] = string_554;
      indsta=tlcgroupPC1[2][0];
      indend=tlcgroupPC1[2][0];

      ASSERT( foc_serials && foc_serials[i-indsta] && AfxIsValidString(foc_serials[i-indsta],8) );
      sprintf( camera[i].sn, foc_serials[i-indsta] );
     
      ASSERT( foc_names && foc_names[i-indsta] && AfxIsValidString(foc_names[i-indsta],4) );
      swprintf( camera[i].name, 5, foc_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].width      =           560;
      camera[i].height     =           560;
      camera[i].offsetx    =   (780-560)/2;
      camera[i].offsety    =   (580-560)/2;
      camera[i].shutter    =           800;
      camera[i].triglab    =            15; // 3-4-5
      camera[i].dsporg.x   =    30 + 100*i;
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =           0.7;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =          TRUE; // trigger here
      camera[i].strobe     =         FALSE;
      camera[i].sequence   =         FALSE;
      camera[i].frame_rate =           0.0; 
      camera[i].modedsp    =   DISPROT_000; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =             4;
      camera[i].textwidth  =           390; // can be used to force width to some specified amount
      camera[i].light_out  = ".O_LIGHT[5]"; // output to be switched ON when TRIGGER WAIT is disabled
      //camera[i].modedsp    =   DISPLAY_COL; // FO color camera needs color 24bits display - no rotation

      #ifndef NEWCAP_ORALCAP
        if ( i==7 ) camera[i].modedsp  =   DISPLAY_COL; // FO color camera needs color 24bits display - no rotation
      #endif

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }

      Prepare_dsporgx(indsta,indend);

      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
/*      parcat_2 = L"Flip-Off";
      focolor_insp[i] = new CFOcolor_inspection( i, &file_manager );*/

      #ifdef NEWCAP_ORALCAP
        parcat_2 = L"Top-cap";
//        bottom_insp[i] = new CBottom_inspection( i, &file_manager );
        oralfo_insp[i] = new COralFO_inspection( i, &file_manager );
       // ADS_write_value( ".F_FOCAMERA", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high to enable/run FO camera
      #else
        parcat_2 = L"Flip-Off";
        focolor_insp[i] = new CFOcolor_inspection( i, &file_manager );
      #endif
    #endif


		    #ifdef LIQUID_COLOR

      groupnames[1] = string_540;
      groupnames[3] = string_559;
      indsta=tlcgroupPC1[2][0];
      indend=tlcgroupPC1[2][0];

      ASSERT( lqc_serials && lqc_serials[i-indsta] && AfxIsValidString(lqc_serials[i-indsta],8) );
      sprintf( camera[i].sn, lqc_serials[i-indsta] );
     
      ASSERT( lqc_names && lqc_names[i-indsta] && AfxIsValidString(lqc_names[i-indsta],4) );
      swprintf( camera[i].name, 5, lqc_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].width      =           560;
      camera[i].height     =           560;
      camera[i].offsetx    =   (780-560)/2;
      camera[i].offsety    =   (580-560)/2;
      camera[i].shutter    =           800;
      camera[i].triglab    =            15; // 3-4-5
      camera[i].dsporg.x   =    30 + 100*i;
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =           0.7;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =          TRUE; // trigger here
      camera[i].strobe     =         FALSE;
      camera[i].sequence   =         FALSE;
      camera[i].frame_rate =           0.0; 
      camera[i].modedsp    =   DISPLAY_COL; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =             4;
      camera[i].textwidth  =           390; // can be used to force width to some specified amount
      camera[i].light_out  = ".O_LIGHT[5]"; // output to be switched ON when TRIGGER WAIT is disabled
      //camera[i].modedsp    =   DISPLAY_COL; // FO color camera needs color 24bits display - no rotation

      if ( i==7 ) camera[i].modedsp  =   DISPLAY_COL; // FO color camera needs color 24bits display - no rotation

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }

      Prepare_dsporgx(indsta,indend);

      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;

      parcat_2 = L"Liquid color";
      lqcolor_insp[i] = new CLQcolor_inspection( i, &file_manager );
    #endif



    #ifdef DOTRING_COLOR // If defined, NITIN dor-ring presence and color enabled

      ADS_write_value( ".F_DOTRING", TRUE, CTYPE_BOOL8 ); // Force flag into PLC high 

      groupnames[1] = string_541;
      groupnames[3] = string_556;
      
      //tlcgroupPC1[2][1] = 8;

      indsta=tlcgroupPC1[2][0]; // 7
      indend=tlcgroupPC1[2][1]; // 8

      for ( i=indsta ; i<=indend ; i++ )
      {

        ASSERT( dtrng_serials && dtrng_serials[i-indsta] && AfxIsValidString(dtrng_serials[i-indsta],8) );
        sprintf( camera[i].sn, dtrng_serials[i-indsta] );

        ASSERT( dtrng_names && dtrng_names[i-indsta] && AfxIsValidString(dtrng_names[i-indsta],4) );
        swprintf( camera[i].name, 5, dtrng_names[i-indsta] );

        if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
        {
          msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
          info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
        }

        camera[i].width      =           560;
        camera[i].height     =           560;
        camera[i].offsetx    =   (780-560)/2;
        camera[i].offsety    =   (580-560)/2;
        camera[i].shutter    =           800;
        camera[i].triglab    =            16; // 16 = dot&ring color
        camera[i].dsporg.x   =    30 + 100*i;
        camera[i].dsporg.y   = camera[0].dsporg.y;
        camera[i].scale      =           0.7;
        camera[i].acq_mode   = AcquisitionMode_Continuous;
        camera[i].trigger    =          TRUE; // trigger here
        camera[i].strobe     =         FALSE;
        camera[i].sequence   =         FALSE;
        camera[i].frame_rate =           0.0; 
        //camera[i].modedsp    =   DISPLAY_COL; // DISPROT_000 DISPROT_090 DISPROT_180
        //camera[i].modedsp    =   DISPLAY_COL90; // DISPROT_000 DISPROT_090 DISPROT_180
        camera[i].modedsp    =   DISPLAY_COL270; // DISPROT_000 DISPROT_090 DISPROT_180

        camera[i].textnum    =             4;
        camera[i].textwidth  =           390; // can be used to force width to some specified amount
        //camera[i].light_out  = ".O_LIGHT[5]"; // output to be switched ON when TRIGGER WAIT is disabled
        //camera[i].modedsp    =   DISPLAY_COL; // FO color camera needs color 24bits display - no rotation


        if ( Basler_initialize( i ) )
        {
          msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
          if ( !debug ) Message_box( msg, MBOX_ERROR );
        }
        else
        {
          if ( Basler_parameters( i ) )
          {
            Message_box( msg_err, MBOX_ERROR );
            return;
          }
        }

      }

      Prepare_dsporgx(indsta,indend);

      for ( i=indsta ; i<=indend ; i++ )
      {

        if ( Basler_display( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
        parcat_1 = camera[i].name;
        parcat_2 = L"Dot-Ring";
        drcolor_insp[i] = new CDRcolor_inspection( i, &file_manager );
      }        
      
      #endif // DOTRING_COLOR // If defined, NITIN dor-ring presence and color enabled

  }


  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////


  if ( IS_PC2 ) // ( !wcsncmp( PC_name, L"PC2", 3 ) )
  {
    groupnames[1] = string_544;

    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM // third station is for particle
      groupnames[2] = string_545;
    #else  // standard cosmetic
      groupnames[2] = string_546;
    #endif

    // INITIALIZE PARTICLE2 CAMERAS
    UINT indsta=tlcgroupPC2[0][0];
    UINT indend=tlcgroupPC2[0][1];
    for ( i=indsta ; i<=indend ; i++ )
    {
      /* if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_512[lng], i+1 );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      } */

      ASSERT( part2_serials && part2_serials[i-indsta] && AfxIsValidString(part2_serials[i-indsta],8) );
      sprintf( camera[i].sn, part2_serials[i-indsta] );
     
      ASSERT( part2_names && part2_names[i-indsta] && AfxIsValidString(part2_names[i-indsta],4) );
      swprintf( camera[i].name, 5, part2_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           6;
      camera[i].offsety    = (580-PARTICDIMY)/2;
      camera[i].width      =  PARTICDIMX;
      camera[i].height     =  PARTICDIMY;
      camera[i].shutter    =         800;
      camera[i].triglab    =         i+7; // 7-8-9-10
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   =         380;
      camera[i].scale      =         0.5;
      camera[i].acq_mode   = AcquisitionMode_Continuous;  
      camera[i].trigger    =       FALSE;
      camera[i].strobe     =        TRUE;
      camera[i].sequence   =        TRUE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      #if STN2_OR==HORIZONTAL       // if defined cameras are setup horizonthally
        camera[i].dsporg.y   =         380;
        camera[i].modedsp    = DISPROT_000; // DISPROT_000 DISPROT_090 DISPROT_180
        camera[i].scale      =         0.4;
      #endif

      #if defined SYNCH_PARTIC && STN2==PARTICLE_BOTTOM  // If enabled synch of cameras A/D B/E C/F enabled in HW
        camera[i].trigger  =        TRUE;
      #endif 


      if ( Basler_initialize( i ) )
      {
        //msg.Format( string_520[lng], AtoW(camera[i].sn), msg_err );
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
        //return;
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = L"Particle2";
      //particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION, &file_manager );

      #if STN2==PARTICLE_BOTTOM
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+2, &file_manager );
      #else 
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+2, &file_manager );
      #endif
      //particle_insp[i]->mode = PARTICLE_MODE_REFLECTION; // bottomlight

      parcat_2 = L"Filling level2";
      fillingl_insp[i] = new CFilling_level( i, &file_manager );
//      fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight

      #if STN2==PARTICLE_BOTTOM
        fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight
      #else 
        fillingl_insp[i]->mode = FILLINGL_MODE_ADSORPTION; // backlight
      #endif

      #if STN2_OR==HORIZONTAL  // if defined cameras are setup horizontally
        particle_insp[i]->mode += PARTICLE_HORIZONTAL;
      #endif


    }


    // INITIALIZE COSMETIC CAMERAS (LINE SCAN)
    indsta=tlcgroupPC2[1][0];
    indend=tlcgroupPC2[1][1];
    for ( i=indsta ; i<=indend ; i++ )
    {
      /* if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_512[lng], i+1 );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      } */

      ASSERT( cosm_serials && cosm_serials[i-indsta] && AfxIsValidString(cosm_serials[i-indsta],8) );
      sprintf( camera[i].sn, cosm_serials[i-indsta] );
     
      ASSERT( cosm_names && cosm_names[i-indsta] && AfxIsValidString(cosm_names[i-indsta],4) );
      swprintf( camera[i].name, 5, cosm_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }


      #if STN3==PARTICLE_BOTTOM || STN3==PARTICLE_BACK // station3 is for particle (area scan cameras)
        camera[i].offsetx    =           6;
        camera[i].offsety    = (580-PARTICDIMY)/2;
        camera[i].width      =  PARTICDIMX;
        camera[i].height     =  PARTICDIMY;
        camera[i].shutter    =         800;
        camera[i].triglab    =         i+7; // 11-12-13-14
        camera[i].dsporg.x   =  30 + 100*i;
        camera[i].dsporg.y   =         380;
        camera[i].scale      =         0.5;
        camera[i].acq_mode   = AcquisitionMode_Continuous;  
        camera[i].trigger    =       FALSE;
        camera[i].strobe     =        TRUE;
        camera[i].sequence   =        TRUE;
        camera[i].frame_rate =         0.0; 
        camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
        camera[i].textnum    =           4;
        camera[i].textwidth  =         300; // can be used to force width to some specified amount

        #if defined SYNCH_PARTIC && STN3==PARTICLE_BOTTOM  // If enabled synch of cameras A/D B/E C/F enabled in HW
          camera[i].trigger  =        TRUE;
        #endif 

      #endif

      #if STN3==COSMETIC_BACK // standard cosmetic (line scan cameras)
        camera[i].offsetx    =           0;
        camera[i].offsety    =           0;
        camera[i].width      =        2048; // sensor resolution or less
        camera[i].height     =        1000; // n. of lines
        camera[i].shutter    =         220;
        camera[i].triglab    =         i+7; // 11-12-13-14
        camera[i].dsporg.x   =  30 + 100*i; 
        camera[i].dsporg.y   = camera[0].dsporg.y;
        camera[i].scale      =         0.2;
        camera[i].acq_mode   = AcquisitionMode_Continuous;
        camera[i].trigger    =       FALSE; // no trigger here
        camera[i].strobe     =       FALSE;
        camera[i].frame_rate =      3200.0; 
        camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
        camera[i].textnum    =           4;
        camera[i].textwidth  =         300; // can be used to force width to some specified amount
      #endif


      if ( Basler_initialize( i ) )
      {
        //msg.Format( string_520[lng], AtoW(camera[i].sn), msg_err );
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
        //return;
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
     
      //cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager );

      #if STN3==PARTICLE_BOTTOM // station3 is for particle
        parcat_2 = L"Particle bottomlight";
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+3, &file_manager );
      #endif

      #if STN3==PARTICLE_BACK // station3 is for particle
        parcat_2 = L"Particle backlight";
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+3, &file_manager );
      #endif

      //#if STN3==COSMETIC_BACK // standard cosmetic
      //  parcat_2 = L"Cosmetic";
      //  cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE ); // Cosmetic/sidewall A40/L40
      //  cosmetic_insp[i]->txt_desc = string_838[lng];
      //#endif
	//Pour added for HaoHai on 20200515
#if defined NEWCOSMETIC_COMBO
	  cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_COMBO ); // Sidewall F40
#elif STN3==COSMETIC_BACK
	  //Pour 20190522
      cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE ); // Sidewall F40
      // changed 20151009 for 2014-00-056 to have new inspection with all parameters 
      //cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE|CSMTYPE_CAKEVOLUME ); // Sidewall F40
      cosmetic_insp[i]->txt_desc = string_838[lng];
#else
#endif


    }
  }
  
  // Parametro di lettura/visualizzazione
  #ifdef BECKHOFF

  RECT area_txt;

  CRect area_client;
  GetClientRect( &area_client );

	area_txt.left   =                       OFFS_COORDY;
  area_txt.right  = area_client.Width() - OFFS_COORDY;

  #define HDRIGA 34 // vertical height of text lines
  #define HSRIGA  4 // vertical space between different lines

  area_txt.top    = area_client.bottom - 3*HDRIGA - 3*HSRIGA;
	area_txt.bottom = area_txt.top + HDRIGA;

  machine_txt     = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	machine_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_CONTAIN;
	if ( machine_txt ) machine_txt->SetText( string_008[lng] );

	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

  alarm_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	alarm_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	alarm_txt->SetText( L"-" );
  
  // GESTIONE WARNING
	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

  warning_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	warning_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	warning_txt->SetText( L"-" );

  #undef HRIGA2
  #endif // BECKHOFF
}
	
#endif // TIVS_A40

#ifdef TIVS_C40

void CChildView::Create_display_TIVS_C40(void)
{

  UINT i;
  CString msg;
  
  Basler_initialize();
  ZeroMemory( camera, NUM_TLC*sizeof(Camera_struct) );

  if ( IS_PC1 )
  {
    groupnames[1] = string_541; // CAP Cameras
    groupnames[2] = string_552; // Bottom + Flip Off Cameras
    groupnames[3] = string_542; // Particle1 Cameras
    groupnames[4] = string_550; // Sidecake Cameras

    // INITIALIZE CAP CAMERAS
    UINT indsta = tlcgroupPC1[0][0]; // 0
    UINT indend = tlcgroupPC1[0][1]; // 2
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( seal_serials && seal_serials[i] && AfxIsValidString(seal_serials[i],8) );
      sprintf( camera[i].sn, seal_serials[i] );

      ASSERT( seal_names && seal_names[i] && AfxIsValidString(seal_names[i],4) );
      swprintf( camera[i].name, 5, seal_names[i] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =         780;
      camera[i].height     =         580;
      camera[i].shutter    =         800;
      camera[i].shutter2   =        1200;
      camera[i].triglab    =           i; // 0-1-2
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   =         380;
      camera[i].scale      =         0.5;
      camera[i].acq_mode   = AcquisitionMode_Continuous;  // camera[i].acq_mode   = TriggerMode_On;
      camera[i].trigger    =        TRUE;
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         360;   // can be used to force width to some specified amount
      camera[i].light_out  = ".O_LIGHT[1]"; // output to be switched ON when TRIGGER WAIT is disabled

      #ifdef NEWCAP_V30
        camera[i].textwidth =        400;
      #endif

      #ifdef NEWCAP_V40
        camera[i].textnum    =         5;
      #endif

      #ifdef TEST_BOSEN
        camera[i].textnum    =         5;
      #endif

      #ifdef USE_ACA640_TIP
        if ( i==0 )  // change DELAY1 and DELAY2 for DOUBLE_CAP_TRIGGER
        {
          ADS_write_value("TRIGGER_DOUBLE_CAP.DELAY1",  7, CTYPE_DINT ); // a 6 sembra stabile, sotto no metto 7
          ADS_write_value("TRIGGER_DOUBLE_CAP.DELAY2", 90, CTYPE_DINT );
        }
        camera[i].width      =     648; // 650; make it multiple of 4
        camera[i].height     =     490; // 
        camera[i].scale      =     0.6;
      #endif

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = L"Side cap";

      #ifdef NEWCAP_DOUBLE
        #ifdef    NEWCAP_ORALCAP
          tip_insp[i] = new CTip_inspection( i, &file_manager, ORALCAP_INSPECTION );
        #else  // NEWCAP_ORALCAP
          tip_insp[i] = new CTip_inspection( i, &file_manager, TOPLIGHT_INSPECTION );
        #endif // NEWCAP_ORALCAP
      #else
        tip_insp[i] = new CTip_inspection( i, &file_manager, CAP_INSPECTION );
      #endif
    }


    // INITIALIZE BOTTOM + FO COLOR CAMERAS
    indsta = tlcgroupPC1[1][0]; // 3 first camera HIGH angle light - second camera LOW angle light
    indend = tlcgroupPC1[1][1]; // 5 FO color camera
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( bottom_serials && bottom_serials[i-indsta] && AfxIsValidString(bottom_serials[i-indsta],8) );
      sprintf( camera[i].sn, bottom_serials[i-indsta] );
     
      ASSERT( bottom_names && bottom_names[i-indsta] && AfxIsValidString(bottom_names[i-indsta],4) );
      swprintf( camera[i].name, 5, bottom_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].width      =         560;
      camera[i].height     =         560;
      camera[i].offsetx    = (780-560)/2;
      camera[i].offsety    = (580-560)/2;
      camera[i].shutter    =         800;
      camera[i].triglab    =           i; // 3-4-5
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =         0.7;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =        TRUE; // trigger here
      camera[i].strobe     =       FALSE;
      camera[i].sequence   =       FALSE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_000; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         390; // can be used to force width to some specified amount

   //   if ( i==3 ) camera[i].light_out  = ".O_LIGHT[6]"; // output to be switched ON when TRIGGER WAIT is disabled
   //   if ( i==4 ) camera[i].light_out  = ".O_LIGHT[7]"; // output to be switched ON when TRIGGER WAIT is disabled
   //   if ( i==5 ) camera[i].light_out  = ".O_LIGHT[5]"; // output to be switched ON when TRIGGER WAIT is disabled
      
      #ifndef NEWCAP_ORALCAP
        if ( i==5 ) camera[i].modedsp  =   DISPLAY_COL; // FO color camera needs color 24bits display - no rotation
      #endif

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      if ( i<5 ) // 3=B_A 4=B_B 
      {
        parcat_1 = camera[i].name;
        parcat_2 = L"Bottom";
        bottom_insp[i]  = new CBottom_inspection ( i, &file_manager );
      }
      else      // 5=TC_D
      {
        parcat_1 = camera[i].name;
        #ifdef NEWCAP_ORALCAP
          parcat_2 = L"Top-cap";
          oralfo_insp[i] = new COralFO_inspection( i, &file_manager );
//          bottom_insp[i] = new CBottom_inspection ( i, &file_manager );
//          tip_insp[i] = new CTip_inspection( i, &file_manager, ORALCAP_INSPECTION );
        #else
          parcat_2 = L"Flip-Off";
          focolor_insp[i] = new CFOcolor_inspection( i, &file_manager );
        #endif
      }
    }

    // INITIALIZE PARTICLE1 CAMERAS
    indsta=tlcgroupPC1[2][0]; //  6
    indend=tlcgroupPC1[2][1]; //  8
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( part1_serials && part1_serials[i-indsta] && AfxIsValidString(part1_serials[i-indsta],8) );
      sprintf( camera[i].sn, part1_serials[i-indsta] );
     
      ASSERT( part1_names && part1_names[i-indsta] && AfxIsValidString(part1_names[i-indsta],4) );
      swprintf( camera[i].name, 5, part1_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           6;
      camera[i].offsety    = (580-PARTICDIMY)/2;
      camera[i].width      =  PARTICDIMX;
      camera[i].height     =  PARTICDIMY;
      camera[i].shutter    =         800;
      camera[i].triglab    =           i; // 6-7-8
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =         0.5;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].sequence   =        TRUE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      #if STN1_OR==HORIZONTAL       // if defined cameras are setup horizonthally
        camera[i].dsporg.y   =         380;
        camera[i].modedsp    = DISPROT_000; // DISPROT_000 DISPROT_090 DISPROT_180
        camera[i].scale      =         0.4;
      #endif

      #ifdef SYNCH_PARTIC    // If enabled synch of cameras A/D B/E C/F enabled in HW
        #if STN1==PARTICLE_BOTTOM
          camera[i].trigger  =        TRUE;
        #endif
      #endif 

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }

      parcat_1 = camera[i].name;
      parcat_2 = L"Particle1";


      #if STN1==PARTICLE_BOTTOM
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+1, &file_manager );
      #endif 
      #if STN1==PARTICLE_BACK
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+1, &file_manager );
      #endif 
      #if STN1==PARTICLE_BOTH
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_BOTH+1, &file_manager );
      #endif 

      #ifdef STN1_FILLING_LEVEL
        parcat_2 = L"Filling level1";
        fillingl_insp[i] = new CFilling_level( i, &file_manager );
        // fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight

        #if STN1==PARTICLE_BOTTOM
          fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight
        #endif
        #if STN1==PARTICLE_BACK
          fillingl_insp[i]->mode = FILLINGL_MODE_ADSORPTION; // backlight
        #endif
        #if STN1==PARTICLE_BOTH
          fillingl_insp[i]->mode = FILLINGL_MODE_SELECTABLE; // selectable bottom/backlight
        #endif
      #endif // STN1_FILLING_LEVEL

      #if STN1_OR==HORIZONTAL  // if defined cameras are setup horizontally
        particle_insp[i]->mode += PARTICLE_HORIZONTAL;
        fillingl_insp[i]->mode += FILLINGL_MODE_HORIZONTAL; 
      #endif

    }


    // INITIALIZE SIDECAKE CAMERAS (LINE SCAN)
    indsta = tlcgroupPC1[3][0]; //  9
    indend = tlcgroupPC1[3][1]; // 11
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( sideck_serials && sideck_serials[i-indsta] && AfxIsValidString(sideck_serials[i-indsta],8) );
      sprintf( camera[i].sn, sideck_serials[i-indsta] );
     
      ASSERT( sideck_names && sideck_names[i-indsta] && AfxIsValidString(sideck_names[i-indsta],4) );
      swprintf( camera[i].name, 5, sideck_names[i-indsta] );

      TRACE(L"SIDE-CAKE[%d] <%s>\n", i-indsta, camera[i].name );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =        2048; // sensor resolution or less
      camera[i].height     =        1000; // n. of lines
      camera[i].shutter    =         280;
      camera[i].triglab    =           i; // 9-10-11
      camera[i].dsporg.x   =  30 + 100*i; 
      camera[i].dsporg.y   =         380;
      camera[i].scale      =         0.2;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =      3200.0; // line rate to achieve 1000 lines in 320ms 
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = L"Side-cake";
      cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE ); // Sidecake F40
      cosmetic_insp[i]->txt_desc = string_2306[lng];
    }

  } // IS_PC1

  //////////////////////////////////////////////////////////////////////////////

  if ( IS_PC2 )
  {
    groupnames[1] = string_544; // Show PARTICLE2 cameras
    #ifdef HEEL_INSPECTION     // If defined HEEL texts are used in place of TOP-CAKE inspection
      groupnames[2] = string_558; // Show HEEL cameras
    #else
      groupnames[2] = string_548; // Show TOP_CAKE  cameras
    #endif
    groupnames[3] = string_546; // Show SIDEWALL/COSMETIC cameras


    // INITIALIZE part2
    UINT indsta = tlcgroupPC2[0][0]; // 0 
    UINT indend = tlcgroupPC2[0][1]; // 2
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( part2_serials && part2_serials[i-indsta] && AfxIsValidString(part2_serials[i-indsta],8) );
      sprintf( camera[i].sn, part2_serials[i-indsta] );
     
      ASSERT( part2_names && part2_names[i-indsta] && AfxIsValidString(part2_names[i-indsta],4) );
      swprintf( camera[i].name, 5, part2_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           6;
      camera[i].offsety    = (580-PARTICDIMY)/2;
      camera[i].width      =  PARTICDIMX;
      camera[i].height     =  PARTICDIMY;
      camera[i].shutter    =         800;
      camera[i].triglab    =        i+12; // 12-13-14
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   =         380;
      camera[i].scale      =         0.5;
      camera[i].acq_mode   = AcquisitionMode_Continuous;  
      camera[i].trigger    =       FALSE;
      camera[i].strobe     =        TRUE;
      camera[i].sequence   =        TRUE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      #if STN2_OR==HORIZONTAL       // if defined cameras are setup horizonthally
        camera[i].dsporg.y   =         380;
        camera[i].modedsp    = DISPROT_000; // DISPROT_000 DISPROT_090 DISPROT_180
        camera[i].scale      =         0.4;
      #endif

      #if defined SYNCH_PARTIC && STN2==PARTICLE_BOTTOM  // If enabled synch of cameras A/D B/E C/F enabled in HW
        camera[i].trigger  =        TRUE;
      #endif 

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = L"Particle2";

      #if STN2==COSMETIC_BACK // standard cosmetic
        parcat_2 = L"Cosmetic";
        cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE ); // Cosmetic/sidewall A40/L40
        cosmetic_insp[i]->txt_desc = string_838[lng];
      #else
        #if STN2==PARTICLE_BOTTOM
          particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+2, &file_manager );
        #else 
          particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+2, &file_manager );
        #endif

        parcat_2 = L"Filling level2";
        fillingl_insp[i] = new CFilling_level( i, &file_manager );

        #if STN2==PARTICLE_BOTTOM
          fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight
        #else 
          fillingl_insp[i]->mode = FILLINGL_MODE_ADSORPTION; // backlight
        #endif

        #if STN2_OR==HORIZONTAL  // if defined cameras are setup horizontally
          particle_insp[i]->mode += PARTICLE_HORIZONTAL;
        #endif
     
      #endif
    }

    // INITIALIZE HEEL CAMERAS (LINE SCAN)
    indsta = tlcgroupPC2[1][0]; // 3 
    indend = tlcgroupPC2[1][1]; // 5 
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( topck_serials && topck_serials[i-indsta] && AfxIsValidString(topck_serials[i-indsta],8) );
      sprintf( camera[i].sn, topck_serials[i-indsta] );
     
      ASSERT( topck_names && topck_names[i-indsta] && AfxIsValidString(topck_names[i-indsta],4) );
      swprintf( camera[i].name, 5, topck_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =        2048; // sensor resolution or less
      camera[i].height     =        1000; // n. of lines
      camera[i].shutter    =         280;
      camera[i].triglab    =        i+12; // 15-16-17
      camera[i].dsporg.x   =  30 + 100*i; 
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =         0.2;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =      3200.0; // line rate to achieve 1000 lines in 320ms 
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = string_2308[lng]; // L"Top-cake";
      cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE ); // Top cake F40
      cosmetic_insp[i]->txt_desc = string_2308[lng];

      #ifdef HEEL_INSPECTION
        parcat_2 = string_2310[lng];
        cosmetic_insp[i]->txt_desc = string_2310[lng];
      #endif

    }


//      cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE ); // Sidecake F40


    // INITIALIZE COSMETIC CAMERAS
    indsta=tlcgroupPC2[2][0]; // 6
    indend=tlcgroupPC2[2][1]; // 8
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( cosm_serials && cosm_serials[i-indsta] && AfxIsValidString(cosm_serials[i-indsta],8) );
      sprintf( camera[i].sn, cosm_serials[i-indsta] );
     
      ASSERT( cosm_names && cosm_names[i-indsta] && AfxIsValidString(cosm_names[i-indsta],4) );
      swprintf( camera[i].name, 5, cosm_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =        2048; // sensor resolution or less
      camera[i].height     =        1000; // n. of lines
      camera[i].shutter    =         280;
      camera[i].triglab    =        i+12; // 18-19-20
      camera[i].dsporg.x   =  30 + 100*i; 
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =         0.2;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =      3200.0; // line rate to achieve 1000 lines in 320ms 
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = L"Cosmetic";

      #ifdef NEWCOSMETIC_COMBO   // New cosmetic for combo machines 
        cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_COMBO ); // Cosmetic combo
      #else
        cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDEWALL|CSMTYPE_CAKEVOLUME ); // Sidewall F40
      #endif
      
      // changed 20151009 for 2014-00-056 to have new inspection with all parameters 
      //cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE|CSMTYPE_CAKEVOLUME ); // Sidewall F40
      cosmetic_insp[i]->txt_desc = string_838[lng];
    }

  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////
  
  // Parametro di lettura/visualizzazione
  #ifdef BECKHOFF

  RECT area_txt;

  CRect area_client;
  GetClientRect( &area_client );


//  area_txt.left   =            2*OFFS_COORDY + 2;
//  area_txt.right  = APP_RESX - 2*OFFS_COORDY - 8;
	area_txt.left   =                       OFFS_COORDY;
  area_txt.right  = area_client.Width() - OFFS_COORDY;

  #define HDRIGA 34 // vertical height of text lines
  #define HSRIGA  4 // vertical space between different lines

//  area_txt.top    = area_txt.bottom + 10;
  area_txt.top    = area_client.bottom - 3*HDRIGA - 3*HSRIGA;
	area_txt.bottom = area_txt.top + HDRIGA;

  //machine_txt     = new CText_box( area_txt, this, SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
//  machine_txt     = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
  machine_txt     = new CText_box( 25, L"Arial", area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	machine_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_CONTAIN;
	//machine_txt->SetText( "Machine/program status" );
	if ( machine_txt ) machine_txt->SetText( string_008[lng] );

	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

//  alarm_txt       = new CText_box( area_txt, this, SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
  alarm_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	alarm_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	if ( alarm_txt ) alarm_txt->SetText( L"-" );

  
  // GESTIONE WARNING
	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

//  warning_txt       = new CText_box( area_txt, this, SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
  warning_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	warning_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	//warning_txt->SetText( "-" );
	if ( warning_txt ) warning_txt->SetText( L"-" );

  #undef HRIGA2

  #endif // BECKHOFF

  Invalidate( TRUE );
}
	



#endif // TIVS_C40




#ifdef TIVS_C60

void CChildView::Create_display_TIVS_C60(void)
{

  UINT i;
  CString msg;
  
  UINT indsta = 0;
  UINT indend = 0;

  Basler_initialize();
  ZeroMemory( camera, NUM_TLC*sizeof(Camera_struct) );

  if ( IS_PC1 )
  {
    groupnames[1] = string_541; // CAP Cameras
    groupnames[2] = string_552; // Bottom + Flip Off Cameras
    groupnames[3] = string_546; // Coemstic Cameras

    // INITIALIZE CAP CAMERAS
    indsta = tlcgroupPC1[0][0]; // 0
    indend = tlcgroupPC1[0][1]; // 2
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( seal_serials && seal_serials[i] && AfxIsValidString(seal_serials[i],8) );
      sprintf( camera[i].sn, seal_serials[i] );

      ASSERT( seal_names && seal_names[i] && AfxIsValidString(seal_names[i],4) );
      swprintf( camera[i].name, 5, seal_names[i] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =         780;
      camera[i].height     =         580;
      camera[i].shutter    =         800;
      camera[i].shutter2   =        1200;
      camera[i].triglab    =           i; // 0-1-2
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   =         380;
      camera[i].scale      =         0.5;
      camera[i].acq_mode   = AcquisitionMode_Continuous;  // camera[i].acq_mode   = TriggerMode_On;
      camera[i].trigger    =        TRUE;
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         360;   // can be used to force width to some specified amount
      camera[i].light_out  = ".O_LIGHT[1]"; // output to be switched ON when TRIGGER WAIT is disabled

      #ifdef NEWCAP_V30
        camera[i].textwidth =        400;
      #endif

      #ifdef NEWCAP_V40
        camera[i].textnum    =         5;
      #endif

      #ifdef TEST_BOSEN
        camera[i].textnum    =         5;
      #endif

      #ifdef USE_ACA640_TIP
        if ( i==0 )  // change DELAY1 and DELAY2 for DOUBLE_CAP_TRIGGER
        {
          ADS_write_value("TRIGGER_DOUBLE_CAP.DELAY1",  7, CTYPE_DINT ); // a 6 sembra stabile, sotto no metto 7
          ADS_write_value("TRIGGER_DOUBLE_CAP.DELAY2", 90, CTYPE_DINT );
        }
        camera[i].width      =     648; // 650; make it multiple of 4
        camera[i].height     =     490; // 
        camera[i].scale      =     0.6;
      #endif

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = L"Side cap";

      #ifdef NEWCAP_DOUBLE
        #ifdef    NEWCAP_ORALCAP
          tip_insp[i] = new CTip_inspection( i, &file_manager, ORALCAP_INSPECTION );
        #else  // NEWCAP_ORALCAP
          tip_insp[i] = new CTip_inspection( i, &file_manager, TOPLIGHT_INSPECTION );
        #endif // NEWCAP_ORALCAP
      #else
        tip_insp[i] = new CTip_inspection( i, &file_manager, CAP_INSPECTION );
      #endif
    }


    // INITIALIZE BOTTOM + FO COLOR CAMERAS
    indsta = tlcgroupPC1[1][0]; // 3 first camera HIGH angle light - second camera LOW angle light
    indend = tlcgroupPC1[1][1]; // 5 FO color camera
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( bottom_serials && bottom_serials[i-indsta] && AfxIsValidString(bottom_serials[i-indsta],8) );
      sprintf( camera[i].sn, bottom_serials[i-indsta] );
     
      ASSERT( bottom_names && bottom_names[i-indsta] && AfxIsValidString(bottom_names[i-indsta],4) );
      swprintf( camera[i].name, 5, bottom_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].width      =         560;
      camera[i].height     =         560;
      camera[i].offsetx    = (780-560)/2;
      camera[i].offsety    = (580-560)/2;
      camera[i].shutter    =         800;
      camera[i].triglab    =           i; // 3-4-5
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =         0.7;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =        TRUE; // trigger here
      camera[i].strobe     =       FALSE;
      camera[i].sequence   =       FALSE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_000; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         390; // can be used to force width to some specified amount
     
      #ifndef NEWCAP_ORALCAP
        if ( i==5 ) camera[i].modedsp  =   DISPLAY_COL; // FO color camera needs color 24bits display - no rotation
      #endif

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      if ( i<5 ) // 3=B_A 4=B_B 
      {
        parcat_1 = camera[i].name;
        parcat_2 = L"Bottom";
        bottom_insp[i]  = new CBottom_inspection ( i, &file_manager );
      }
      else      // 5=TC_D
      {
        parcat_1 = camera[i].name;
        #ifdef NEWCAP_ORALCAP
          parcat_2 = L"Top-cap";
          oralfo_insp[i] = new COralFO_inspection( i, &file_manager );
        #else
          parcat_2 = L"Flip-Off";
          focolor_insp[i] = new CFOcolor_inspection( i, &file_manager );
        #endif
      }
    }



    // INITIALIZE COSMETIC CAMERAS
    indsta=tlcgroupPC1[2][0]; // 
    indend=tlcgroupPC1[2][1]; // 
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( cosm_serials && cosm_serials[i-indsta] && AfxIsValidString(cosm_serials[i-indsta],8) );
      sprintf( camera[i].sn, cosm_serials[i-indsta] );
     
      ASSERT( cosm_names && cosm_names[i-indsta] && AfxIsValidString(cosm_names[i-indsta],4) );
      swprintf( camera[i].name, 5, cosm_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =        2048; // sensor resolution or less
      camera[i].height     =        1000; // n. of lines
      camera[i].shutter    =         280;
      camera[i].triglab    =           i; // 6-7-8-9
      camera[i].dsporg.x   =  30 + 100*i; 
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =         0.2;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =      3200.0; // line rate to achieve 1000 lines in 320ms 
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = L"Cosmetic";

	  //Pour changed to new combo cosmetic inspection on 20200417
      //cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDEWALL|CSMTYPE_CAKEVOLUME ); // Sidewall F40
	  //Pour changed to new combo cosmetic insepction on 20200417
	  //cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_COMBO ); // Sidewall F40

	  #ifdef NEWCOSMETIC_COMBO   // New cosmetic for combo machines 
        cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_COMBO ); // Cosmetic combo
      #else
        cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDEWALL|CSMTYPE_CAKEVOLUME ); // Sidewall F40
      #endif
      
      // changed 20151009 for 2014-00-056 to have new inspection with all parameters 
      //cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE|CSMTYPE_CAKEVOLUME ); // Sidewall F40
      cosmetic_insp[i]->txt_desc = string_838[lng];
    }

//  }


  } // IS_PC1

  //////////////////////////////////////////////////////////////////////////////

  if ( IS_PC2 )
  {

    groupnames[1] = string_550; // Show SIDECAKE  cameras
    groupnames[2] = string_542; // Show PARTICLE1 cameras
    groupnames[3] = string_558; // Show HEEL      cameras
    groupnames[4] = string_544; // Show PARTICLE2 cameras


    // INITIALIZE SIDECAKE CAMERAS (LINE SCAN)
    indsta = tlcgroupPC2[0][0]; // 
    indend = tlcgroupPC2[0][1]; // 
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( sideck_serials && sideck_serials[i-indsta] && AfxIsValidString(sideck_serials[i-indsta],8) );
      sprintf( camera[i].sn, sideck_serials[i-indsta] );
     
      ASSERT( sideck_names && sideck_names[i-indsta] && AfxIsValidString(sideck_names[i-indsta],4) );
      swprintf( camera[i].name, 5, sideck_names[i-indsta] );

      TRACE(L"SIDE-CAKE[%d] <%s>\n", i-indsta, camera[i].name );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =        2048; // sensor resolution or less
      camera[i].height     =        1000; // n. of lines
      camera[i].shutter    =         280;
      camera[i].triglab    =        i+10; // 10-11-12-13
      camera[i].dsporg.x   =  30 + 100*i; 
      camera[i].dsporg.y   =         380;
      camera[i].scale      =         0.2;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =      3200.0; // line rate to achieve 1000 lines in 320ms 
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = L"Side-cake";
      cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE ); // Sidecake F40
      cosmetic_insp[i]->txt_desc = string_2306[lng];
    }



    // INITIALIZE PARTICLE1 CAMERAS
    indsta=tlcgroupPC2[1][0]; 
    indend=tlcgroupPC2[1][1]; 
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( part1_serials && part1_serials[i-indsta] && AfxIsValidString(part1_serials[i-indsta],8) );
      sprintf( camera[i].sn, part1_serials[i-indsta] );
     
      ASSERT( part1_names && part1_names[i-indsta] && AfxIsValidString (part1_names[i-indsta],4) );
      swprintf( camera[i].name, 5, part1_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           6;
      camera[i].offsety    = (580-PARTICDIMY)/2;
      camera[i].width      =  PARTICDIMX;
      camera[i].height     =  PARTICDIMY;
      camera[i].shutter    =         800;
      camera[i].triglab    =        i+10; // 14-15-16-17
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =         0.5;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].sequence   =        TRUE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      #if STN1_OR==HORIZONTAL       // if defined cameras are setup horizonthally
        camera[i].dsporg.y   =         380;
        camera[i].modedsp    = DISPROT_000; // DISPROT_000 DISPROT_090 DISPROT_180
        camera[i].scale      =         0.4;
      #endif

      #ifdef SYNCH_PARTIC    // If enabled synch of cameras A/D B/E C/F enabled in HW
        #if STN1==PARTICLE_BOTTOM
          camera[i].trigger  =        TRUE;
        #endif
      #endif 

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }

      parcat_1 = camera[i].name;
      parcat_2 = L"Particle1";

      #if STN1==PARTICLE_BOTTOM
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+1, &file_manager );
      #endif 
      #if STN1==PARTICLE_BACK
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+1, &file_manager );
      #endif 
      #if STN1==PARTICLE_BOTH
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_BOTH+1, &file_manager );
      #endif 

      #ifdef STN1_FILLING_LEVEL
        parcat_2 = L"Filling level1";
        fillingl_insp[i] = new CFilling_level( i, &file_manager );
        // fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight

        #if STN1==PARTICLE_BOTTOM
          fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight
        #endif
        #if STN1==PARTICLE_BACK
          fillingl_insp[i]->mode = FILLINGL_MODE_ADSORPTION; // backlight
        #endif
        #if STN1==PARTICLE_BOTH
          fillingl_insp[i]->mode = FILLINGL_MODE_SELECTABLE; // selectable bottom/backlight
        #endif
      #endif // STN1_FILLING_LEVEL

      #if STN1_OR==HORIZONTAL  // if defined cameras are setup horizontally
        particle_insp[i]->mode += PARTICLE_HORIZONTAL;
        fillingl_insp[i]->mode += FILLINGL_MODE_HORIZONTAL; 
      #endif

    }

    // INITIALIZE HEEL CAMERAS (LINE SCAN)
    indsta = tlcgroupPC2[2][0];
    indend = tlcgroupPC2[2][1];
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( topck_serials && topck_serials[i-indsta] && AfxIsValidString(topck_serials[i-indsta],8) );
      sprintf( camera[i].sn, topck_serials[i-indsta] );
     
      ASSERT( topck_names && topck_names[i-indsta] && AfxIsValidString(topck_names[i-indsta],4) );
      swprintf( camera[i].name, 5, topck_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =        2048; // sensor resolution or less
      camera[i].height     =        1000; // n. of lines
      camera[i].shutter    =         280;
      camera[i].triglab    =        i+10; // 18-19-20-21
      camera[i].dsporg.x   =  30 + 100*i; 
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =         0.2;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =      3200.0; // line rate to achieve 1000 lines in 320ms 
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = string_2308[lng]; // L"Top-cake";
      cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE ); // Top cake F40
      cosmetic_insp[i]->txt_desc = string_2308[lng];

      #ifdef HEEL_INSPECTION
        parcat_2 = string_2310[lng];
        cosmetic_insp[i]->txt_desc = string_2310[lng];
      #endif

    }



    // INITIALIZE PARTICLE2 CAMERAS
    indsta=tlcgroupPC2[3][0]; 
    indend=tlcgroupPC2[3][1]; 
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( part2_serials && part2_serials[i-indsta] && AfxIsValidString(part2_serials[i-indsta],8) );
      sprintf( camera[i].sn, part2_serials[i-indsta] );
     
      ASSERT( part2_names && part2_names[i-indsta] && AfxIsValidString (part2_names[i-indsta],4) );
      swprintf( camera[i].name, 5, part2_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           6;
      camera[i].offsety    = (580-PARTICDIMY)/2;
      camera[i].width      =  PARTICDIMX;
      camera[i].height     =  PARTICDIMY;
      camera[i].shutter    =         800;
      camera[i].triglab    =        i+10; // 22-23-24-25
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =         0.5;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].sequence   =        TRUE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      #if STN1_OR==HORIZONTAL       // if defined cameras are setup horizonthally
        camera[i].dsporg.y   =         380;
        camera[i].modedsp    = DISPROT_000; // DISPROT_000 DISPROT_090 DISPROT_180
        camera[i].scale      =         0.4;
      #endif

      #ifdef SYNCH_PARTIC    // If enabled synch of cameras A/D B/E C/F enabled in HW
        #if STN1==PARTICLE_BOTTOM
          camera[i].trigger  =        TRUE;
        #endif
      #endif 

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }

      parcat_1 = camera[i].name;
      parcat_2 = L"Particle2";

      #if STN1==PARTICLE_BOTTOM
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+1, &file_manager );
      #endif 
      #if STN1==PARTICLE_BACK
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+1, &file_manager );
      #endif 
      #if STN1==PARTICLE_BOTH
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_BOTH+1, &file_manager );
      #endif 

      #ifdef STN2_FILLING_LEVEL
        parcat_2 = L"Filling level2";
        fillingl_insp[i] = new CFilling_level( i, &file_manager );
        // fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight

        #if STN2==PARTICLE_BOTTOM
          fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight
        #endif
        #if STN2==PARTICLE_BACK
          fillingl_insp[i]->mode = FILLINGL_MODE_ADSORPTION; // backlight
        #endif
        #if STN2==PARTICLE_BOTH
          fillingl_insp[i]->mode = FILLINGL_MODE_SELECTABLE; // selectable bottom/backlight
        #endif
      #endif // STN2_FILLING_LEVEL

      #if STN2_OR==HORIZONTAL  // if defined cameras are setup horizontally
        particle_insp[i]->mode += PARTICLE_HORIZONTAL;
        fillingl_insp[i]->mode += FILLINGL_MODE_HORIZONTAL; 
      #endif

    }



  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////
  
  // Parametro di lettura/visualizzazione
  #ifdef BECKHOFF

  RECT area_txt;

  CRect area_client;
  GetClientRect( &area_client );


//  area_txt.left   =            2*OFFS_COORDY + 2;
//  area_txt.right  = APP_RESX - 2*OFFS_COORDY - 8;
	area_txt.left   =                       OFFS_COORDY;
  area_txt.right  = area_client.Width() - OFFS_COORDY;

  #define HDRIGA 34 // vertical height of text lines
  #define HSRIGA  4 // vertical space between different lines

//  area_txt.top    = area_txt.bottom + 10;
  area_txt.top    = area_client.bottom - 3*HDRIGA - 3*HSRIGA;
	area_txt.bottom = area_txt.top + HDRIGA;

  //machine_txt     = new CText_box( area_txt, this, SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
//  machine_txt     = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
  machine_txt     = new CText_box( 25, L"Arial", area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	machine_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_CONTAIN;
	//machine_txt->SetText( "Machine/program status" );
	if ( machine_txt ) machine_txt->SetText( string_008[lng] );

	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

//  alarm_txt       = new CText_box( area_txt, this, SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
  alarm_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	alarm_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	if ( alarm_txt ) alarm_txt->SetText( L"-" );

  
  // GESTIONE WARNING
	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

//  warning_txt       = new CText_box( area_txt, this, SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
  warning_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	warning_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	//warning_txt->SetText( "-" );
	if ( warning_txt ) warning_txt->SetText( L"-" );

  #undef HRIGA2

  #endif // BECKHOFF

  Invalidate( TRUE );
}
	

#endif // TIVS_C60



#ifdef TIVS_F40

void CChildView::Create_display_TIVS_F40(void) //Create_display_TIVS40_FD(void)
{

  UINT i;
  CString msg;
  
  Basler_initialize();
  ZeroMemory( camera, NUM_TLC*sizeof(Camera_struct) );

  if ( IS_PC1 )
  {
    groupnames[1] = string_541; // CAP Cameras
    groupnames[2] = string_552; // Bottom + Flip Off Cameras
    groupnames[3] = string_549; // Sidewall Cameras

    // INITIALIZE CAP CAMERAS
    UINT indsta = tlcgroupPC1[0][0]; // 
    UINT indend = tlcgroupPC1[0][1]; //
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( seal_serials && seal_serials[i] && AfxIsValidString(seal_serials[i],8) );
      sprintf( camera[i].sn, seal_serials[i] );

      ASSERT( seal_names && seal_names[i] && AfxIsValidString(seal_names[i],4) );
      swprintf( camera[i].name, 5, seal_names[i] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =         780;
      camera[i].height     =         580;
      camera[i].shutter    =         800;
      camera[i].shutter2   =        1200;
      camera[i].triglab    =           i; // 0-1-2
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   =         380;
      camera[i].scale      =         0.5;
      camera[i].acq_mode   = AcquisitionMode_Continuous;  // camera[i].acq_mode   = TriggerMode_On;
      camera[i].trigger    =        TRUE;
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         360;   // can be used to force width to some specified amount
      camera[i].light_out  = ".O_LIGHT[1]"; // output to be switched ON when TRIGGER WAIT is disabled

      #ifdef NEWCAP_V30
        camera[i].textwidth =        400;
      #endif

      #ifdef TEST_BOSEN
        camera[i].textnum    =         5;
      #endif

		#ifdef TEST_QILU
        camera[i].textnum    =         5;
      #endif


      #ifdef USE_ACA640_TIP
        if ( i==0 )  // change DELAY1 and DELAY2 for DOUBLE_CAP_TRIGGER
        {
          ADS_write_value("TRIGGER_DOUBLE_CAP.DELAY1",  7, CTYPE_DINT ); // a 6 sembra stabile, sotto no metto 7
          ADS_write_value("TRIGGER_DOUBLE_CAP.DELAY2", 90, CTYPE_DINT );
        }
        camera[i].width      =     648; // 650; make it multiple of 4
        camera[i].height     =     490; // 
        camera[i].scale      =     0.6;
      #endif

      if ( Basler_initialize( i ) )
      {
//        msg.Format( string_520[lng], AtoW(camera[i].sn), msg_err );
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = L"Side cap";

      #ifdef NEWCAP_DOUBLE

        #ifdef    NEWCAP_ORALCAP
          tip_insp[i] = new CTip_inspection( i, &file_manager, ORALCAP_INSPECTION );
        #else  // NEWCAP_ORALCAP
          tip_insp[i] = new CTip_inspection( i, &file_manager, TOPLIGHT_INSPECTION );
        #endif // NEWCAP_ORALCAP
      
        // tip_insp[i] = new CTip_inspection( i, &file_manager, TOPLIGHT_INSPECTION );

      #else
        tip_insp[i] = new CTip_inspection( i, &file_manager, CAP_INSPECTION );
      #endif
    }


    // INITIALIZE BOTTOM + FO COLOR CAMERAS
    indsta = tlcgroupPC1[1][0]; // first camera HIGH angle light - second camera LOW angle light
    indend = tlcgroupPC1[1][1]; // FO color camera
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( bottom_serials && bottom_serials[i-indsta] && AfxIsValidString(bottom_serials[i-indsta],8) );
      sprintf( camera[i].sn, bottom_serials[i-indsta] );
     
      ASSERT( bottom_names && bottom_names[i-indsta] && AfxIsValidString(bottom_names[i-indsta],4) );
      swprintf( camera[i].name, 5, bottom_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].width      =         560;
      camera[i].height     =         560;
      camera[i].offsetx    = (780-560)/2;
      camera[i].offsety    = (580-560)/2;
      camera[i].shutter    =         800;
      camera[i].triglab    =           i; // 3-4-5
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =         0.7;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =        TRUE; // trigger here
      camera[i].strobe     =       FALSE;
      camera[i].sequence   =       FALSE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_000; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         390; // can be used to force width to some specified amount

      if ( i==3 ) camera[i].light_out  = ".O_LIGHT[6]"; // output to be switched ON when TRIGGER WAIT is disabled
      if ( i==4 ) camera[i].light_out  = ".O_LIGHT[7]"; // output to be switched ON when TRIGGER WAIT is disabled
      if ( i==5 ) camera[i].light_out  = ".O_LIGHT[5]"; // output to be switched ON when TRIGGER WAIT is disabled
      
      #ifndef NEWCAP_ORALCAP
        if ( i==5 ) camera[i].modedsp  =   DISPLAY_COL; // FO color camera needs color 24bits display - no rotation
      #endif

      if ( Basler_initialize( i ) )
      {
        //msg.Format( string_520[lng], AtoW(camera[i].sn), msg_err );
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
        //return;
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      if ( i<5 ) // 3=B_A 4=B_B 
      {
        parcat_1 = camera[i].name;
        parcat_2 = L"Bottom";
        bottom_insp[i]  = new CBottom_inspection ( i, &file_manager );
      }
      else      // 5=TC_D
      {
        parcat_1 = camera[i].name;
        #ifdef NEWCAP_ORALCAP
          parcat_2 = L"Top-cap";
          oralfo_insp[i] = new COralFO_inspection( i, &file_manager );
//          bottom_insp[i] = new CBottom_inspection ( i, &file_manager );
//          tip_insp[i] = new CTip_inspection( i, &file_manager, ORALCAP_INSPECTION );
        #else
          parcat_2 = L"Flip-Off";
          focolor_insp[i] = new CFOcolor_inspection( i, &file_manager );
        #endif
      }
    }




    // INITIALIZE COSMETIC CAMERAS (LINE SCAN) - SIDEWALL
    indsta = tlcgroupPC1[2][0];
    indend = tlcgroupPC1[2][1];
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( cosm_serials && cosm_serials[i-indsta] && AfxIsValidString(cosm_serials[i-indsta],8) );
      sprintf( camera[i].sn, cosm_serials[i-indsta] );
     
      ASSERT( cosm_names && cosm_names[i-indsta] && AfxIsValidString(cosm_names[i-indsta],4) );
      swprintf( camera[i].name, 5, cosm_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =        2048; // sensor resolution or less
      camera[i].height     =        1000; // n. of lines
      camera[i].shutter    =         280;
      camera[i].triglab    =           i; // 6-7-8-9
      camera[i].dsporg.x   =  30 + 100*i; 
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =         0.2;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =      3200.0; // line rate to achieve 1000 lines in 320ms 
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      if ( Basler_initialize( i ) )
      {
        //msg.Format( string_520[lng], AtoW(camera[i].sn), msg_err );
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
        //return;
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = L"Sidewall";
      cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDEWALL|CSMTYPE_CAKEVOLUME ); // Sidewall F40
      
      // changed 20151009 for 2014-00-056 to have new inspection with all parameters 
      //cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE|CSMTYPE_CAKEVOLUME ); // Sidewall F40
      cosmetic_insp[i]->txt_desc = string_838[lng];

    }
  }

  //////////////////////////////////////////////////////////////////////////////

  if ( IS_PC2 )
  {
    groupnames[1] = string_550; // SHow SIDE-CAKE cameras


    #ifdef HEEL_INSPECTION     // If defined HEEL texts are used in place of TOP-CAKE inspection
      groupnames[2] = string_558; // Show HEEL cameras
    #else
      groupnames[2] = string_548; // Show TOP_CAKE  cameras
    #endif

    // INITIALIZE SIDE CAKE CAMERAS
    UINT indsta = tlcgroupPC2[0][0]; // 0 F40
    UINT indend = tlcgroupPC2[0][1]; // 3 F40
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( sideck_serials && sideck_serials[i-indsta] && AfxIsValidString(sideck_serials[i-indsta],8) );
      sprintf( camera[i].sn, sideck_serials[i-indsta] );
     
      ASSERT( sideck_names && sideck_names[i-indsta] && AfxIsValidString(sideck_names[i-indsta],4) );
      swprintf( camera[i].name, 5, sideck_names[i-indsta] );

      TRACE(L"SIDE-CAKE[%d] <%s>\n", i-indsta, camera[i].name );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =        2048; // sensor resolution or less
      camera[i].height     =        1000; // n. of lines
      camera[i].shutter    =         280;
      camera[i].triglab    =        10+i; // 10-11-12-13
      camera[i].dsporg.x   =  30 + 100*i; 
      camera[i].dsporg.y   =         380;
      camera[i].scale      =         0.2;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =      3200.0; // line rate to achieve 1000 lines in 320ms 
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = L"Side-cake";
      cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE ); // Sidecake F40
      cosmetic_insp[i]->txt_desc = string_2306[lng];
//      cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDEWALL|CSMTYPE_CAKEVOLUME );
    }


    #if STN1==CAKESIDE_ARBACK // Test AUSIA, add 4 area scan cameras side by side with existing line scan cam for sidewall

    groupnames[1] = string_550; // SHow SIDE-CAKE cameras
    groupnames[2] = string_553; // WAIST cake Cameras
    groupnames[3] = string_548; // TOP cake Cameras

    indsta = tlcgroupPC2[1][0];  // 4
    indend = tlcgroupPC2[1][1];  // 7
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( cakesd_serials && cakesd_serials[i-indsta] && AfxIsValidString(cakesd_serials[i-indsta],8) );
      sprintf( camera[i].sn, cakesd_serials[i-indsta] );

      ASSERT( cakesd_names && cakesd_names[i-indsta] && AfxIsValidString(cakesd_names[i-indsta],4) );
      swprintf( camera[i].name, 5, cakesd_names[i-indsta] );

      TRACE(L"WAIST-CAKE AREA[%d] <%s>\n", i-indsta, camera[i].name );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }


      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =         780;
      camera[i].height     =         580;
      camera[i].shutter    =         800;
      camera[i].shutter2   =        1200;
      camera[i].triglab    =        i+14; // 18-19-20-21
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   =         380;
      camera[i].scale      =         0.5;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].sequence   =        TRUE;
      camera[i].frame_rate =        10.0; 
      camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = L"Side cap";

      waistlayer_insp[i] = new CWaist_layer( i, &file_manager );

 /*     #ifdef NEWCAP_DOUBLE

        #ifdef    NEWCAP_ORALCAP
          tip_insp[i] = new CTip_inspection( i, &file_manager, ORALCAP_INSPECTION );
        #else  // NEWCAP_ORALCAP
          tip_insp[i] = new CTip_inspection( i, &file_manager, TOPLIGHT_INSPECTION );
        #endif // NEWCAP_ORALCAP
      
        // tip_insp[i] = new CTip_inspection( i, &file_manager, TOPLIGHT_INSPECTION );

      #else
        tip_insp[i] = new CTip_inspection( i, &file_manager, CAP_INSPECTION );
      #endif  */
    }

    #endif // STN1==CAKESIDE_ARBACK



    #if STN3==CAKETOP_ARDIRECT // Test AUSIA, add 4 area scan cameras for top cake new inspection

  /*  groupnames[1] = string_541; // CAP Cameras
    groupnames[2] = string_552; // Bottom + Flip Off Cameras
    groupnames[3] = string_549; // Sidewall Cameras */

    // INITIALIZE CAP CAMERAS
    indsta =  8; //tlcgroupPC2[1][0];  
    indend = 11; //tlcgroupPC2[1][1]; 
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( topck_serials && topck_serials[i-indsta] && AfxIsValidString(topck_serials[i-indsta],8) );
      sprintf( camera[i].sn, topck_serials[i-indsta] );

      ASSERT( topck_names && topck_names[i-indsta] && AfxIsValidString(topck_names[i-indsta],4) );
      swprintf( camera[i].name, 5, topck_names[i-indsta] );

      TRACE(L"CAKE-TOP AREA [%d] <%s>\n", i-indsta, camera[i].name );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =         780;
      camera[i].height     =         580;
      camera[i].shutter    =         800;
      camera[i].shutter2   =        1200;
      camera[i].triglab    =         i+6; // 14-15-16-17    // old 10-11-12-13 SAME AS LINE SCAN!!
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   =         380;
      camera[i].scale      =         0.5;
      camera[i].acq_mode   = AcquisitionMode_Continuous;  // camera[i].acq_mode   = TriggerMode_On;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].sequence   =        TRUE;
      camera[i].frame_rate =        10.0; 
      camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = L"Side cap";

      skinning_insp[i] = new CSkinning( i, &file_manager );

    }

    #endif // STN1==CAKESIDE_ARBACK







    #ifndef NOTHIRDSTN_FDPC2 // ONLY on YAOPHARMA no TOPCAKE on PC2
    // INITIALIZE TOP CAKE CAMERAS (LINE SCAN)
    indsta = tlcgroupPC2[1][0]; // 4 F40
    indend = tlcgroupPC2[1][1]; // 7 F40
    for ( i=indsta ; i<=indend ; i++ )
    {
      /* if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_512[lng], i+1 );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      } */

      ASSERT( topck_serials && topck_serials[i-indsta] && AfxIsValidString(topck_serials[i-indsta],8) );
      sprintf( camera[i].sn, topck_serials[i-indsta] );
     
      ASSERT( topck_names && topck_names[i-indsta] && AfxIsValidString(topck_names[i-indsta],4) );
      swprintf( camera[i].name, 5, topck_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =        2048; // sensor resolution or less
      camera[i].height     =        1000; // n. of lines
      camera[i].shutter    =         280;
      camera[i].triglab    =        10+i; // 14-15-16-17
      camera[i].dsporg.x   =  30 + 100*i; 
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =         0.2;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =      3200.0; // line rate to achieve 1000 lines in 320ms 
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      if ( Basler_initialize( i ) )
      {
//        msg.Format( string_520[lng], AtoW(camera[i].sn), msg_err );
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
        //return;
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = string_2308[lng]; // L"Top-cake";
      cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE ); // Top cake F40
      cosmetic_insp[i]->txt_desc = string_2308[lng];
//      cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDEWALL|CSMTYPE_CAKEVOLUME );

      //#if SERIAL_N==201400022 // Yaopharma top-cake changed to HEEL cameras
      #ifdef HEEL_INSPECTION
        parcat_2 = string_2310[lng];
        cosmetic_insp[i]->txt_desc = string_2310[lng];
      #endif

    }
    #endif
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////
  
  // Parametro di lettura/visualizzazione
  #ifdef BECKHOFF

  RECT area_txt;

  CRect area_client;
  GetClientRect( &area_client );


//  area_txt.left   =            2*OFFS_COORDY + 2;
//  area_txt.right  = APP_RESX - 2*OFFS_COORDY - 8;
	area_txt.left   =                       OFFS_COORDY;
  area_txt.right  = area_client.Width() - OFFS_COORDY;

  #define HDRIGA 34 // vertical height of text lines
  #define HSRIGA  4 // vertical space between different lines

//  area_txt.top    = area_txt.bottom + 10;
  area_txt.top    = area_client.bottom - 3*HDRIGA - 3*HSRIGA;
	area_txt.bottom = area_txt.top + HDRIGA;

  //machine_txt     = new CText_box( area_txt, this, SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
//  machine_txt     = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
  machine_txt     = new CText_box( 25, L"Arial", area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	machine_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_CONTAIN;
	//machine_txt->SetText( "Machine/program status" );
	if ( machine_txt ) machine_txt->SetText( string_008[lng] );

	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

//  alarm_txt       = new CText_box( area_txt, this, SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
  alarm_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	alarm_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	if ( alarm_txt ) alarm_txt->SetText( L"-" );

  
  // GESTIONE WARNING
	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

//  warning_txt       = new CText_box( area_txt, this, SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
  warning_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	warning_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	//warning_txt->SetText( "-" );
	if ( warning_txt ) warning_txt->SetText( L"-" );

  #undef HRIGA2

  #endif // BECKHOFF

  Invalidate( TRUE );
}
	



#endif // TIVS_F40


#ifdef TIVS_F20

void CChildView::Create_display_TIVS_F20(void) //Create_display_TIVS20_FD(void)
{

  UINT i;
  CString msg;
  
  Basler_initialize();
  ZeroMemory( camera, NUM_TLC*sizeof(Camera_struct) );

  if ( IS_PC1 )
  {
    groupnames[1] = string_541; // CAP Cameras
    groupnames[2] = string_552; // Bottom + Flip Off Cameras
    groupnames[3] = string_549; // Sidewall Cameras

	groupnames[4] = string_550; // SHow SIDE-CAKE cameras

	#ifdef HEEL_INSPECTION     // If defined HEEL texts are used in place of TOP-CAKE inspection
      groupnames[5] = string_558; // Show HEEL cameras
    #else
      groupnames[5] = string_548; // Show TOP_CAKE  cameras
    #endif


    // INITIALIZE CAP CAMERAS
    UINT indsta = tlcgroupPC1[0][0]; // 
    UINT indend = tlcgroupPC1[0][1]; //
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( seal_serials && seal_serials[i] && AfxIsValidString(seal_serials[i],8) );
      sprintf( camera[i].sn, seal_serials[i] );

      ASSERT( seal_names && seal_names[i] && AfxIsValidString(seal_names[i],4) );
      swprintf( camera[i].name, 5, seal_names[i] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =         780;
      camera[i].height     =         580;
      camera[i].shutter    =         800;
      camera[i].shutter2   =        1200;
      camera[i].triglab    =           i; // 0-1-2
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   =         380;
      camera[i].scale      =         0.5;
      camera[i].acq_mode   = AcquisitionMode_Continuous;  // camera[i].acq_mode   = TriggerMode_On;
      camera[i].trigger    =        TRUE;
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         360;   // can be used to force width to some specified amount
      camera[i].light_out  = ".O_LIGHT[1]"; // output to be switched ON when TRIGGER WAIT is disabled

      #ifdef NEWCAP_V30
        camera[i].textwidth =        400;
      #endif

      #ifdef TEST_BOSEN
        camera[i].textnum    =         5;
      #endif

		#ifdef TEST_QILU
        camera[i].textnum    =         5;
      #endif


      #ifdef USE_ACA640_TIP
        if ( i==0 )  // change DELAY1 and DELAY2 for DOUBLE_CAP_TRIGGER
        {
          ADS_write_value("TRIGGER_DOUBLE_CAP.DELAY1",  7, CTYPE_DINT ); // a 6 sembra stabile, sotto no metto 7
          ADS_write_value("TRIGGER_DOUBLE_CAP.DELAY2", 90, CTYPE_DINT );
        }
        camera[i].width      =     648; // 650; make it multiple of 4
        camera[i].height     =     490; // 
        camera[i].scale      =     0.6;
      #endif

      if ( Basler_initialize( i ) )
      {
//        msg.Format( string_520[lng], AtoW(camera[i].sn), msg_err );
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = L"Side cap";

      #ifdef NEWCAP_DOUBLE

        #ifdef    NEWCAP_ORALCAP
          tip_insp[i] = new CTip_inspection( i, &file_manager, ORALCAP_INSPECTION );
        #else  // NEWCAP_ORALCAP
          tip_insp[i] = new CTip_inspection( i, &file_manager, TOPLIGHT_INSPECTION );
        #endif // NEWCAP_ORALCAP
      
        // tip_insp[i] = new CTip_inspection( i, &file_manager, TOPLIGHT_INSPECTION );

      #else
        tip_insp[i] = new CTip_inspection( i, &file_manager, CAP_INSPECTION );
      #endif
    }


    // INITIALIZE BOTTOM + FO COLOR CAMERAS
    indsta = tlcgroupPC1[1][0]; // first camera HIGH angle light - second camera LOW angle light
    indend = tlcgroupPC1[1][1]; // FO color camera
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( bottom_serials && bottom_serials[i-indsta] && AfxIsValidString(bottom_serials[i-indsta],8) );
      sprintf( camera[i].sn, bottom_serials[i-indsta] );
     
      ASSERT( bottom_names && bottom_names[i-indsta] && AfxIsValidString(bottom_names[i-indsta],4) );
      swprintf( camera[i].name, 5, bottom_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].width      =         560;
      camera[i].height     =         560;
      camera[i].offsetx    = (780-560)/2;
      camera[i].offsety    = (580-560)/2;
      camera[i].shutter    =         800;
      camera[i].triglab    =           i; // 3-4-5
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =         0.7;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =        TRUE; // trigger here
      camera[i].strobe     =       FALSE;
      camera[i].sequence   =       FALSE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_000; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         390; // can be used to force width to some specified amount

      if ( i==3 ) camera[i].light_out  = ".O_LIGHT[6]"; // output to be switched ON when TRIGGER WAIT is disabled
      if ( i==4 ) camera[i].light_out  = ".O_LIGHT[7]"; // output to be switched ON when TRIGGER WAIT is disabled
      if ( i==5 ) camera[i].light_out  = ".O_LIGHT[5]"; // output to be switched ON when TRIGGER WAIT is disabled
      
      #ifndef NEWCAP_ORALCAP
        if ( i==5 ) camera[i].modedsp  =   DISPLAY_COL; // FO color camera needs color 24bits display - no rotation
      #endif

      if ( Basler_initialize( i ) )
      {
        //msg.Format( string_520[lng], AtoW(camera[i].sn), msg_err );
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
        //return;
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      if ( i<5 ) // 3=B_A 4=B_B 
      {
        parcat_1 = camera[i].name;
        parcat_2 = L"Bottom";
        bottom_insp[i]  = new CBottom_inspection ( i, &file_manager );
      }
      else      // 5=TC_D
      {
        parcat_1 = camera[i].name;
        #ifdef NEWCAP_ORALCAP
          parcat_2 = L"Top-cap";
          oralfo_insp[i] = new COralFO_inspection( i, &file_manager );
//          bottom_insp[i] = new CBottom_inspection ( i, &file_manager );
//          tip_insp[i] = new CTip_inspection( i, &file_manager, ORALCAP_INSPECTION );
        #else
          parcat_2 = L"Flip-Off";
          focolor_insp[i] = new CFOcolor_inspection( i, &file_manager );
        #endif
      }
    }




    // INITIALIZE COSMETIC CAMERAS (LINE SCAN) - SIDEWALL
    indsta = tlcgroupPC1[2][0]; //6
    indend = tlcgroupPC1[2][1]; //7
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( cosm_serials && cosm_serials[i-indsta] && AfxIsValidString(cosm_serials[i-indsta],8) );
      sprintf( camera[i].sn, cosm_serials[i-indsta] );
     
      ASSERT( cosm_names && cosm_names[i-indsta] && AfxIsValidString(cosm_names[i-indsta],4) );
      swprintf( camera[i].name, 5, cosm_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =        2048; // sensor resolution or less
      camera[i].height     =        1000; // n. of lines
      camera[i].shutter    =         280;
      camera[i].triglab    =           i; // 6-7
      camera[i].dsporg.x   =  30 + 100*i; 
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =         0.2;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =      3200.0; // line rate to achieve 1000 lines in 320ms 
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      if ( Basler_initialize( i ) )
      {
        //msg.Format( string_520[lng], AtoW(camera[i].sn), msg_err );
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
        //return;
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = L"Sidewall";
      cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDEWALL|CSMTYPE_CAKEVOLUME ); // Sidewall F40
      
      // changed 20151009 for 2014-00-056 to have new inspection with all parameters 
      //cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE|CSMTYPE_CAKEVOLUME ); // Sidewall F40
      cosmetic_insp[i]->txt_desc = string_838[lng];

    }
  }

  //////////////////////////////////////////////////////////////////////////////

    // INITIALIZE SIDE CAKE CAMERAS
    UINT indsta = tlcgroupPC1[3][0]; // 8 F20
    UINT indend = tlcgroupPC1[3][1]; // 9 F20
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( sideck_serials && sideck_serials[i-indsta] && AfxIsValidString(sideck_serials[i-indsta],8) );
      sprintf( camera[i].sn, sideck_serials[i-indsta] );
     
      ASSERT( sideck_names && sideck_names[i-indsta] && AfxIsValidString(sideck_names[i-indsta],4) );
      swprintf( camera[i].name, 5, sideck_names[i-indsta] );

      TRACE(L"SIDE-CAKE[%d] <%s>\n", i-indsta, camera[i].name );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =        2048; // sensor resolution or less
      camera[i].height     =        1000; // n. of lines
      camera[i].shutter    =         280;
      camera[i].triglab    =         2+i; // 8-9 +2  Pour marked on 20200812 skip C and D
      camera[i].dsporg.x   =  30 + 100*i; 
      camera[i].dsporg.y   =         380;
      camera[i].scale      =         0.2;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =      3200.0; // line rate to achieve 1000 lines in 320ms 
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = L"Side-cake";
      cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE ); // Sidecake F40
      cosmetic_insp[i]->txt_desc = string_2306[lng];
//      cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDEWALL|CSMTYPE_CAKEVOLUME );
    }


    // INITIALIZE TOP CAKE CAMERAS (LINE SCAN)
    indsta = tlcgroupPC1[4][0]; // 10 F20
    indend = tlcgroupPC1[4][1]; // 11 F20
    for ( i=indsta ; i<=indend ; i++ )
    {
      /* if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_512[lng], i+1 );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      } */

      ASSERT( topck_serials && topck_serials[i-indsta] && AfxIsValidString(topck_serials[i-indsta],8) );
      sprintf( camera[i].sn, topck_serials[i-indsta] );
     
      ASSERT( topck_names && topck_names[i-indsta] && AfxIsValidString(topck_names[i-indsta],4) );
      swprintf( camera[i].name, 5, topck_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =        2048; // sensor resolution or less
      camera[i].height     =        1000; // n. of lines
      camera[i].shutter    =         280;
      camera[i].triglab    =         4+i; // 10-11+4 SKIP C AND D
      camera[i].dsporg.x   =  30 + 100*i; 
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =         0.2;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =      3200.0; // line rate to achieve 1000 lines in 320ms 
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      if ( Basler_initialize( i ) )
      {
//        msg.Format( string_520[lng], AtoW(camera[i].sn), msg_err );
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
        //return;
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = string_2308[lng]; // L"Top-cake";
      cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE ); // Top cake F40
      cosmetic_insp[i]->txt_desc = string_2308[lng];
//      cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDEWALL|CSMTYPE_CAKEVOLUME );

      //#if SERIAL_N==201400022 // Yaopharma top-cake changed to HEEL cameras
      #ifdef HEEL_INSPECTION
        parcat_2 = string_2310[lng];
        cosmetic_insp[i]->txt_desc = string_2310[lng];
      #endif

    }

  //////////////////////////////////////////////////////////////////////////////////////////////////////
  
  // Parametro di lettura/visualizzazione
  #ifdef BECKHOFF

  RECT area_txt;

  CRect area_client;
  GetClientRect( &area_client );


//  area_txt.left   =            2*OFFS_COORDY + 2;
//  area_txt.right  = APP_RESX - 2*OFFS_COORDY - 8;
	area_txt.left   =                       OFFS_COORDY;
  area_txt.right  = area_client.Width() - OFFS_COORDY;

  #define HDRIGA 34 // vertical height of text lines
  #define HSRIGA  4 // vertical space between different lines

//  area_txt.top    = area_txt.bottom + 10;
  area_txt.top    = area_client.bottom - 3*HDRIGA - 3*HSRIGA;
	area_txt.bottom = area_txt.top + HDRIGA;

  //machine_txt     = new CText_box( area_txt, this, SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
//  machine_txt     = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
  machine_txt     = new CText_box( 25, L"Arial", area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	machine_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_CONTAIN;
	//machine_txt->SetText( "Machine/program status" );
	if ( machine_txt ) machine_txt->SetText( string_008[lng] );

	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

//  alarm_txt       = new CText_box( area_txt, this, SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
  alarm_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	alarm_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	if ( alarm_txt ) alarm_txt->SetText( L"-" );

  
  // GESTIONE WARNING
	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

//  warning_txt       = new CText_box( area_txt, this, SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
  warning_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	warning_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	//warning_txt->SetText( "-" );
	if ( warning_txt ) warning_txt->SetText( L"-" );

  #undef HRIGA2

  #endif // BECKHOFF

  Invalidate( TRUE );
}
	



#endif // TIVS_F20



#ifdef TIVS_C20

void CChildView::Create_display_TIVS_C20(void)
{

  UINT i;
  CString msg;
  
  Basler_initialize();
  ZeroMemory( camera, NUM_TLC*sizeof(Camera_struct) );

  if ( IS_PC1 )
  {
    groupnames[1] = string_541; // CAP Cameras
    groupnames[2] = string_552; // Bottom + Flip Off Cameras
    groupnames[3] = string_549; // Sidewall Cameras //Particle1 for second machine

    // INITIALIZE CAP CAMERAS
    UINT indsta = tlcgroupPC1[0][0]; // 
    UINT indend = tlcgroupPC1[0][1]; //
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( seal_serials && seal_serials[i] && AfxIsValidString(seal_serials[i],8) );
      sprintf( camera[i].sn, seal_serials[i] );

      ASSERT( seal_names && seal_names[i] && AfxIsValidString(seal_names[i],4) );
      swprintf( camera[i].name, 5, seal_names[i] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =         780;
      camera[i].height     =         580;
      camera[i].shutter    =         800;
      camera[i].shutter2   =        1200;
      camera[i].triglab    =           i; // 0-1-2
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   =         380;
      camera[i].scale      =         0.5;
      camera[i].acq_mode   = AcquisitionMode_Continuous;  // camera[i].acq_mode   = TriggerMode_On;
      camera[i].trigger    =        TRUE;
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         360;   // can be used to force width to some specified amount
      camera[i].light_out  = ".O_LIGHT[1]"; // output to be switched ON when TRIGGER WAIT is disabled

	  //Pour added for testing 20190404
	  #ifdef TEST_QILU
      camera[i].textnum    =         5;
      #endif
	  //Pour added for testing 20190404


      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = L"Side cap";

      #ifdef NEWCAP_DOUBLE
        tip_insp[i] = new CTip_inspection( i, &file_manager, TOPLIGHT_INSPECTION );
      #else
        tip_insp[i] = new CTip_inspection( i, &file_manager, CAP_INSPECTION );
      #endif
    }


    // INITIALIZE BOTTOM + FO COLOR CAMERAS
    indsta = tlcgroupPC1[1][0]; // first camera HIGH angle light - second camera LOW angle light
    indend = tlcgroupPC1[1][1]; // FO color camera
    for ( i=indsta ; i<=indend ; i++ )
    {
      ASSERT( bottom_serials && bottom_serials[i-indsta] && AfxIsValidString(bottom_serials[i-indsta],8) );
      sprintf( camera[i].sn, bottom_serials[i-indsta] );
     
      ASSERT( bottom_names && bottom_names[i-indsta] && AfxIsValidString(bottom_names[i-indsta],4) );
      swprintf( camera[i].name, 5, bottom_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].width      =         560;
      camera[i].height     =         560;
      camera[i].offsetx    = (780-560)/2;
      camera[i].offsety    = (580-560)/2;
      camera[i].shutter    =         800;
      camera[i].triglab    =           i; // 3-4-5
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   = camera[0].dsporg.y;
      camera[i].scale      =         0.7;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =        TRUE; // trigger here
      camera[i].strobe     =       FALSE;
      camera[i].sequence   =       FALSE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_000; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         390; // can be used to force width to some specified amount

      //if ( i==3 ) camera[i].light_out  = ".O_LIGHT[6]"; // output to be switched ON when TRIGGER WAIT is disabled
      //if ( i==4 ) camera[i].light_out  = ".O_LIGHT[7]"; // output to be switched ON when TRIGGER WAIT is disabled
      if ( i==5 ) camera[i].light_out  = ".O_LIGHT[5]"; // output to be switched ON when TRIGGER WAIT is disabled
      if ( i==5 ) camera[i].modedsp    =   DISPLAY_COL; // FO color camera needs color 24bits display - no rotation

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      if ( i<5 )
      {
        parcat_1 = camera[i].name;
        parcat_2 = L"Bottom";
        bottom_insp[i]  = new CBottom_inspection ( i, &file_manager );
      }
      else
      {
        parcat_1 = camera[i].name;
        parcat_2 = L"Flip-Off";
        focolor_insp[i] = new CFOcolor_inspection( i, &file_manager );
      }
    }


    // INITIALIZE PARTICLE1 AND COSMETIC CAMERAS (LINE SCAN) - SIDEWALL
    indsta = tlcgroupPC1[2][0]; // 6
    indend = tlcgroupPC1[2][1]; // 7
    for ( i=indsta ; i<=indend ; i++ )
    {

      if ( i<=7 ) // particle
      {
        ASSERT( part1_serials && part1_serials[i-indsta] && AfxIsValidString(part1_serials[i-indsta],8) );
        sprintf( camera[i].sn, part1_serials[i-indsta] );
        ASSERT( part1_names && part1_names[i-indsta] && AfxIsValidString(part1_names[i-indsta],4) );
        swprintf( camera[i].name, 5, part1_names[i-indsta] );

        camera[i].offsetx    =           6;
        camera[i].offsety    = (580-PARTICDIMY)/2;
        camera[i].width      =  PARTICDIMX;
        camera[i].height     =  PARTICDIMY;
        camera[i].shutter    =         800;
        camera[i].triglab    =           i; // 6 - 7
        camera[i].dsporg.x   =  30 + 100*i;
        camera[i].dsporg.y   =         380;
        camera[i].scale      =         0.5;
        camera[i].acq_mode   = AcquisitionMode_Continuous;  
        camera[i].trigger    =       FALSE;
        camera[i].strobe     =       FALSE;//Pour marked 20190328
        camera[i].sequence   =        TRUE;
        camera[i].frame_rate =         0.0; 
        camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
        camera[i].textnum    =           4;
        camera[i].textwidth  =         300; // 300; // can be used to force width to some specified amount
      }

/*      else // cosmetic/sidewall
      {
        ASSERT( cosm_serials && cosm_serials[i-indsta-2] && AfxIsValidString(cosm_serials[i-indsta-2],8) );
        sprintf( camera[i].sn, cosm_serials[i-indsta-2] );
        ASSERT( cosm_names && cosm_names[i-indsta-2] && AfxIsValidString(cosm_names[i-indsta-2],4) );
        swprintf( camera[i].name, 5, cosm_names[i-indsta-2] );

        camera[i].offsetx    =           0;
        camera[i].offsety    =           0;
        camera[i].width      =        2048; // sensor resolution or less
        camera[i].height     =        1000; // n. of lines
        camera[i].shutter    =         280;
        camera[i].triglab    =         i+2; // 6 - 7
        camera[i].dsporg.x   =  30 + 100*i; 
        camera[i].dsporg.y   = camera[0].dsporg.y;
        camera[i].scale      =         0.2;
        camera[i].acq_mode   = AcquisitionMode_Continuous;
        camera[i].trigger    =       FALSE; // no trigger here
        camera[i].strobe     =       FALSE;
        camera[i].frame_rate =      3200.0; // line rate to achieve 1000 lines in 320ms 
        camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
        camera[i].textnum    =           4;
        camera[i].textwidth  =         300; // can be used to force width to some specified amount

      }*/

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }


      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }

      if ( i<=7 ) // particle
      {
        parcat_1 = camera[i].name;
        parcat_2 = L"Particle2";
        #if STN1==PARTICLE_BOTTOM
          particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+1, &file_manager );
        #else 
          particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+1, &file_manager );
        #endif 

        //particle_insp[i]->mode = PARTICLE_MODE_REFLECTION; // bottomlight
        parcat_2 = L"Filling level";
        fillingl_insp[i] = new CFilling_level( i, &file_manager );
        //fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight
		fillingl_insp[i]->mode = FILLINGL_MODE_ADSORPTION; // backlight  //Pour changed on 20191123
      }
      else // cosmetic/sidewall
      {
        //parcat_1 = camera[i].name;
        //parcat_2 = L"Sidewall";
        //cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDEWALL|CSMTYPE_CAKEVOLUME ); // Sidewall F40
      }

    }

  }

  //////////////////////////////////////////////////////////////////////////////

  if ( IS_PC2 )
  {
	  //Previous code, Pour removed 20190318
    //groupnames[1] = string_551; // Side/top cake
    //groupnames[2] = string_544; // Particle2

	  //Pour modified 20190318
	groupnames[1] = string_551a; // Sidewall/sidecake
    groupnames[2] = string_544a; // topcake/Particle2

    // INITIALIZE SIDE CAKE CAMERAS
    UINT indsta = tlcgroupPC2[0][0]; // 0
    UINT indend = tlcgroupPC2[0][1]; // 3 
    for ( i=indsta ; i<=indend ; i++ )
    {

      if ( i<2 ) // first sidecake //SIDEWALL
      {
		  /*
        ASSERT( sideck_serials && sideck_serials[i-indsta] && AfxIsValidString(sideck_serials[i-indsta],8) );
        sprintf( camera[i-indsta].sn, sideck_serials[i-indsta] );
        ASSERT( sideck_names && sideck_names[i-indsta] && AfxIsValidString(sideck_names[i-indsta],4) );
        swprintf( camera[i-indsta].name, 5, sideck_names[i-indsta] );
		*/
		//Pour added for SIDEWALL
		ASSERT( cosm_serials && cosm_serials[i] && AfxIsValidString(cosm_serials[i],8) );
        sprintf( camera[i].sn, cosm_serials[i] );
        ASSERT( cosm_names && cosm_names[i] && AfxIsValidString(cosm_names[i],4) );
        swprintf( camera[i].name, 5, cosm_names[i] );
		//Pour added for SIDEWALL
      }
      else // then topcake  //SIDECAKE
      {
		  /*
        ASSERT( topck_serials && topck_serials[i-indsta-2] && AfxIsValidString(topck_serials[i-indsta-2],8) );
        sprintf( camera[i-indsta].sn, topck_serials[i-indsta-2] );
        ASSERT( topck_names && topck_names[i-indsta-2] && AfxIsValidString(topck_names[i-indsta-2],4) );
        swprintf( camera[i-indsta].name, 5, topck_names[i-indsta-2] );
		*/
		  		  
        ASSERT( sideck_serials && sideck_serials[i-2] && AfxIsValidString(sideck_serials[i-2],8) );
        sprintf( camera[i].sn, sideck_serials[i-2] );
        ASSERT( sideck_names && sideck_names[i-2] && AfxIsValidString(sideck_names[i-2],4) );
        swprintf( camera[i].name, 5, sideck_names[i-2] );
		
      }

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =        2048; // sensor resolution or less
      camera[i].height     =        1000; // n. of lines
      camera[i].shutter    =         280;
      camera[i].triglab    =         8+i; // 8-9 - 10-11  //Pour changed 20190402 6-7 8-9,changed from 8+i to 6+i
      camera[i].dsporg.x   =  30 + 100*i; 
      camera[i].dsporg.y   =         380;
      camera[i].scale      =         0.2;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =      3200.0; // line rate to achieve 1000 lines in 320ms 
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;

      if (i<2) // Sidecake
      {
		  /*
        parcat_2 = L"Side-cake";
        cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE ); // Sidecake F40
        cosmetic_insp[i]->txt_desc = string_2306[lng];
		*/

		#ifdef NEWCOSMETIC_COMBO   // New cosmetic for combo machines 
        cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_COMBO ); // Cosmetic combo
      #else
        cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDEWALL|CSMTYPE_CAKEVOLUME ); // Sidewall F40
      #endif

		  		  
        parcat_2 = L"Side-wall";
        //cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDEWALL ); // Sidecake F40
        cosmetic_insp[i]->txt_desc = string_2306[lng];
		
      }
      else // Top cake
      {
		  /*
        parcat_2 = L"Top-cake";
        cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE ); // Sidecake F40
        cosmetic_insp[i]->txt_desc = string_2308[lng];
		*/
		parcat_2 = L"Side-cake";
        cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE ); // Sidecake F40
        cosmetic_insp[i]->txt_desc = string_2306[lng];
      }

//      cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDEWALL|CSMTYPE_CAKEVOLUME );
    }



 /*   #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM // third station is for particle
      groupnames[2] = string_545;
    #else  // standard cosmetic
      groupnames[2] = string_546;
    #endif*/

    // INITIALIZE PARTICLE2 CAMERAS
    indsta=tlcgroupPC2[1][0]; // 4
    indend=tlcgroupPC2[1][1]; // 7//Pour marked for testing 20190318
    for ( i=indsta ; i<=indend ; i++ )
    {
		//Pour added 20190318
		      if ( i<=5 ) // TOPCAKE
      {
		ASSERT( topck_serials && topck_serials[i-indsta] && AfxIsValidString(topck_serials[i-indsta],8) );
        sprintf( camera[i].sn, topck_serials[i-indsta] );
        ASSERT( topck_names && topck_names[i-indsta] && AfxIsValidString(topck_names[i-indsta],4) );
        swprintf( camera[i].name, 5, topck_names[i-indsta] );
		
        camera[i].offsetx    =           0;
        camera[i].offsety    =           0;
        camera[i].width      =        2048; // sensor resolution or less
        camera[i].height     =        1000; // n. of lines
        camera[i].shutter    =         280;
        camera[i].triglab    =         8+i; // 12 - 13 //Pour changed to 10-11 on 20190402 from 8+i to 6+i
        camera[i].dsporg.x   =  30 + 100*i; 
        camera[i].dsporg.y   = camera[0].dsporg.y;
        camera[i].scale      =         0.2;
        camera[i].acq_mode   = AcquisitionMode_Continuous;
        camera[i].trigger    =       FALSE; // no trigger here
        camera[i].strobe     =       FALSE;
        camera[i].frame_rate =      3200.0; // line rate to achieve 1000 lines in 320ms 
        camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
        camera[i].textnum    =           4;
        camera[i].textwidth  =         300; // can be used to force width to some specified amount
		
      }
      else // PARTICLE2
      {
		ASSERT( part2_serials && part2_serials[i-indsta-2] && AfxIsValidString(part2_serials[i-indsta-2],8) );
        sprintf( camera[i].sn, part2_serials[i-indsta-2] );
        ASSERT( part2_names && part2_names[i-indsta-2] && AfxIsValidString(part2_names[i-indsta-2],4) );
        swprintf( camera[i].name, 5, part2_names[i-indsta-2] );
		
        camera[i].offsetx    =           6;
        camera[i].offsety    = (580-PARTICDIMY)/2;
        camera[i].width      =  PARTICDIMX;
        camera[i].height     =  PARTICDIMY;
        camera[i].shutter    =         800;
        camera[i].triglab    =         8+i; // 14 - 15 
        camera[i].dsporg.x   =  30 + 100*i;
        camera[i].dsporg.y   =         380;
        camera[i].scale      =         0.5;
        camera[i].acq_mode   = AcquisitionMode_Continuous;  
        camera[i].trigger    =       FALSE;
        camera[i].strobe     =        TRUE;
        camera[i].sequence   =        TRUE;
        camera[i].frame_rate =         0.0; 
        camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
        camera[i].textnum    =           4;
        camera[i].textwidth  =         300; // 300; // can be used to force width to some specified amount
		
      }
		//Pour added 20190318
		/*
		//Pour removed 20190318
      ASSERT( part2_serials && part2_serials[i-indsta] && AfxIsValidString(part2_serials[i-indsta],8) );
      sprintf( camera[i].sn, part2_serials[i-indsta] );
     
      ASSERT( part2_names && part2_names[i-indsta] && AfxIsValidString(part2_names[i-indsta],4) );
      swprintf( camera[i].name, 5, part2_names[i-indsta] );
	  //Pour removed 20190318
	  */

			  //Pour added 20190327
		//if ( i==3 ) camera[i].light_out  = ".O_LIGHT[6]"; // output to be switched ON when TRIGGER WAIT is disabled
		//if ( i==4 ) camera[i].light_out  = ".O_LIGHT[7]"; // output to be switched ON when TRIGGER WAIT is disabled
			  //Pour added 20190327


      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

	  /*
      camera[i].offsetx    =           6;
      camera[i].offsety    = (580-PARTICDIMY)/2;
      camera[i].width      =  PARTICDIMX;
      camera[i].height     =  PARTICDIMY;
      camera[i].shutter    =         800;
      camera[i].triglab    =         8+i; // 10-11
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   =         380;
      camera[i].scale      =         0.5;
      camera[i].acq_mode   = AcquisitionMode_Continuous;  
      camera[i].trigger    =       FALSE;
      camera[i].strobe     =        TRUE;
      camera[i].sequence   =        TRUE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount
	  */
      if ( Basler_initialize( i ) )
      {
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }

	//Pour added 20190319
	if ( i<=5 ) // Cosmetic
      {
        parcat_1 = camera[i].name;
        parcat_2 = L"Topcake";
        cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_TOPCAKE ); // Sidewall F40
      }
      else // Particle2
      {
		parcat_1 = camera[i].name;
        parcat_2 = L"Particle2";
        #if STN2==PARTICLE_BOTTOM
          particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+1, &file_manager );
        #else 
          particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+1, &file_manager );
        #endif 

      }

	//Pour added 20190319

    }


  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////
  
  // Parametro di lettura/visualizzazione
  #ifdef BECKHOFF

  RECT area_txt;

  CRect area_client;
  GetClientRect( &area_client );

	area_txt.left   =                       OFFS_COORDY;
  area_txt.right  = area_client.Width() - OFFS_COORDY;

  #define HDRIGA 34 // vertical height of text lines
  #define HSRIGA  4 // vertical space between different lines

  area_txt.top    = area_client.bottom - 3*HDRIGA - 3*HSRIGA;
	area_txt.bottom = area_txt.top + HDRIGA;

  machine_txt     = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	machine_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_CONTAIN;
	if ( machine_txt ) machine_txt->SetText( string_008[lng] );

	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

  alarm_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	alarm_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	if ( alarm_txt ) alarm_txt->SetText( L"-" );

  
  // GESTIONE WARNING
	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

  warning_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	warning_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	//warning_txt->SetText( "-" );

  #undef HRIGA2

  #endif // BECKHOFF

  Invalidate( TRUE );
}
	



#endif // TIVS_C20

//Pour added for new machine model TIVS-A20 20180523

#ifdef TIVS_A20

void CChildView::Create_display_TIVS_A20(void)
{

  UINT i;
  CString msg;
  
  Basler_initialize();
  ZeroMemory( camera, NUM_TLC*sizeof(Camera_struct) );

  groupnames[1] = string_540;
  groupnames[2] = string_539;

  // INITIALIZE TIP/SEAL CAMERAS
  UINT indsta=tlcgroupPC1[0][0];
  UINT indend=tlcgroupPC1[0][1];
  for ( i=indsta ; i<=indend ; i++ )
  {
    ASSERT( tip_serials && tip_serials[i-indsta] && AfxIsValidString(tip_serials[i-indsta],8) );
    sprintf( camera[i].sn, tip_serials[i-indsta] );

    ASSERT( tip_names && tip_names[i-indsta] && AfxIsValidString(tip_names[i-indsta],4) );
    swprintf( camera[i].name, 5, tip_names[i-indsta] );

    if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
    {
      msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
      info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
    }

    camera[i].offsetx    =           0;
    camera[i].offsety    =           0;
    camera[i].width      =         780;
    camera[i].height     =         580;
    camera[i].shutter    =         800;
    camera[i].triglab    =           i; // 0-1-2
    camera[i].dsporg.x   =  30 + 100*i;
    camera[i].dsporg.y   =         380;
    camera[i].scale      =         0.5;
    camera[i].acq_mode   = AcquisitionMode_Continuous;  // camera[i].acq_mode   = TriggerMode_On;
    camera[i].trigger    =        TRUE;
    camera[i].strobe     =       FALSE;
    camera[i].frame_rate =         0.0; 
    camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
    camera[i].textnum    =           4;
    camera[i].textwidth  =         360; // can be used to force width to some specified amount
      //camera[i].light_out  = ".O_LIGHT[1]"; // output to be switched ON when TRIGGER WAIT is disabled

    #ifdef NEW_TRIPLE_TIP
      camera[i].strobe     =      TRUE;
    #endif

    #ifdef NEWCAP_V30
      camera[i].textwidth =        400;
    #endif

    //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
    #ifdef FO_COLOR
      camera[i].light_out  = ".O_LIGHT[1]"; // output to be switched ON when TRIGGER WAIT is disabled
    #endif

    if ( Basler_initialize( i ) )
    {
      msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
      if ( !debug ) Message_box( msg, MBOX_ERROR );
    }
    else
    {
      if ( Basler_parameters( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
    }
  }

  Prepare_dsporgx( indsta,indend );

  for ( i=indsta ; i<=indend ; i++ )
  {
    if ( Basler_display( i ) )
    {
      Message_box( msg_err, MBOX_ERROR );
      return;
    }
      //#if SERIAL_N==201300502 // HENG RUI - CAP/sealing inspection plus FO color!
    #ifdef FO_COLOR
      parcat_1 = camera[i].name;

      #ifdef COMBINED_TIPCAP
        parcat_2 = L"Tip/Cap";
        tip_insp[i] = new CTip_inspection( i, &file_manager, TIPCAP_INSPECTION );

      #else  // COMBINED_TIPCAP
        parcat_2 = L"Cap";

        #ifdef NEWCAP_DOUBLE

          #ifdef    NEWCAP_ORALCAP
            tip_insp[i] = new CTip_inspection( i, &file_manager, ORALCAP_INSPECTION );
          #else  // NEWCAP_ORALCAP
            tip_insp[i] = new CTip_inspection( i, &file_manager, TOPLIGHT_INSPECTION );
          #endif // NEWCAP_ORALCAP

        #else // NEWCAP_DOUBLE
          tip_insp[i] = new CTip_inspection( i, &file_manager, CAP_INSPECTION );
        #endif // NEWCAP_DOUBLE

      #endif // COMBINED_TIPCAP

    #else // FO_COLOR
      parcat_1 = camera[i].name;
      parcat_2 = L"Tip";
      tip_insp[i] = new CTip_inspection( i, &file_manager ); 
    #endif // FO_COLOR
  }


  // INITIALIZE PARTICLE1/2/3 CAMERAS
  indsta=tlcgroupPC1[1][0];
  indend=tlcgroupPC1[3][1];
  for ( i=indsta ; i<=indend ; i++ )
  {

    if ( i>=tlcgroupPC1[1][0] && i<=tlcgroupPC1[1][1] ) // part1
    {
      ASSERT( part1_serials && part1_serials[i-tlcgroupPC1[1][0]] && AfxIsValidString(part1_serials[i-tlcgroupPC1[1][0]],8) );
      sprintf( camera[i].sn, part1_serials[i-tlcgroupPC1[1][0]] );
     
      ASSERT( part1_names && part1_names[i-tlcgroupPC1[1][0]] && AfxIsValidString(part1_names[i-tlcgroupPC1[1][0]],4) );
      swprintf( camera[i].name, 5, part1_names[i-tlcgroupPC1[1][0]] );

      camera[i].trigger  =  FALSE;

    }

    if ( i>=tlcgroupPC1[2][0] && i<=tlcgroupPC1[2][1] ) // part2
    {
      ASSERT( part2_serials && part2_serials[i-tlcgroupPC1[2][0]] && AfxIsValidString(part2_serials[i-tlcgroupPC1[2][0]],8) );
      sprintf( camera[i].sn, part2_serials[i-tlcgroupPC1[2][0]] );
     
      ASSERT( part2_names && part2_names[i-tlcgroupPC1[2][0]] && AfxIsValidString(part2_names[i-tlcgroupPC1[2][0]],4) );
      swprintf( camera[i].name, 5, part2_names[i-tlcgroupPC1[2][0]] );

      camera[i].trigger  =  TRUE;
    }
	/*
    if ( i>=tlcgroupPC1[3][0] && i<=tlcgroupPC1[3][1] ) // part3
    {
      ASSERT( part3_serials && part3_serials[i-tlcgroupPC1[3][0]] && AfxIsValidString(part3_serials[i-tlcgroupPC1[3][0]],8) );
      sprintf( camera[i].sn, part3_serials[i-tlcgroupPC1[3][0]] );
     
      ASSERT( part3_names && part3_names[i-tlcgroupPC1[3][0]] && AfxIsValidString(part3_names[i-tlcgroupPC1[3][0]],4) );
      swprintf( camera[i].name, 5, part3_names[i-tlcgroupPC1[3][0]] );

      camera[i].trigger  =  TRUE;
    }
	*/

	//Pour changed to cosmetic insepction 20180523	

    if ( i>=tlcgroupPC1[3][0] && i<=tlcgroupPC1[3][1] ) // cosmetic
    {
      ASSERT( cosm_serials && cosm_serials[i-tlcgroupPC1[3][0]] && AfxIsValidString(cosm_serials[i-tlcgroupPC1[3][0]],8) );
      sprintf( camera[i].sn, cosm_serials[i-tlcgroupPC1[3][0]] );
     
      ASSERT( cosm_names && cosm_names[i-tlcgroupPC1[3][0]] && AfxIsValidString(cosm_names[i-tlcgroupPC1[3][0]],4) );
      swprintf( camera[i].name, 5, cosm_names[i-tlcgroupPC1[3][0]] );

      camera[i].trigger  =  TRUE;
    }
	//Pour changed to cosmetic inspeciton 20180523

    if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
    {
      msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
      info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
    }

    camera[i].offsetx    =           6;
    camera[i].offsety    = (580-PARTICDIMY)/2;
    camera[i].width      =  PARTICDIMX;
    camera[i].height     =  PARTICDIMY;
    camera[i].shutter    =         800;
    camera[i].triglab    =           i; // 3-4 5-6
    camera[i].dsporg.x   =  30 + 100*i;
    camera[i].dsporg.y   = camera[0].dsporg.y;
    camera[i].scale      =         0.5;
    camera[i].acq_mode   = AcquisitionMode_Continuous;
    //camera[i].trigger    =       FALSE; // no trigger here - DEFINED ABOVE
    camera[i].strobe     =       FALSE;
    camera[i].sequence   =        TRUE;
    camera[i].frame_rate =         0.0; 
    camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
    camera[i].textnum    =           5; //Pour changed to 5 rows for color detection 20180523
    camera[i].textwidth  =           0; // can be used to force width to some specified amount

	//Pour added for color difference detection 20180526
	#ifdef COLOR_DETECTION_P1
		if ( i==3 ) camera[i].modedsp  =   DISPLAY_COL90; // P1-A color camera needs color 24bits display
		if ( i==4 ) camera[i].modedsp  =   DISPLAY_COL90; // P1-B color camera needs color 24bits display
	#endif
	//Pour added for color difference detection 20180526

	//Pour added 20180523
#if STN3==COSMETIC_BACK
	if(i==7||i==8)
	{
	camera[i].offsetx    =           0;
    camera[i].offsety    =           0;
    camera[i].width      =        2048;
    camera[i].height     =        1000;
    camera[i].shutter    =         220;
    camera[i].triglab    =           i; // 7-8
    camera[i].dsporg.x   =  30 + 100*i;
    camera[i].dsporg.y   = camera[0].dsporg.y;
    camera[i].scale      =         0.2;
    camera[i].acq_mode   = AcquisitionMode_Continuous;
    camera[i].trigger    =       FALSE; // no trigger here - DEFINED ABOVE
    camera[i].strobe     =       FALSE;
    camera[i].sequence   =        TRUE;
    camera[i].frame_rate =      3200.0; 
    camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
    camera[i].textnum    =           4;
    camera[i].textwidth  =         200; // can be used to force width to some specified amount	
	}

#endif
	//Pour added 20180523


    if ( Basler_initialize( i ) )
    {
      msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
      if ( !debug ) Message_box( msg, MBOX_ERROR );
    }
    else
    {
      if ( Basler_parameters( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
    }
  }

  Prepare_dsporgx(indsta,indend);

  for ( i=indsta ; i<=indend ; i++ )
  {
    if ( Basler_display( i ) )
    {
      Message_box( msg_err, MBOX_ERROR );
      return;
    }

    parcat_1 = camera[i].name;
    
    if ( i>=tlcgroupPC1[1][0] && i<=tlcgroupPC1[1][1] ) // part1
    {    
      parcat_2 = L"Particle1";

      #if STN1==PARTICLE_BOTTOM
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+1, &file_manager );
      #endif 
       #if STN1==PARTICLE_BACK
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+1, &file_manager );
      #endif 
      #if STN1==PARTICLE_BOTH
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_BOTH+1, &file_manager );
      #endif 

      #ifdef STN1_FILLING_LEVEL
        parcat_2 = L"Filling level1";
        fillingl_insp[i] = new CFilling_level( i, &file_manager );
        #if STN1==PARTICLE_BOTTOM
          fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight
        #endif
        #if STN1==PARTICLE_BACK
          fillingl_insp[i]->mode = FILLINGL_MODE_ADSORPTION; // backlight
        #endif
        #if STN1==PARTICLE_BOTH
          fillingl_insp[i]->mode = FILLINGL_MODE_SELECTABLE; // selectable bottom/backlight
        #endif
      #endif // STN1_FILLING_LEVEL
    }

    if ( i>=tlcgroupPC1[2][0] && i<=tlcgroupPC1[2][1] ) // part2
    {    
      parcat_2 = L"Particle2";

      #if STN2==PARTICLE_BOTTOM
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+1, &file_manager );
      #endif 
      #if STN2==PARTICLE_BACK
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+1, &file_manager );
      #endif 
      #if STN2==PARTICLE_BOTH
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_BOTH+1, &file_manager );
      #endif 

    }

    if ( i>=tlcgroupPC1[3][0] && i<=tlcgroupPC1[3][1] ) // cosmetic
    {    
      parcat_2 = L"Cosmetic";

	    #if STN3==COSMETIC_BACK // standard cosmetic
        parcat_2 = L"Cosmetic";
        cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE ); // Cosmetic/sidewall A40/L40
        cosmetic_insp[i]->txt_desc = string_838[lng];
      #endif

	  /*
      #if STN3==PARTICLE_BOTTOM
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+1, &file_manager );
      #endif 
      #if STN3==PARTICLE_BACK
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+1, &file_manager );
      #endif 
      #if STN3==PARTICLE_BOTH
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_BOTH+1, &file_manager );
      #endif 
	  */
    }

  }


  //////////////////////////////////////////////////////////////////////////////////////////////////////
  
  // Parametro di lettura/visualizzazione
  #ifdef BECKHOFF

  RECT area_txt;

  CRect area_client;
  GetClientRect( &area_client );

	area_txt.left   =                       OFFS_COORDY;
  area_txt.right  = area_client.Width() - OFFS_COORDY;

  #define HDRIGA 34 // vertical height of text lines
  #define HSRIGA  4 // vertical space between different lines

  area_txt.top    = area_client.bottom - 3*HDRIGA - 3*HSRIGA ;//- 1;//Pour added 1 for alignment 20180523
	area_txt.bottom = area_txt.top + HDRIGA;

  machine_txt     = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	machine_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_CONTAIN;
	if ( machine_txt ) machine_txt->SetText( string_008[lng] );

	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

  alarm_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	alarm_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	if ( alarm_txt ) alarm_txt->SetText( L"-" );

  
  // GESTIONE WARNING
	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

  warning_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	warning_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	//warning_txt->SetText( "-" );

  #undef HRIGA2

  #endif // BECKHOFF

  Invalidate( TRUE );
}
	

#endif // TIVS_A20

//Pour added for new machine model TIVS-A20 20180523



#ifdef TIVS_A20L

void CChildView::Create_display_TIVS_A20L(void)
{

  UINT i;
  CString msg;
  
  Basler_initialize();
  ZeroMemory( camera, NUM_TLC*sizeof(Camera_struct) );

  groupnames[1] = string_540;
  groupnames[2] = string_539;

  // INITIALIZE TIP/SEAL CAMERAS
  UINT indsta=tlcgroupPC1[0][0];
  UINT indend=tlcgroupPC1[0][1];
  for ( i=indsta ; i<=indend ; i++ )
  {
    ASSERT( tip_serials && tip_serials[i-indsta] && AfxIsValidString(tip_serials[i-indsta],8) );
    sprintf( camera[i].sn, tip_serials[i-indsta] );

    ASSERT( tip_names && tip_names[i-indsta] && AfxIsValidString(tip_names[i-indsta],4) );
    swprintf( camera[i].name, 5, tip_names[i-indsta] );

    if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
    {
      msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
      info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
    }

    camera[i].offsetx    =           0;
    camera[i].offsety    =           0;
    camera[i].width      =         780;
    camera[i].height     =         580;
    camera[i].shutter    =         800;
    camera[i].triglab    =           i; // 0-1-2
    camera[i].dsporg.x   =  30 + 100*i;
    camera[i].dsporg.y   =         380;
    camera[i].scale      =         0.5;
    camera[i].acq_mode   = AcquisitionMode_Continuous;  // camera[i].acq_mode   = TriggerMode_On;
    camera[i].trigger    =        TRUE;
    camera[i].strobe     =       FALSE;
    camera[i].frame_rate =         0.0; 
    camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
    camera[i].textnum    =           4;
    camera[i].textwidth  =         360; // can be used to force width to some specified amount
      //camera[i].light_out  = ".O_LIGHT[1]"; // output to be switched ON when TRIGGER WAIT is disabled

    #ifdef NEW_TRIPLE_TIP
      camera[i].strobe     =      TRUE;
    #endif

    #ifdef NEWCAP_V30
      camera[i].textwidth =        400;
    #endif

    //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
    #ifdef FO_COLOR
      camera[i].light_out  = ".O_LIGHT[1]"; // output to be switched ON when TRIGGER WAIT is disabled
    #endif

    if ( Basler_initialize( i ) )
    {
      msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
      if ( !debug ) Message_box( msg, MBOX_ERROR );
    }
    else
    {
      if ( Basler_parameters( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
    }
  }

  Prepare_dsporgx( indsta,indend );

  for ( i=indsta ; i<=indend ; i++ )
  {
    if ( Basler_display( i ) )
    {
      Message_box( msg_err, MBOX_ERROR );
      return;
    }
      //#if SERIAL_N==201300502 // HENG RUI - CAP/sealing inspection plus FO color!
    #ifdef FO_COLOR
      parcat_1 = camera[i].name;

      #ifdef COMBINED_TIPCAP
        parcat_2 = L"Tip/Cap";
        tip_insp[i] = new CTip_inspection( i, &file_manager, TIPCAP_INSPECTION );

      #else  // COMBINED_TIPCAP
        parcat_2 = L"Cap";

        #ifdef NEWCAP_DOUBLE

          #ifdef    NEWCAP_ORALCAP
            tip_insp[i] = new CTip_inspection( i, &file_manager, ORALCAP_INSPECTION );
          #else  // NEWCAP_ORALCAP
            tip_insp[i] = new CTip_inspection( i, &file_manager, TOPLIGHT_INSPECTION );
          #endif // NEWCAP_ORALCAP

        #else // NEWCAP_DOUBLE
          tip_insp[i] = new CTip_inspection( i, &file_manager, CAP_INSPECTION );
        #endif // NEWCAP_DOUBLE

      #endif // COMBINED_TIPCAP

    #else // FO_COLOR
      parcat_1 = camera[i].name;
      parcat_2 = L"Tip";
      tip_insp[i] = new CTip_inspection( i, &file_manager ); 
    #endif // FO_COLOR
  }


  // INITIALIZE PARTICLE1/2/3 CAMERAS
  indsta=tlcgroupPC1[1][0];
  indend=tlcgroupPC1[3][1];
  for ( i=indsta ; i<=indend ; i++ )
  {

    if ( i>=tlcgroupPC1[1][0] && i<=tlcgroupPC1[1][1] ) // part1
    {
      ASSERT( part1_serials && part1_serials[i-tlcgroupPC1[1][0]] && AfxIsValidString(part1_serials[i-tlcgroupPC1[1][0]],8) );
      sprintf( camera[i].sn, part1_serials[i-tlcgroupPC1[1][0]] );
     
      ASSERT( part1_names && part1_names[i-tlcgroupPC1[1][0]] && AfxIsValidString(part1_names[i-tlcgroupPC1[1][0]],4) );
      swprintf( camera[i].name, 5, part1_names[i-tlcgroupPC1[1][0]] );

      camera[i].trigger  =  FALSE;

    }

    if ( i>=tlcgroupPC1[2][0] && i<=tlcgroupPC1[2][1] ) // part2
    {
      ASSERT( part2_serials && part2_serials[i-tlcgroupPC1[2][0]] && AfxIsValidString(part2_serials[i-tlcgroupPC1[2][0]],8) );
      sprintf( camera[i].sn, part2_serials[i-tlcgroupPC1[2][0]] );
     
      ASSERT( part2_names && part2_names[i-tlcgroupPC1[2][0]] && AfxIsValidString(part2_names[i-tlcgroupPC1[2][0]],4) );
      swprintf( camera[i].name, 5, part2_names[i-tlcgroupPC1[2][0]] );

      camera[i].trigger  =  TRUE;
    }

    if ( i>=tlcgroupPC1[3][0] && i<=tlcgroupPC1[3][1] ) // part3
    {
      ASSERT( part3_serials && part3_serials[i-tlcgroupPC1[3][0]] && AfxIsValidString(part3_serials[i-tlcgroupPC1[3][0]],8) );
      sprintf( camera[i].sn, part3_serials[i-tlcgroupPC1[3][0]] );
     
      ASSERT( part3_names && part3_names[i-tlcgroupPC1[3][0]] && AfxIsValidString(part3_names[i-tlcgroupPC1[3][0]],4) );
      swprintf( camera[i].name, 5, part3_names[i-tlcgroupPC1[3][0]] );

      camera[i].trigger  =  TRUE;

    }


    if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
    {
      msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
      info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
    }

    camera[i].offsetx    =           6;
    camera[i].offsety    = (580-PARTICDIMY)/2;
    camera[i].width      =  PARTICDIMX;
    camera[i].height     =  PARTICDIMY;
    camera[i].shutter    =         800;
    camera[i].triglab    =           i; // 3-4 5-6 7-8
    camera[i].dsporg.x   =  30 + 100*i;
    camera[i].dsporg.y   = camera[0].dsporg.y;
    camera[i].scale      =         0.5;
    camera[i].acq_mode   = AcquisitionMode_Continuous;
    //camera[i].trigger    =       FALSE; // no trigger here - DEFINED ABOVE
    camera[i].strobe     =       FALSE;
    camera[i].sequence   =        TRUE;
    camera[i].frame_rate =         0.0; 
    camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
    camera[i].textnum    =           4;
    camera[i].textwidth  =           0; // can be used to force width to some specified amount


    if ( Basler_initialize( i ) )
    {
      msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
      if ( !debug ) Message_box( msg, MBOX_ERROR );
    }
    else
    {
      if ( Basler_parameters( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
    }
  }

  Prepare_dsporgx(indsta,indend);

  for ( i=indsta ; i<=indend ; i++ )
  {
    if ( Basler_display( i ) )
    {
      Message_box( msg_err, MBOX_ERROR );
      return;
    }

    parcat_1 = camera[i].name;
    
    if ( i>=tlcgroupPC1[1][0] && i<=tlcgroupPC1[1][1] ) // part1
    {    
      parcat_2 = L"Particle1";

      #if STN1==PARTICLE_BOTTOM
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+1, &file_manager );
      #endif 
       #if STN1==PARTICLE_BACK
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+1, &file_manager );
      #endif 
      #if STN1==PARTICLE_BOTH
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_BOTH+1, &file_manager );
      #endif 

      #ifdef STN1_FILLING_LEVEL
        parcat_2 = L"Filling level1";
        fillingl_insp[i] = new CFilling_level( i, &file_manager );
        #if STN1==PARTICLE_BOTTOM
          fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight
        #endif
        #if STN1==PARTICLE_BACK
          fillingl_insp[i]->mode = FILLINGL_MODE_ADSORPTION; // backlight
        #endif
        #if STN1==PARTICLE_BOTH
          fillingl_insp[i]->mode = FILLINGL_MODE_SELECTABLE; // selectable bottom/backlight
        #endif
      #endif // STN1_FILLING_LEVEL
    }

    if ( i>=tlcgroupPC1[2][0] && i<=tlcgroupPC1[2][1] ) // part2
    {    
      parcat_2 = L"Particle2";

      #if STN2==PARTICLE_BOTTOM
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+1, &file_manager );
      #endif 
      #if STN2==PARTICLE_BACK
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+1, &file_manager );
      #endif 
      #if STN2==PARTICLE_BOTH
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_BOTH+1, &file_manager );
      #endif 

   /* #ifdef STN1_FILLING_LEVEL
        parcat_2 = L"Filling level1";
        fillingl_insp[i] = new CFilling_level( i, &file_manager );
        #if STN1==PARTICLE_BOTTOM
          fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight
        #endif
        #if STN1==PARTICLE_BACK
          fillingl_insp[i]->mode = FILLINGL_MODE_ADSORPTION; // backlight
        #endif
        #if STN1==PARTICLE_BOTH
          fillingl_insp[i]->mode = FILLINGL_MODE_SELECTABLE; // selectable bottom/backlight
        #endif
      #endif // STN1_FILLING_LEVEL */
    }

    if ( i>=tlcgroupPC1[3][0] && i<=tlcgroupPC1[3][1] ) // part3
    {    
      parcat_2 = L"Particle3";

      #if STN3==PARTICLE_BOTTOM
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+1, &file_manager );
      #endif 
      #if STN3==PARTICLE_BACK
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+1, &file_manager );
      #endif 
      #if STN3==PARTICLE_BOTH
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_BOTH+1, &file_manager );
      #endif 

   /* #ifdef STN1_FILLING_LEVEL
        parcat_2 = L"Filling level1";
        fillingl_insp[i] = new CFilling_level( i, &file_manager );
        #if STN1==PARTICLE_BOTTOM
          fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight
        #endif
        #if STN1==PARTICLE_BACK
          fillingl_insp[i]->mode = FILLINGL_MODE_ADSORPTION; // backlight
        #endif
        #if STN1==PARTICLE_BOTH
          fillingl_insp[i]->mode = FILLINGL_MODE_SELECTABLE; // selectable bottom/backlight
        #endif
      #endif // STN1_FILLING_LEVEL */
    }

  }


  //////////////////////////////////////////////////////////////////////////////////////////////////////
  
  // Parametro di lettura/visualizzazione
  #ifdef BECKHOFF

  RECT area_txt;

  CRect area_client;
  GetClientRect( &area_client );

	area_txt.left   =                       OFFS_COORDY;
  area_txt.right  = area_client.Width() - OFFS_COORDY;

  #define HDRIGA 34 // vertical height of text lines
  #define HSRIGA  4 // vertical space between different lines

  area_txt.top    = area_client.bottom - 3*HDRIGA - 3*HSRIGA;
	area_txt.bottom = area_txt.top + HDRIGA;

  machine_txt     = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	machine_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_CONTAIN;
	if ( machine_txt ) machine_txt->SetText( string_008[lng] );

	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

  alarm_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	alarm_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	if ( alarm_txt ) alarm_txt->SetText( L"-" );

  
  // GESTIONE WARNING
	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

  warning_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	warning_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	//warning_txt->SetText( "-" );

  #undef HRIGA2

  #endif // BECKHOFF

  Invalidate( TRUE );
}
	



#endif // TIVS_A20L

//Pour added for TIVS-A40L 20180124
#ifdef TIVS_A40L

void CChildView::Create_display_TIVS_A40L(void)
{

  UINT i;
  CString msg;
  
  Basler_initialize();
  ZeroMemory( camera, NUM_TLC*sizeof(Camera_struct) );

  if (IS_PC1)
  {
  groupnames[1] = string_540;
  groupnames[2] = string_542;

//	layout_dsp=new CImage_layout(L"c:\\IVS\\layout.png");
//	layout_dsp=new CImage_layout(L"layout.png");

  // INITIALIZE TIP/SEAL CAMERAS
  UINT indsta=tlcgroupPC1[0][0];
  UINT indend=tlcgroupPC1[0][1];
  for ( i=indsta ; i<=indend ; i++ )
  {
    ASSERT( tip_serials && tip_serials[i-indsta] && AfxIsValidString(tip_serials[i-indsta],8) );
    sprintf( camera[i].sn, tip_serials[i-indsta] );

    ASSERT( tip_names && tip_names[i-indsta] && AfxIsValidString(tip_names[i-indsta],4) );
    swprintf( camera[i].name, 5, tip_names[i-indsta] );

    if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
    {
      msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
      info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
    }

    camera[i].offsetx    =           0;
    camera[i].offsety    =           0;
    camera[i].width      =         780;
    camera[i].height     =         580;
    camera[i].shutter    =         800;
    camera[i].triglab    =           i; // 0-1-2
    camera[i].dsporg.x   =  30 + 100*i;
    camera[i].dsporg.y   =         380;
    camera[i].scale      =         0.5;
    camera[i].acq_mode   = AcquisitionMode_Continuous;  // camera[i].acq_mode   = TriggerMode_On;
    camera[i].trigger    =        TRUE;
    camera[i].strobe     =       FALSE;
    camera[i].frame_rate =         0.0; 
    camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
    camera[i].textnum    =           4;
    camera[i].textwidth  =         360; // can be used to force width to some specified amount
      //camera[i].light_out  = ".O_LIGHT[1]"; // output to be switched ON when TRIGGER WAIT is disabled

    #ifdef NEW_TRIPLE_TIP
      camera[i].strobe     =      TRUE;
    #endif

    #ifdef NEWCAP_V30
      camera[i].textwidth =        400;
    #endif

    //#if SERIAL_N==201300502 // Ampoule machine for HENG RUI - SW updated 20140415 includes FO color!
    #ifdef FO_COLOR
      camera[i].light_out  = ".O_LIGHT[1]"; // output to be switched ON when TRIGGER WAIT is disabled
    #endif

    if ( Basler_initialize( i ) )
    {
      msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
      if ( !debug ) Message_box( msg, MBOX_ERROR );
    }
    else
    {
      if ( Basler_parameters( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
    }
  }

  Prepare_dsporgx( indsta,indend );

  for ( i=indsta ; i<=indend ; i++ )
  {
    if ( Basler_display( i ) )
    {
      Message_box( msg_err, MBOX_ERROR );
      return;
    }
      //#if SERIAL_N==201300502 // HENG RUI - CAP/sealing inspection plus FO color!
    #ifdef FO_COLOR
      parcat_1 = camera[i].name;

      #ifdef COMBINED_TIPCAP
        parcat_2 = L"Tip/Cap";
        tip_insp[i] = new CTip_inspection( i, &file_manager, TIPCAP_INSPECTION );

      #else  // COMBINED_TIPCAP
        parcat_2 = L"Cap";

        #ifdef NEWCAP_DOUBLE

          #ifdef    NEWCAP_ORALCAP
            tip_insp[i] = new CTip_inspection( i, &file_manager, ORALCAP_INSPECTION );
          #else  // NEWCAP_ORALCAP
            tip_insp[i] = new CTip_inspection( i, &file_manager, TOPLIGHT_INSPECTION );
          #endif // NEWCAP_ORALCAP

        #else // NEWCAP_DOUBLE
          tip_insp[i] = new CTip_inspection( i, &file_manager, CAP_INSPECTION );
        #endif // NEWCAP_DOUBLE

      #endif // COMBINED_TIPCAP

    #else // FO_COLOR
      parcat_1 = camera[i].name;
      parcat_2 = L"Tip";
      tip_insp[i] = new CTip_inspection( i, &file_manager ); 
    #endif // FO_COLOR
  }


  // INITIALIZE PARTICLE1 CAMERAS
  indsta=tlcgroupPC1[1][0];
  indend=tlcgroupPC1[1][1];
  for ( i=indsta ; i<=indend ; i++ )
  {
/*
    if ( i>=tlcgroupPC1[1][0] && i<=tlcgroupPC1[1][1] ) // part1
    {
      ASSERT( part1_serials && part1_serials[i-tlcgroupPC1[1][0]] && AfxIsValidString(part1_serials[i-tlcgroupPC1[1][0]],8) );
      sprintf( camera[i].sn, part1_serials[i-tlcgroupPC1[1][0]] );
     
      ASSERT( part1_names && part1_names[i-tlcgroupPC1[1][0]] && AfxIsValidString(part1_names[i-tlcgroupPC1[1][0]],4) );
      swprintf( camera[i].name, 5, part1_names[i-tlcgroupPC1[1][0]] );

      camera[i].trigger  =  FALSE;

    }

    if ( i>=tlcgroupPC1[2][0] && i<=tlcgroupPC1[2][1] ) // part2
    {
      ASSERT( part2_serials && part2_serials[i-tlcgroupPC1[2][0]] && AfxIsValidString(part2_serials[i-tlcgroupPC1[2][0]],8) );
      sprintf( camera[i].sn, part2_serials[i-tlcgroupPC1[2][0]] );
     
      ASSERT( part2_names && part2_names[i-tlcgroupPC1[2][0]] && AfxIsValidString(part2_names[i-tlcgroupPC1[2][0]],4) );
      swprintf( camera[i].name, 5, part2_names[i-tlcgroupPC1[2][0]] );

      camera[i].trigger  =  TRUE;
    }

    if ( i>=tlcgroupPC1[3][0] && i<=tlcgroupPC1[3][1] ) // part3
    {
      ASSERT( part3_serials && part3_serials[i-tlcgroupPC1[3][0]] && AfxIsValidString(part3_serials[i-tlcgroupPC1[3][0]],8) );
      sprintf( camera[i].sn, part3_serials[i-tlcgroupPC1[3][0]] );
     
      ASSERT( part3_names && part3_names[i-tlcgroupPC1[3][0]] && AfxIsValidString(part3_names[i-tlcgroupPC1[3][0]],4) );
      swprintf( camera[i].name, 5, part3_names[i-tlcgroupPC1[3][0]] );

      camera[i].trigger  =  TRUE;
	  
    }
	*/
	  //Pour changed for P1 20180124
	  if ( i>=tlcgroupPC1[1][0] && i<=tlcgroupPC1[1][1] ) // part1     //Pour added 20180125
	  {

	  ASSERT( part1_serials && part1_serials[i-indsta] && AfxIsValidString(part1_serials[i-indsta],8) );
      sprintf( camera[i].sn, part1_serials[i-indsta] );
     
      ASSERT( part1_names && part1_names[i-indsta] && AfxIsValidString(part1_names[i-indsta],4) );
      swprintf( camera[i].name, 5, part1_names[i-indsta] );

	  }
	  //Pour changed for P1 20180124
    if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
    {
      msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
      info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
    }

    camera[i].offsetx    =           6;
    camera[i].offsety    = (580-PARTICDIMY)/2;
    camera[i].width      =  PARTICDIMX;     //to be checked by Pour 20180125
    camera[i].height     =  PARTICDIMY;
    camera[i].shutter    =         800;
    camera[i].triglab    =           i; // 3-4-5-6
    camera[i].dsporg.x   =  30 + 100*i;
    camera[i].dsporg.y   =         380;//camera[0].dsporg.y;//to be checked by Pour 20180125
    camera[i].scale      =         0.5;
    camera[i].acq_mode   = AcquisitionMode_Continuous;
    camera[i].trigger    =       FALSE; // no trigger here - DEFINED ABOVE
    camera[i].strobe     =       FALSE;
    camera[i].sequence   =        TRUE;
    camera[i].frame_rate =         0.0; 
    camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
    camera[i].textnum    =           4;
    camera[i].textwidth  =         300; // can be used to force width to some specified amount

	//Pour added 20180124
	      #if STN1_OR==HORIZONTAL       // if defined cameras are setup horizonthally
        camera[i].dsporg.y   =         380;
        camera[i].modedsp    = DISPROT_000; // DISPROT_000 DISPROT_090 DISPROT_180
        camera[i].scale      =         0.4;
      #endif

      #ifdef SYNCH_PARTIC    // If enabled synch of cameras A/D B/E C/F enabled in HW
        #if STN1==PARTICLE_BOTTOM
          camera[i].trigger  =        TRUE;
        #endif
      #endif 
	//Pour added 20180124


    if ( Basler_initialize( i ) )
    {
      msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
      if ( !debug ) Message_box( msg, MBOX_ERROR );
    }
    else
    {
      if ( Basler_parameters( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
    }
  }

  Prepare_dsporgx(indsta,indend);

  for ( i=indsta ; i<=indend ; i++ )
  {
    if ( Basler_display( i ) )
    {
      Message_box( msg_err, MBOX_ERROR );
      return;
    }

    parcat_1 = camera[i].name;
    parcat_2 = L"Particle1";

      #if STN1==PARTICLE_BOTTOM
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+1, &file_manager );
      #endif 
       #if STN1==PARTICLE_BACK
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+1, &file_manager );
      #endif 
      #if STN1==PARTICLE_BOTH
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_BOTH+1, &file_manager );
      #endif 

      #ifdef STN1_FILLING_LEVEL
        parcat_2 = L"Filling level1";
        fillingl_insp[i] = new CFilling_level( i, &file_manager );
        #if STN1==PARTICLE_BOTTOM
          fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight
        #endif
        #if STN1==PARTICLE_BACK
          fillingl_insp[i]->mode = FILLINGL_MODE_ADSORPTION; // backlight
        #endif
        #if STN1==PARTICLE_BOTH
          fillingl_insp[i]->mode = FILLINGL_MODE_SELECTABLE; // selectable bottom/backlight
        #endif
      #endif // STN1_FILLING_LEVEL
  }

  }//PC1


  //Pour added 20180124
  if(IS_PC2)
  {
	      groupnames[1] = string_544;

    #if STN3==PARTICLE_BACK || STN3==PARTICLE_BOTTOM // third station is for particle
      groupnames[2] = string_545;
    #else  // standard cosmetic
      groupnames[2] = string_546;
    #endif

    // INITIALIZE PARTICLE2 CAMERAS
    UINT indsta=tlcgroupPC2[0][0];
    UINT indend=tlcgroupPC2[0][1];
    for ( i=indsta ; i<=indend ; i++ )
    {
      /* if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_512[lng], i+1 );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      } */

      ASSERT( part2_serials && part2_serials[i-indsta] && AfxIsValidString(part2_serials[i-indsta],8) );
      sprintf( camera[i].sn, part2_serials[i-indsta] );
     
      ASSERT( part2_names && part2_names[i-indsta] && AfxIsValidString(part2_names[i-indsta],4) );
      swprintf( camera[i].name, 5, part2_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }

      camera[i].offsetx    =           6;
      camera[i].offsety    = (580-PARTICDIMY)/2;
      camera[i].width      =  PARTICDIMX;
      camera[i].height     =  PARTICDIMY;
      camera[i].shutter    =         800;
      camera[i].triglab    =         i+7; // 7-8-9-10   //Pour changed from i+7 to i+4 20180125
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   =         380;
      camera[i].scale      =         0.5;
      camera[i].acq_mode   = AcquisitionMode_Continuous;  
      camera[i].trigger    =       FALSE;
      camera[i].strobe     =        TRUE;
      camera[i].sequence   =        TRUE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         300; // can be used to force width to some specified amount

      #if STN2_OR==HORIZONTAL       // if defined cameras are setup horizonthally
        camera[i].dsporg.y   =         380;
        camera[i].modedsp    = DISPROT_000; // DISPROT_000 DISPROT_090 DISPROT_180
        camera[i].scale      =         0.4;
      #endif

      #if defined SYNCH_PARTIC && STN2==PARTICLE_BOTTOM  // If enabled synch of cameras A/D B/E C/F enabled in HW
        camera[i].trigger  =        TRUE;
      #endif 


      if ( Basler_initialize( i ) )
      {
        //msg.Format( string_520[lng], AtoW(camera[i].sn), msg_err );
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
        //return;
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
      parcat_2 = L"Particle2";
      //particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION, &file_manager );

      #if STN2==PARTICLE_BOTTOM
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+2, &file_manager );
      #else 
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+2, &file_manager );
      #endif
      //particle_insp[i]->mode = PARTICLE_MODE_REFLECTION; // bottomlight

      parcat_2 = L"Filling level2";
      fillingl_insp[i] = new CFilling_level( i, &file_manager );
//      fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight

      #if STN2==PARTICLE_BOTTOM
        fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight
      #else 
        fillingl_insp[i]->mode = FILLINGL_MODE_ADSORPTION; // backlight
      #endif

      #if STN2_OR==HORIZONTAL  // if defined cameras are setup horizontally
        particle_insp[i]->mode += PARTICLE_HORIZONTAL;
      #endif


    }


    // INITIALIZE COSMETIC CAMERAS (LINE SCAN)
    indsta=tlcgroupPC2[1][0];
    indend=tlcgroupPC2[1][1];
    for ( i=indsta ; i<=indend ; i++ )
    {
      /* if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_512[lng], i+1 );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      } */

      ASSERT( cosm_serials && cosm_serials[i-indsta] && AfxIsValidString(cosm_serials[i-indsta],8) );
      sprintf( camera[i].sn, cosm_serials[i-indsta] );
     
      ASSERT( cosm_names && cosm_names[i-indsta] && AfxIsValidString(cosm_names[i-indsta],4) );
      swprintf( camera[i].name, 5, cosm_names[i-indsta] );

      if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
      {
        msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
        info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
      }


      #if STN3==PARTICLE_BOTTOM || STN3==PARTICLE_BACK // station3 is for particle (area scan cameras)
        camera[i].offsetx    =           6;
        camera[i].offsety    = (580-PARTICDIMY)/2;
        camera[i].width      =  PARTICDIMX;
        camera[i].height     =  PARTICDIMY;
        camera[i].shutter    =         800;
        camera[i].triglab    =         i+7; // 11-12-13-14
        camera[i].dsporg.x   =  30 + 100*i;
        camera[i].dsporg.y   =         380;
        camera[i].scale      =         0.5;
        camera[i].acq_mode   = AcquisitionMode_Continuous;  
        camera[i].trigger    =       FALSE;
        camera[i].strobe     =        TRUE;
        camera[i].sequence   =        TRUE;
        camera[i].frame_rate =         0.0; 
        camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
        camera[i].textnum    =           4;
        camera[i].textwidth  =         300; // can be used to force width to some specified amount

        #if defined SYNCH_PARTIC && STN3==PARTICLE_BOTTOM  // If enabled synch of cameras A/D B/E C/F enabled in HW
          camera[i].trigger  =        TRUE;
        #endif 

      #endif

      #if STN3==COSMETIC_BACK // standard cosmetic (line scan cameras)
        camera[i].offsetx    =           0;
        camera[i].offsety    =           0;
        camera[i].width      =        2048; // sensor resolution or less
        camera[i].height     =        1000; // n. of lines
        camera[i].shutter    =         220;
        camera[i].triglab    =         i+7; // 11-12-13-14 //to be checked 20180124 by Pour
        camera[i].dsporg.x   =  30 + 100*i; 
        camera[i].dsporg.y   = camera[0].dsporg.y;
        camera[i].scale      =         0.2;
        camera[i].acq_mode   = AcquisitionMode_Continuous;
        camera[i].trigger    =       FALSE; // no trigger here
        camera[i].strobe     =       FALSE;
        camera[i].frame_rate =      3200.0; 
        camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
        camera[i].textnum    =           4;
        camera[i].textwidth  =         300; // can be used to force width to some specified amount
      #endif


      if ( Basler_initialize( i ) )
      {
        //msg.Format( string_520[lng], AtoW(camera[i].sn), msg_err );
        msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
        if ( !debug ) Message_box( msg, MBOX_ERROR );
        //return;
      }
      else
      {
        if ( Basler_parameters( i ) )
        {
          Message_box( msg_err, MBOX_ERROR );
          return;
        }
      }
    }

    Prepare_dsporgx(indsta,indend);

    for ( i=indsta ; i<=indend ; i++ )
    {
      if ( Basler_display( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
      parcat_1 = camera[i].name;
     
      //cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager );

      #if STN3==PARTICLE_BOTTOM // station3 is for particle
        parcat_2 = L"Particle bottomlight";
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+3, &file_manager );
      #endif

      #if STN3==PARTICLE_BACK // station3 is for particle
        parcat_2 = L"Particle backlight";
        particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+3, &file_manager );
      #endif

      #if STN3==COSMETIC_BACK // standard cosmetic
        parcat_2 = L"Cosmetic";
        cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDECAKE ); // Cosmetic/sidewall A40/L40
        cosmetic_insp[i]->txt_desc = string_838[lng];
      #endif

    }
  }
  //Pour added 20180124
  //////////////////////////////////////////////////////////////////////////////////////////////////////
  
  // Parametro di lettura/visualizzazione
  #ifdef BECKHOFF

  RECT area_txt;

  CRect area_client;
  GetClientRect( &area_client );

	area_txt.left   =                       OFFS_COORDY;
  area_txt.right  = area_client.Width() - OFFS_COORDY;

  #define HDRIGA 34 // vertical height of text lines
  #define HSRIGA  4 // vertical space between different lines

  area_txt.top    = area_client.bottom - 3*HDRIGA - 3*HSRIGA;
	area_txt.bottom = area_txt.top + HDRIGA;

  machine_txt     = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	machine_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_CONTAIN;
	if ( machine_txt ) machine_txt->SetText( string_008[lng] );

	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

  alarm_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	alarm_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	if ( alarm_txt ) alarm_txt->SetText( L"-" );

  
  // GESTIONE WARNING
	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

  warning_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	warning_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	//warning_txt->SetText( "-" );

  #undef HRIGA2

  #endif // BECKHOFF

  Invalidate( TRUE );
}

#endif // TIVS_A40L
//Pour added for TIVS-A40L 20180124




#ifdef TIVS_S40

void CChildView::Create_display_TIVS_S40(void)
{

  UINT i;
  CString msg;
  
  Basler_initialize();
  ZeroMemory( camera, NUM_TLC*sizeof(Camera_struct) );

  groupnames[1] = string_545a; // Flange top and bottom sides A/B
  groupnames[2] = string_542;  // Particle1
  groupnames[3] = string_544;  // Particle2
  groupnames[4] = string_546;  // Cosmetic   (linear)
  groupnames[5] = string_545b; // Needle/cap 

  
  // INITIALIZE TIP/SEAL CAMERAS
  UINT indsta=tlcgroupPC1[0][0]; // 0
  UINT indend=tlcgroupPC1[0][1]; // 2
  for ( i=indsta ; i<=indend ; i++ )
  {
    ASSERT( stopper_serials && stopper_serials[i-indsta] && AfxIsValidString(stopper_serials[i-indsta],8) );
    sprintf( camera[i].sn, stopper_serials[i-indsta] );

    ASSERT( stopper_names && stopper_names[i-indsta] && AfxIsValidString(stopper_names[i-indsta],4) );
    swprintf( camera[i].name, 5, stopper_names[i-indsta] );

    if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
    {
      msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
      info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
    }

    camera[i].offsetx    =           0;
    camera[i].offsety    =           0;
    camera[i].width      =         580;
    camera[i].height     =         580;
    camera[i].shutter    =         800;
    camera[i].triglab    =           i; // 0-1-2
    camera[i].dsporg.x   =  30 + 100*i;
    camera[i].dsporg.y   =         300;
    camera[i].scale      =         0.8;
    camera[i].acq_mode   = AcquisitionMode_Continuous;  
    camera[i].trigger    =        TRUE;
    camera[i].strobe     =        TRUE;
 /*   if ( i>indsta )
    {
      camera[i].trigger    =     FALSE;
      camera[i].strobe     =     FALSE;
      camera[i].sequence   =      TRUE;
    } */
    camera[i].frame_rate =         0.0; 
    camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
    camera[i].textnum    =           4;
    camera[i].textwidth  =         420; // can be used to force width to some specified amount
      //camera[i].light_out  = ".O_LIGHT[1]"; // output to be switched ON when TRIGGER WAIT is disabled


    if ( Basler_initialize( i ) )
    {
      msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
      if ( !debug ) Message_box( msg, MBOX_ERROR );
    }
    else
    {
      if ( Basler_parameters( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
    }
  }

  Prepare_dsporgx( indsta,indend );

  for ( i=indsta ; i<=indend ; i++ )
  {
    if ( Basler_display( i ) )
    {
      Message_box( msg_err, MBOX_ERROR );
      return;
    }
    parcat_1 = camera[i].name;
    if ( i==indsta)  // TCA
    {
      parcat_2 = L"Flange";
      //pfstopper_insp[i] = new CPFStopper_inspection( i, &file_manager, TIPCAP_INSPECTION );
      pfstopper_insp[i] = new CPFStopper_inspection( i, TIPCAP_INSPECTION, &file_manager );
	  //Pour added for new flange testing on 20201130
	  //flange_insp[i] = new CFlange_inspection( i,  &file_manager );
    }
    else // C3A&B
    {
      parcat_2 = L"Sidewall C3";
      pfsidewall_insp[i] = new CPFSidewall_inspection( i, PFS_LOWSTOPPER, &file_manager );
    }

  }


  // INITIALIZE PARTICLE1/2 CAMERAS
  indsta=tlcgroupPC1[1][0]; // 3
  indend=tlcgroupPC1[2][1]; // 8

  for ( i=indsta ; i<=indend ; i++ )
  {
    if ( i>=tlcgroupPC1[1][0] && i<=tlcgroupPC1[1][1] ) // part1
    {
      ASSERT( part1_serials && part1_serials[i-indsta] && AfxIsValidString(part1_serials[i-indsta],8) );
      sprintf( camera[i].sn, part1_serials[i-indsta] );
      ASSERT( part1_names && part1_names[i-indsta] && AfxIsValidString(part1_names[i-indsta],4) );
      swprintf( camera[i].name, 5, part1_names[i-indsta] );
    }

    if ( i>=tlcgroupPC1[2][0] && i<=tlcgroupPC1[2][1] ) // part2
    {
      ASSERT( part2_serials && part2_serials[i-tlcgroupPC1[2][0]] && AfxIsValidString(part2_serials[i-tlcgroupPC1[2][0]],8) );
      sprintf( camera[i].sn, part2_serials[i-tlcgroupPC1[2][0]] );
      ASSERT( part2_names && part2_names[i-tlcgroupPC1[2][0]] && AfxIsValidString(part2_names[i-tlcgroupPC1[2][0]],4) );
      swprintf( camera[i].name, 5, part2_names[i-tlcgroupPC1[2][0]] );
    }

    if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
    {
      msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
      info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
    }

    camera[i].offsetx    =           6;
    camera[i].offsety    = (580-PARTICDIMY)/2;
    camera[i].width      =  PARTICDIMX;
    camera[i].height     =  PARTICDIMY;
    camera[i].shutter    =         800;
    camera[i].triglab    =           i; // 3-4-5 / 6-7-8
    camera[i].dsporg.x   =  30 + 100*i;
    camera[i].dsporg.y   =         200; // camera[0].dsporg.y;
    camera[i].scale      =         0.8;
    camera[i].acq_mode   = AcquisitionMode_Continuous;
    camera[i].trigger    =       FALSE; // no trigger here - DEFINED ABOVE
    camera[i].strobe     =       FALSE;
    camera[i].sequence   =        TRUE;
    camera[i].frame_rate =         0.0; 
    camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
    camera[i].textnum    =           4;
    camera[i].textwidth  =         420; // can be used to force width to some specified amount


    if ( Basler_initialize( i ) )
    {
      msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
      if ( !debug ) Message_box( msg, MBOX_ERROR );
    }
    else
    {
      if ( Basler_parameters( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
    }
  }

//  Prepare_dsporgx(indsta,indend);
  Prepare_dsporgx(3,5);
  Prepare_dsporgx(6,8);

  for ( i=indsta ; i<=indend ; i++ )
  {
    if ( Basler_display( i ) )
    {
      Message_box( msg_err, MBOX_ERROR );
      return;
    }

    parcat_1 = camera[i].name;
    
    if ( i>=tlcgroupPC1[1][0] && i<=tlcgroupPC1[1][1] ) // part1
    {    
      parcat_2 = L"Particle1";
      particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+1, &file_manager );
      //fillingl_insp[i] = new CFilling_level( i, &file_manager );
    }

    if ( i>=tlcgroupPC1[2][0] && i<=tlcgroupPC1[2][1] ) // part2
    {    
      parcat_2 = L"Particle2";
      particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+1, &file_manager );
    }

  }


  // INITIALIZE COSMETIC & NEEDLE/CAP CAMERAS
  indsta=tlcgroupPC1[3][0]; // 9
  indend=tlcgroupPC1[4][1]; // 14
  for ( i=indsta ; i<=indend ; i++ )
  {
    if ( i>=tlcgroupPC1[3][0] && i<=tlcgroupPC1[3][1] ) // cosmetic 1 - sidewall - line scan
    {
      ASSERT( cosm1_serials && cosm1_serials[i-indsta] && AfxIsValidString(cosm1_serials[i-indsta],8) );
      sprintf( camera[i].sn, cosm1_serials[i-indsta] );
      ASSERT( cosm1_names && cosm1_names[i-indsta] && AfxIsValidString(cosm1_names[i-indsta],4) );
      swprintf( camera[i].name, 5, cosm1_names[i-indsta] );

      camera[i].trigger    =       FALSE;
      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =        2048; // sensor resolution or less
      camera[i].height     =        1000; // n. of lines
      camera[i].shutter    =         220;
      camera[i].triglab    =           i; // 9-10-11 
      camera[i].dsporg.x   =  30 + 100*i; 
      camera[i].dsporg.y   =         200; // camera[0].dsporg.y;
      camera[i].scale      =         0.3;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =      3200.0; // default lps
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         360; // can be used to force width to some specified amount
    }

    if ( i>=tlcgroupPC1[4][0] && i<=tlcgroupPC1[4][1] ) // cosmetic2 - needle shield/cap - area scan
    {
      ASSERT( cosm2_serials && cosm2_serials[i-tlcgroupPC1[4][0]] && AfxIsValidString(cosm2_serials[i-tlcgroupPC1[4][0]],8) );
      sprintf( camera[i].sn, cosm2_serials[i-tlcgroupPC1[4][0]] );
      ASSERT( cosm2_names && cosm2_names[i-tlcgroupPC1[4][0]] && AfxIsValidString(cosm2_names[i-tlcgroupPC1[4][0]],4) );
      swprintf( camera[i].name, 5, cosm2_names[i-tlcgroupPC1[4][0]] );
      camera[i].trigger  =  FALSE; // TRUE;

      camera[i].offsetx    =           6;
      camera[i].offsety    = (580-PARTICDIMY)/2;
      camera[i].width      =  PARTICDIMX;
      camera[i].height     =  PARTICDIMY;
      camera[i].shutter    =         800;
      camera[i].triglab    =           i; // 12-13-14
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   =         200; // camera[0].dsporg.y;
      camera[i].scale      =         0.8;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; 
      camera[i].strobe     =       FALSE;
      camera[i].sequence   =        TRUE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           4;
      camera[i].textwidth  =         420; // can be used to force width to some specified amount

    }

    if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
    {
      msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
      info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
    }


    if ( Basler_initialize( i ) )
    {
      msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
      if ( !debug ) Message_box( msg, MBOX_ERROR );
    }
    else
    {
      if ( Basler_parameters( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
    }
  }

//  Prepare_dsporgx(indsta,indend);
  Prepare_dsporgx( 9,11);
  Prepare_dsporgx(12,14);

  //for ( i=indsta ; i<=indend ; i++ )
  //{
  //  if ( Basler_display( i ) )
  //  {
  //    Message_box( msg_err, MBOX_ERROR );
  //    return;
  //  }

  //  parcat_1 = camera[i].name;
  //  
  //  if ( i>=tlcgroupPC1[3][0] && i<=tlcgroupPC1[3][1] ) // cosmetic 1 - sidewall - line scan
  //  {    
  //    parcat_2 = L"Cosmetic";
  //    cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_PFS ); // PFS Sidewall
  //    cosmetic_insp[i]->txt_desc = string_838[lng];
  //  }

  //  if ( i>=tlcgroupPC1[4][0] && i<=tlcgroupPC1[4][1] ) // cosmetic2 - needle shield/cap - area scan
  //  {    
  //    parcat_2 = L"Needle shield";
  //    pfsidewall_insp[i] = new CPFSidewall_inspection( i, PFS_NEEDLESHIELD, &file_manager );
  //  }

  //}


  //Pour added on 20201107 for particle interface integration
    for ( i=indsta ; i<=indend ; i++ )
  {
    if ( Basler_display( i ) )
    {
      Message_box( msg_err, MBOX_ERROR );
      return;
    }

    parcat_1 = camera[i].name;
    
    //if ( i>=tlcgroupPC1[3][0] && i<=tlcgroupPC1[3][1] ) // part1
    //{    
    //  parcat_2 = L"Particle1";
    //  particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+1, &file_manager );
    //  //fillingl_insp[i] = new CFilling_level( i, &file_manager );
    //}

	    if ( i>=tlcgroupPC1[3][0] && i<=tlcgroupPC1[3][1] ) // cosmetic 1 - sidewall - line scan
    {    
      parcat_2 = L"Cosmetic";

      //cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_PFS ); // PFS Sidewall

	  #ifdef NEWCOSMETIC_COMBO   // New cosmetic for combo machines 
        cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_COMBO ); // Cosmetic combo
      #else
        cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDEWALL|CSMTYPE_CAKEVOLUME ); // Sidewall F40
      #endif


      cosmetic_insp[i]->txt_desc = string_838[lng];
    }

    if ( i>=tlcgroupPC1[4][0] && i<=tlcgroupPC1[4][1] ) // part2
    {    
      parcat_2 = L"Particle2";
      particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+1, &file_manager );
    }

  }
	//Pour added on 20201107 for particle interface integration







  
  //////////////////////////////////////////////////////////////////////////////////////////////////////
  
  // Parametro di lettura/visualizzazione
  #ifdef BECKHOFF

  RECT area_txt;

  CRect area_client;
  GetClientRect( &area_client );

	area_txt.left   =                       OFFS_COORDY;
  area_txt.right  = area_client.Width() - OFFS_COORDY;

  #define HDRIGA 34 // vertical height of text lines
  #define HSRIGA  4 // vertical space between different lines

  area_txt.top    = area_client.bottom - 3*HDRIGA - 3*HSRIGA;
	area_txt.bottom = area_txt.top + HDRIGA;

  machine_txt     = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	machine_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_CONTAIN;
	if ( machine_txt ) machine_txt->SetText( string_008[lng] );

	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

  alarm_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	alarm_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	if ( alarm_txt ) alarm_txt->SetText( L"-" );

  
  // GESTIONE WARNING
	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

  warning_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	warning_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	//warning_txt->SetText( "-" );

  #undef HRIGA2

  #endif // BECKHOFF

  Invalidate( TRUE );
}
	



#endif // TIVS_S40



#ifdef TIVS_S60

void CChildView::Create_display_TIVS_S60(void)
{

  UINT i;
  CString msg;
  
  Basler_initialize();
  ZeroMemory( camera, NUM_TLC*sizeof(Camera_struct) );

    if ( IS_PC1 ) // ( !wcsncmp( PC_name, L"PC1", 3 ) )
  {

  groupnames[1] = string_545a; // Flange top and bottom sides A/B
  groupnames[2] = string_542;  // Particle1
  groupnames[3] = string_544;  // Particle2
  //groupnames[4] = string_546;  // Cosmetic   (linear)
  //groupnames[5] = string_545b; // Needle/cap 

  
  // INITIALIZE TIP/SEAL CAMERAS
  UINT indsta=tlcgroupPC1[0][0]; // 0
  UINT indend=tlcgroupPC1[0][1]; // 2
  for ( i=indsta ; i<=indend ; i++ )
  {
    ASSERT( stopper_serials && stopper_serials[i-indsta] && AfxIsValidString(stopper_serials[i-indsta],8) );
    sprintf( camera[i].sn, stopper_serials[i-indsta] );

    ASSERT( stopper_names && stopper_names[i-indsta] && AfxIsValidString(stopper_names[i-indsta],4) );
    swprintf( camera[i].name, 5, stopper_names[i-indsta] );

    if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
    {
      msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
      info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
    }

    camera[i].offsetx    =           0;
    camera[i].offsety    =           0;
    camera[i].width      =         580;
    camera[i].height     =         580;
    camera[i].shutter    =         800;
    camera[i].triglab    =           i; // 0-1-2
    camera[i].dsporg.x   =  30 + 100*i;
    camera[i].dsporg.y   =         300;
    camera[i].scale      =         0.8;
    camera[i].acq_mode   = AcquisitionMode_Continuous;  
    camera[i].trigger    =        TRUE;
    camera[i].strobe     =        TRUE;
 /*   if ( i>indsta )
    {
      camera[i].trigger    =     FALSE;
      camera[i].strobe     =     FALSE;
      camera[i].sequence   =      TRUE;
    } */
    camera[i].frame_rate =         0.0; 
    camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
    camera[i].textnum    =           4;
    camera[i].textwidth  =         420; // can be used to force width to some specified amount
      //camera[i].light_out  = ".O_LIGHT[1]"; // output to be switched ON when TRIGGER WAIT is disabled


    if ( Basler_initialize( i ) )
    {
      msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
      if ( !debug ) Message_box( msg, MBOX_ERROR );
    }
    else
    {
      if ( Basler_parameters( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
    }
  }

  Prepare_dsporgx( indsta,indend );

  for ( i=indsta ; i<=indend ; i++ )
  {
    if ( Basler_display( i ) )
    {
      Message_box( msg_err, MBOX_ERROR );
      return;
    }
    parcat_1 = camera[i].name;
    if ( i==indsta)  // TCA
    {
      parcat_2 = L"Flange";
      //pfstopper_insp[i] = new CPFStopper_inspection( i, &file_manager, TIPCAP_INSPECTION );
      //pfstopper_insp[i] = new CPFStopper_inspection( i, TIPCAP_INSPECTION, &file_manager );
	  //Pour added for new flange testing on 20201202
	  flange_insp[i] = new CFlange_inspection( i,  &file_manager );

    }
    else // C3A&B
    {
      parcat_2 = L"Sidewall C3";
      pfsidewall_insp[i] = new CPFSidewall_inspection( i, PFS_LOWSTOPPER, &file_manager );
    }

  }


  // INITIALIZE PARTICLE1/2 CAMERAS
  indsta=tlcgroupPC1[1][0]; // 3
  indend=tlcgroupPC1[2][1]; // 10

  for ( i=indsta ; i<=indend ; i++ )
  {
    if ( i>=tlcgroupPC1[1][0] && i<=tlcgroupPC1[1][1] ) // part1
    {
      ASSERT( part1_serials && part1_serials[i-indsta] && AfxIsValidString(part1_serials[i-indsta],8) );
      sprintf( camera[i].sn, part1_serials[i-indsta] );
      ASSERT( part1_names && part1_names[i-indsta] && AfxIsValidString(part1_names[i-indsta],4) );
      swprintf( camera[i].name, 5, part1_names[i-indsta] );
    }

    if ( i>=tlcgroupPC1[2][0] && i<=tlcgroupPC1[2][1] ) // part2
    {
      ASSERT( part2_serials && part2_serials[i-tlcgroupPC1[2][0]] && AfxIsValidString(part2_serials[i-tlcgroupPC1[2][0]],8) );
      sprintf( camera[i].sn, part2_serials[i-tlcgroupPC1[2][0]] );
      ASSERT( part2_names && part2_names[i-tlcgroupPC1[2][0]] && AfxIsValidString(part2_names[i-tlcgroupPC1[2][0]],4) );
      swprintf( camera[i].name, 5, part2_names[i-tlcgroupPC1[2][0]] );
    }

    if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
    {
      msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
      info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
    }

    camera[i].offsetx    =           6;
    camera[i].offsety    = (580-PARTICDIMY)/2;
    camera[i].width      =  PARTICDIMX;
    camera[i].height     =  PARTICDIMY;
    camera[i].shutter    =         800;
    camera[i].triglab    =           i; // 3-4-5-6 / 7-8-9-10
    camera[i].dsporg.x   =  30 + 100*i;
    camera[i].dsporg.y   =         200; // camera[0].dsporg.y;
    camera[i].scale      =         0.8;
    camera[i].acq_mode   = AcquisitionMode_Continuous;
    camera[i].trigger    =       FALSE; // no trigger here - DEFINED ABOVE
    camera[i].strobe     =       FALSE;
    camera[i].sequence   =        TRUE;
    camera[i].frame_rate =         0.0; 
    camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
    camera[i].textnum    =           4;
    camera[i].textwidth  =         420; // can be used to force width to some specified amount


    if ( Basler_initialize( i ) )
    {
      msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
      if ( !debug ) Message_box( msg, MBOX_ERROR );
    }
    else
    {
      if ( Basler_parameters( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
    }
  }

  //Prepare_dsporgx(indsta,indend);
  //Prepare_dsporgx(3,5);
  //Prepare_dsporgx(6,8);

  Prepare_dsporgx(3,6); //Pour removed on 20210120
  Prepare_dsporgx(7,10);//Pour removed on 20210120

  for ( i=indsta ; i<=indend ; i++ )
  {
    if ( Basler_display( i ) )
    {
      Message_box( msg_err, MBOX_ERROR );
      return;
    }

    parcat_1 = camera[i].name;
    
    if ( i>=tlcgroupPC1[1][0] && i<=tlcgroupPC1[1][1] ) // part1
    {    
      parcat_2 = L"Particle1";
      particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+1, &file_manager );
      //fillingl_insp[i] = new CFilling_level( i, &file_manager );//Pour removed from P1 on 20201120
    }

    if ( i>=tlcgroupPC1[2][0] && i<=tlcgroupPC1[2][1] ) // part2
    {    
      parcat_2 = L"Particle2";
      particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+1, &file_manager );

	  ////Pour added on 20201024

	  //      #ifdef STN2_FILLING_LEVEL
   //     parcat_2 = L"Filling level2";
   //     fillingl_insp[i] = new CFilling_level( i, &file_manager );
   //     // fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight

   //     #if STN2==PARTICLE_BOTTOM
   //       fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight
   //     #endif
   //     #if STN2==PARTICLE_BACK
   //       fillingl_insp[i]->mode = FILLINGL_MODE_ADSORPTION; // backlight
   //     #endif
   //     #if STN2==PARTICLE_BOTH
   //       fillingl_insp[i]->mode = FILLINGL_MODE_SELECTABLE; // selectable bottom/backlight
   //     #endif
   //   #endif // STN2_FILLING_LEVEL
	  ////Pour added on 20201024

    }

  }

  }//PC1 20210120


    if ( IS_PC2 ) // ( !wcsncmp( PC_name, L"PC2", 3 ) )
  {

	//groupnames[1] = string_545a; // Flange top and bottom sides A/B
	//groupnames[2] = string_542;  // Particle1
	//groupnames[3] = string_544;  // Particle2
  groupnames[1] = string_546;  // Cosmetic   (linear)
  groupnames[2] = string_545b; // Needle/cap 


  // INITIALIZE COSMETIC & NEEDLE/CAP CAMERAS
  //UINT indsta=tlcgroupPC1[3][0]; // 11
  //UINT indend=tlcgroupPC1[4][1]; // 14

  UINT indsta=tlcgroupPC2[0][0]; // 11
  UINT indend=tlcgroupPC2[1][1]; // 14

  for ( i=indsta ; i<=indend ; i++ )
  {
    //if ( i>=tlcgroupPC1[3][0] && i<=tlcgroupPC1[3][1] ) // cosmetic 1 - sidewall - line scan
		if ( i>=tlcgroupPC2[0][0] && i<=tlcgroupPC2[0][1] ) // cosmetic 1 - sidewall - line scan
    {
      ASSERT( cosm1_serials && cosm1_serials[i-indsta] && AfxIsValidString(cosm1_serials[i-indsta],8) );
      sprintf( camera[i].sn, cosm1_serials[i-indsta] );
      ASSERT( cosm1_names && cosm1_names[i-indsta] && AfxIsValidString(cosm1_names[i-indsta],4) );
      swprintf( camera[i].name, 5, cosm1_names[i-indsta] );

      camera[i].trigger    =       FALSE;
      camera[i].offsetx    =           0;
      camera[i].offsety    =           0;
      camera[i].width      =        2048; // sensor resolution or less
      camera[i].height     =        1000; // n. of lines
      camera[i].shutter    =         220;
      camera[i].triglab    =        i+11; // 11-12-13-14 
      camera[i].dsporg.x   =  30 + 100*i; 
      camera[i].dsporg.y   =         200; // camera[0].dsporg.y;
      camera[i].scale      =         0.3;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; // no trigger here
      camera[i].strobe     =       FALSE;
      camera[i].frame_rate =      3200.0; // default lps
      camera[i].modedsp    = DISPROT_270; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           5; //Pour changed from 4 to 5 on 20201121
      camera[i].textwidth  =         360; // can be used to force width to some specified amount
    }

    //if ( i>=tlcgroupPC1[4][0] && i<=tlcgroupPC1[4][1] ) // cosmetic2 - needle shield/cap - area scan
		if ( i>=tlcgroupPC2[1][0] && i<=tlcgroupPC2[1][1] ) // cosmetic2 - needle shield/cap - area scan
    {
		ASSERT( cosm2_serials && cosm2_serials[i-tlcgroupPC2[1][0]] && AfxIsValidString(cosm2_serials[i-tlcgroupPC2[1][0]],8) );
      sprintf( camera[i].sn, cosm2_serials[i-tlcgroupPC2[1][0]] );
      ASSERT( cosm2_names && cosm2_names[i-tlcgroupPC2[1][0]] && AfxIsValidString(cosm2_names[i-tlcgroupPC2[1][0]],4) );
      swprintf( camera[i].name, 5, cosm2_names[i-tlcgroupPC2[1][0]] );
      camera[i].trigger  =  FALSE; // TRUE;

      camera[i].offsetx    =           6;
      camera[i].offsety    = (580-PARTICDIMY)/2;
      camera[i].width      =  PARTICDIMX;
      camera[i].height     =  PARTICDIMY;
      camera[i].shutter    =         800;
      camera[i].triglab    =        i+11; // 15-16-17-18
      camera[i].dsporg.x   =  30 + 100*i;
      camera[i].dsporg.y   =         200; // camera[0].dsporg.y;
      camera[i].scale      =         0.8;
      camera[i].acq_mode   = AcquisitionMode_Continuous;
      camera[i].trigger    =       FALSE; 
      camera[i].strobe     =       FALSE;
      camera[i].sequence   =        TRUE;
      camera[i].frame_rate =         0.0; 
      camera[i].modedsp    = DISPROT_090; // DISPROT_000 DISPROT_090 DISPROT_180
      camera[i].textnum    =           5; //Pour changed from 4 to 5 on 20201121
      camera[i].textwidth  =         420; // can be used to force width to some specified amount

    }

    if ( info_wnd && info_wnd->m_hWnd && info_wnd->IsWindowVisible() )
    {
      msg.Format( string_514[lng], i+1, camera[i].name, AtoW(camera[i].sn) );
      info_wnd->GetDlgItem( IDC_TEXT_2 )->SetWindowText( msg );
    }


    if ( Basler_initialize( i ) )
    {
      msg.Format( string_522[lng], camera[i].name, AtoW(camera[i].sn), msg_err );
      if ( !debug ) Message_box( msg, MBOX_ERROR );
    }
    else
    {
      if ( Basler_parameters( i ) )
      {
        Message_box( msg_err, MBOX_ERROR );
        return;
      }
    }
  }

//  Prepare_dsporgx(indsta,indend);
  //Prepare_dsporgx( 9,11);
  //Prepare_dsporgx(12,14);

  //Prepare_dsporgx(11,14);//Pour marked on 20210120
  //Prepare_dsporgx(15,18);//Pour marked on 20210120

  Prepare_dsporgx(0,3);//Pour marked on 20210120
  Prepare_dsporgx(4,7);//Pour marked on 20210120


  /*
  for ( i=indsta ; i<=indend ; i++ )
  {
    if ( Basler_display( i ) )
    {
      Message_box( msg_err, MBOX_ERROR );
      return;
    }

    parcat_1 = camera[i].name;
    
    if ( i>=tlcgroupPC1[3][0] && i<=tlcgroupPC1[3][1] ) // cosmetic 1 - sidewall - line scan
    {    
      parcat_2 = L"Cosmetic";
      cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_PFS ); // PFS Sidewall
      cosmetic_insp[i]->txt_desc = string_838[lng];
    }

    if ( i>=tlcgroupPC1[4][0] && i<=tlcgroupPC1[4][1] ) // cosmetic2 - needle shield/cap - area scan
    {    
      parcat_2 = L"Needle shield";
      pfsidewall_insp[i] = new CPFSidewall_inspection( i, PFS_NEEDLESHIELD, &file_manager );
    }

  }

  */


    //Pour added on 20201119 for particle interface integration
    for ( i=indsta ; i<=indend ; i++ )
  {
    if ( Basler_display( i ) )
    {
      Message_box( msg_err, MBOX_ERROR );
      return;
    }

    parcat_1 = camera[i].name;
    
    //if ( i>=tlcgroupPC1[3][0] && i<=tlcgroupPC1[3][1] ) // part1
    //{    
    //  parcat_2 = L"Particle1";
    //  particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_ADSORPTION+1, &file_manager );
    //  //fillingl_insp[i] = new CFilling_level( i, &file_manager );
    //}

	// //Pour removed on 20201120
	   // if ( i>=tlcgroupPC1[3][0] && i<=tlcgroupPC1[3][1] ) // cosmetic 1 - sidewall - line scan
    //{    
    //  parcat_2 = L"Cosmetic";
    //  cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_PFS ); // PFS Sidewall
    //  cosmetic_insp[i]->txt_desc = string_838[lng];
    //}
	// //Pour removed on 20201120

	//if ( i>=tlcgroupPC1[3][0] && i<=tlcgroupPC1[3][1] ) // cosmetic 1 - sidewall - line scan
		if ( i>=tlcgroupPC2[0][0] && i<=tlcgroupPC2[0][1] ) // cosmetic 1 - sidewall - line scan
    {    
      parcat_2 = L"Cosmetic";

	        #ifdef NEWCOSMETIC_COMBO   // New cosmetic for combo machines 
        cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_COMBO ); // Cosmetic combo
      #else
        cosmetic_insp[i] = new CCosmetic_inspection( i, &file_manager, CSMTYPE_SIDEWALL|CSMTYPE_CAKEVOLUME ); // Sidewall F40
      #endif
		cosmetic_insp[i]->txt_desc = string_838[lng];

    }



    //if ( i>=tlcgroupPC1[4][0] && i<=tlcgroupPC1[4][1] ) // part2
		if ( i>=tlcgroupPC2[1][0] && i<=tlcgroupPC2[1][1] ) // part2
    {
		//Pour marked on 20201121  for new processing for needle shield
      parcat_2 = L"Particle2";
      particle_insp[i] = new CParticle_inspection( i, PARTICLE_MODE_REFLECTION+1, &file_manager );

	  //Pour marked on 20201121  for old processing for needle shield
	  //parcat_2 = L"Needle shield";
      //pfsidewall_insp[i] = new CPFSidewall_inspection( i, PFS_NEEDLESHIELD, &file_manager );

	  	//Pour added density control to needle shiled station on 20201119
		parcat_2 = L"Filling level";
        fillingl_insp[i] = new CFilling_level( i, &file_manager );
		fillingl_insp[i]->mode = FILLINGL_MODE_ADSORPTION; // backlight  //Pour changed on 20191123
		//Pour added density control to needle shiled station on 20201119

    }

		////Pour added density control to needle shiled station on 20201119
		//parcat_2 = L"Filling level";
  //      fillingl_insp[i] = new CFilling_level( i, &file_manager );
  //      //fillingl_insp[i]->mode = FILLINGL_MODE_REFLECTION; // bottomlight
		//fillingl_insp[i]->mode = FILLINGL_MODE_ADSORPTION; // backlight  //Pour changed on 20191123
		////Pour added density control to needle shiled station on 20201119

  }
	//Pour added on 20201119 for particle interface integration


}//PC2



  
  //////////////////////////////////////////////////////////////////////////////////////////////////////
  
  // Parametro di lettura/visualizzazione
  #ifdef BECKHOFF

  RECT area_txt;

  CRect area_client;
  GetClientRect( &area_client );

	area_txt.left   =                       OFFS_COORDY;
  area_txt.right  = area_client.Width() - OFFS_COORDY;

  #define HDRIGA 34 // vertical height of text lines
  #define HSRIGA  4 // vertical space between different lines

  area_txt.top    = area_client.bottom - 3*HDRIGA - 3*HSRIGA;
	area_txt.bottom = area_txt.top + HDRIGA;

  machine_txt     = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	machine_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_CONTAIN;
	if ( machine_txt ) machine_txt->SetText( string_008[lng] );

	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

  alarm_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	alarm_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	if ( alarm_txt ) alarm_txt->SetText( L"-" );

  
  // GESTIONE WARNING
	area_txt.top    = area_txt.bottom + HSRIGA;
	area_txt.bottom = area_txt.top    + HDRIGA;

  warning_txt       = new CText_box( ALM_WRN_FONT, area_txt, this, WS_VISIBLE|SS_CENTER|SS_CENTERIMAGE, WS_EX_STATICEDGE );
	warning_txt->colore_sfondo = ::GetSysColor( COLOR_INACTIVEBORDER ); //COLORE_SFONDO;
	//warning_txt->SetText( "-" );

  #undef HRIGA2

  #endif // BECKHOFF

  Invalidate( TRUE );
}
	



#endif // TIVS_S60



/* Create menu for all functions/parameters */
void CChildView::Create_menu_fillev(void)
{




  CRect rett;
  GetClientRect( &rett );

	rett.top    =    OFFS_COORDY;
  rett.bottom = rett.top + 190;
	rett.left   = OFFS_COORDY;
  rett.right  = rett.Width();

  num_container = 0;

	// --------        CONTENITORE BASE - Livello 0       ------------
	//container_main = new CContainer_main( "menu base", rett, this, IDD_CONTAINER );
	container_main = new CContainer_main( L"menu base", rett, this, IDD_CONTAINER );
	container_main->ShowWindow( SW_SHOW );



  RECT dimre;
  container_main->GetClientRect( &dimre );


  #define BRD_SUP       14

  #define COLA_SX      300
  #define COLB_SX      (COLA_SX+SPACE_X+BTN_DIMX)
  #define COLC_SX      (COLB_SX+SPACE_X+BTN_DIMX)
  #define COLD_SX      (COLA_SX-SPACE_X-BTN_DIMX)

  #define SPACE_X       20
  #define SPACE_Y       20
  #define BTN_DIMX     210
  #define BTN_DIMY      40

	// * * * *    PRIMA COLONNA      * * * *

  

	CMenu_button::hook_pos = CMenu_button::bottom_left; // child di livello 1 allineati sotto e a sinistra

	// AUTOMATION BUTTON (num_menu_btn=0)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLA_SX;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_900[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // regolo dimensione sottomenu parametri macchina
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  menu_btn[num_menu_btn]->ShowWindow( SW_HIDE ); // hidden
  //if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERUSER_LEVEL );
  num_menu_btn++;

 	// INSPECTION BUTTON  (num_menu_btn=1)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_902[lng], container_main ); 
  menu_btn[num_menu_btn]->child->new_size( 320, 100 ); // regolo dimensione sottomenu parametri ispezione
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  //if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERVISOR_LEVEL );
  num_menu_btn++;

	// * * * *     SECONDA COLONNA      * * * *
	// PULSANTE RICETTE  (num_menu_btn=2)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLB_SX;
	rett.right  = rett.left   + BTN_DIMX;
	recipe_btn = menu_btn[num_menu_btn] = new CMenu_button( string_120[lng], container_main, &Recipe_management );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  //password_mngr->insert_hmi( menu_btn[num_menu_btn], SUPERUSER_LEVEL );
  num_menu_btn++;

	// PULSANTE AVVIO/ARRESTO CALIBRAZIONE  (num_menu_btn=3)
	rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_150[lng], container_main, &Inspection_startstop  );
  menu_btn[num_menu_btn]->MoveWindow( &rett );
  inspection_btn = menu_btn[num_menu_btn];
  //if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  num_menu_btn++;



	// * * * *     TERZA COLONNA      * * * *

	// PULSANTE UTILITA'/FUNZIONI  (num_menu_btn=4)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLC_SX;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_130[lng], container_main );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  menu_btn[num_menu_btn]->child->new_size( 320, 100 );
  //if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  num_menu_btn++;

	// PULSANTE DI USCITA  (num_menu_btn=5)
  rett.top    = rett.bottom +	 SPACE_Y;
	rett.bottom = rett.top    + BTN_DIMY;
  rett.left   = rett.right  - BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_140[lng], container_main, &On_exit_btn );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  exit_btn = menu_btn[num_menu_btn];
  //exit_btn->EnableWindow(FALSE);
  //if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn], MAINTENANCE_LEVEL );
  num_menu_btn++;
  

	// * * * *     A SX PULSANTE OPERATORE      * * * *
  /*
	// PULSANTE OPERATORE/PASSWORD  (num_menu_btn=6)
	rett.top    =                BRD_SUP;
	rett.bottom = rett.top    + BTN_DIMY;
	rett.left   =                COLD_SX;
	rett.right  = rett.left   + BTN_DIMX;
	menu_btn[num_menu_btn] = new CMenu_button( string_190[lng], container_main, &Set_user );
	menu_btn[num_menu_btn]->MoveWindow( &rett );
  user_btn = menu_btn[num_menu_btn];
  num_menu_btn++;
  */

  #undef BRD_SUP
  #undef COLA_SX
  #undef COLB_SX
  #undef COLC_SX
  #undef SPACE_X
  #undef SPACE_Y
  #undef BTN_DIMX
  #undef BTN_DIMY

	CParameter::dim_ctrl.cy   = 30; // Regolo la dimensione verticale

	CContainer_wnd::mode         = CContainer_wnd::top_left;
	CContainer_wnd::use_ext_rect = false;

	CMenu_button::hook_pos = CMenu_button::top_right; // child di livello >1 allineati a destra



  // ***************************************************************************
  //
  //                           PARAMETRI DI ISPEZIONE/MISURA
  //
  // ***************************************************************************

	//menu_btn[1]->child->new_size( 320, 300+NUM_TLC*50 ); // dimensioni sottofinestra parametri ispezione

	// SUB-MENU for
//  menu_btn[1]->child->posy += 10; // Set vertical position
//	menu_btn[6] = new CMenu_button( string_1050[lng], menu_btn[0]->child );
//	menu_btn[1]->child->new_size( 320, 440 );
  
  //parameter[num_params++] = new CParameter( &num_img,       CTYPE_DINT,  0, menu_btn[1]->child, string_2032[lng],   string_uni[lng], 20,  5,  50, &file_manager );
	//parameter[num_params++] = new CParameter( &free_run,      CTYPE_BOOL8, 0, menu_btn[1]->child, string_2050[lng],   0,                1,  0,   0, &file_manager );
	//parameter[num_params++] = new CParameter( &pseudo_colors, CTYPE_BOOL8, 0, menu_btn[1]->child, string_2122[lng],   0,                1,  0,   0, &file_manager, &Set_LUT           );
	//parameter[num_params++] = new CParameter( &learn_refl,    CTYPE_BOOL8, 0, menu_btn[1]->child, string_2124[lng],   0,                1,  0,   0, NULL,          &Learn_reflections );


  // -----------------------------   S O T T O M E N U     C A M E R A    ---------------------------------------------
  for ( UINT i=0 ; i<num_tlc ; i++ ) // Sotto gruppo parametri telecamere - Livello 1 - menu_btn[20,21,22]
  {
    //char msg[50];
    //sprintf(msg, string_810[lng], i+1 );
    wchar_t msg[50+1];
    //swprintf( msg, string_810[lng], i+1 );
    swprintf( msg, 50, string_800[lng], i, camera[i].name );
    menu_btn[num_menu_btn] = new CMenu_button( msg, menu_btn[1]->child );
    menu_btn[num_menu_btn]->child->new_size( 320, 300 );

    parameter[num_params++] = new CParameter( &camera[i].shutter,    CTYPE_DINT,  0, menu_btn[num_menu_btn]->child, string_2060[lng], string_usec[lng],   1000, BASLER_MINSHUTTER, BASLER_MAXSHUTTER, &file_manager, &Set_camera, i );
    parameter[num_params++] = new CParameter( &camera[i].frame_rate, CTYPE_REAL,  0, menu_btn[num_menu_btn]->child, string_2066[lng], string_fps [lng],   50.0,               0.0,            6000.0, &file_manager, &Set_camera, i );

    //   	menu_btn[num_menu_btn++] = new CMenu_button( string_2020[lng], menu_btn[num_menu_btn-1]->child, &Set_area, i );

    num_menu_btn++;

    //filling_level[i]->Add_menu_parameters( menu_btn[num_menu_btn-1]->child );
    filling_level[i]->Add_menu_parameters( menu_btn[1]->child );
  }




  // ---------------------------------------   S O T T O M E N U    V I S I O N    S T A T I O N   ---------------------------------------------

  menu_btn[num_menu_btn] = new CMenu_button( string_902[lng], menu_btn[1]->child );
  menu_btn[num_menu_btn]->child->new_size( 320, 650 );
  menu_btn[num_menu_btn]->ShowWindow( SW_HIDE );
  int vision_menu = num_menu_btn;
  num_menu_btn++;


  // quota target vision lift
  //parameter[num_params++] = new CParameter( ".AXIS_PAR[10].USR_TARGET_POS",     CTYPE_SCALED|CTYPE_BECKHOFF, 0, menu_btn[vision_menu]->child, string_1160[lng], string_mm[lng],   10.0,    0.0,    350.0, &file_manager  );
  //parameter[num_params-1]->Scaling_parameters( 0.0, 60000, 100.0, 806666 );

  //menu_btn[num_menu_btn++] = new CMenu_button( string_1168[lng],    menu_btn[vision_menu]->child, &Vision_set_height  ); 

  // quota target vision rotate
  //parameter[num_params++] = new CParameter( ".AXIS_PAR[11].USR_TARGET_POS",     CTYPE_SCALED|CTYPE_BECKHOFF, 0, menu_btn[vision_menu]->child, string_1162[lng], string_degrees[lng],   0.0, -3.6e5, 3.6e5, &file_manager  );
  //parameter[num_params-1]->Scaling_parameters( 0.0, 0, 360.0, 25600 );

  //menu_btn[num_menu_btn++] = new CMenu_button( string_1170[lng],    menu_btn[vision_menu]->child, &Vision_start_rotate  ); 

	//menu_btn[1]->child->posy += 10; // Set vertical position


  // start calibration
//  menu_btn[num_menu_btn++] = new CMenu_button( string_902[lng],    menu_btn[1]->child, &Start_calibration    ); 
//	menu_btn[num_menu_btn++] = new CMenu_button( string_150[lng], menu_btn[1]->child, &Inspection_startstop  );
//	inspection_btn = menu_btn[num_menu_btn-1];

  // start repeteability
  //menu_btn[num_menu_btn++] = new CMenu_button( string_904[lng],    menu_btn[1]->child, &Start_repeatability  ); 

 





// ANALYSIS PARAMETERS SUB-MENU
  /*
  menu_btn[num_menu_btn] = new CMenu_button( string_908[lng], menu_btn[1]->child );
  menu_btn[num_menu_btn]->child->new_size( 320, 600 );
  int ppoint_menu = num_menu_btn;
  num_menu_btn++;
  */
  //parameter[num_params++] = new CParameter( &p_point_vmin,   CTYPE_LREAL, 0, menu_btn[ppoint_menu]->child, string_832[lng], string_mm[lng],        0.4,  0.0,  10.0, &file_manager, NULL );
  //  sprintf( parameter[num_params-1]->format_spc, "%%.2lf" );
  //parameter[num_params-1]->format_spc = "%.2lf";



  // ***************************************************************************
  //
	//               ADD FUNCTIONS/UTILITIES	( container menu_btn[4] )
  //
  // ***************************************************************************


  menu_btn[num_menu_btn] = new CMenu_button( string_160[lng],     menu_btn[4]->child, &Movie_startstop   );
	movie_btn = menu_btn[num_menu_btn];
  num_menu_btn++;
	menu_btn[num_menu_btn++] = new CMenu_button( string_170[lng],   menu_btn[4]->child, &Save_images       );

  /*
  menu_btn[num_menu_btn++] = new CMenu_button( string_304[lng],   menu_btn[4]->child, &Data_record       ); 
  datarec_btn = menu_btn[num_menu_btn-1];
  datarec_btn->ShowWindow( SW_HIDE );

  menu_btn[num_menu_btn++] = new CMenu_button( string_310[lng],   menu_btn[4]->child, &Loop_inspection   );
  loopinsp_btn = menu_btn[num_menu_btn-1];
  loopinsp_btn->ShowWindow( SW_HIDE );

//  menu_btn[num_menu_btn++] = new CMenu_button( string_1050[lng],  menu_btn[4]->child, &Manual_jog       ); 

  menu_btn[num_menu_btn++] = new CMenu_button( string_1030[lng],  menu_btn[4]->child, &Set_paths        ); 
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn-1], SUPERVISOR_LEVEL );

  menu_btn[num_menu_btn++] = new CMenu_button( string_1040[lng],  menu_btn[4]->child, &Set_passwords    ); 
  if ( password_mngr ) password_mngr->insert_hmi( menu_btn[num_menu_btn-1], SUPERVISOR_LEVEL );
  */

//  #ifdef _DEBUG
  if ( test_process )
  {
	  //menu_btn[num_menu_btn++] = new CMenu_button( string_172[lng],  menu_btn[4]->child, &Load_images       );
    menu_btn[num_menu_btn++] = new CMenu_button( string_910[lng],  menu_btn[4]->child, &Test_process      ); 
    menu_btn[num_menu_btn++] = new CMenu_button( string_912[lng],  menu_btn[4]->child, &Sequence_acquire  ); 
  }
  //  #endif
 //  ASSERT ( menu_btn[19]==NULL );


 

    // CHANGE WINDOW SIZE - SEEMS OK 
  container_main->GetWindowRect( &rett );
  TRACE("Initial %d,%d,%d,%d\n", rett.top, rett.bottom, rett.left, rett.right );
  rett.bottom -= 120;
  container_main->MoveWindow( &rett );
  container_main->GetWindowRect( &rett );
  TRACE("After %d,%d,%d,%d\n", rett.top, rett.bottom, rett.left, rett.right );


}





void CChildView::Create_display_fillev(void)
{

  CString msg;

  Basler_initialize();

  ZeroMemory( &camera[0], sizeof( Camera_struct ) );

  #if SERIAL_N == 2013999 // first filling level system to bangladesh
    sprintf( camera[0].sn, "21321496" ); // macchina
    //sprintf( camera[0].sn, "21322504" ); // "21293367" ); // banco
  #endif

  #if SERIAL_N == 2013059 // "YF2013-059C" second filling level system 
//    sprintf( camera[0].sn, "21404640" ); // macchina
    sprintf( camera[0].sn, "21405156" ); // macchina
  #endif

  #if SERIAL_N == 2013058 // "YF2013-058C" third filling level system 
    sprintf( camera[0].sn, "21397049" ); // macchina
  #endif

    
  camera[0].offsetx    =           0;
  camera[0].offsety    =           0;
  camera[0].width      =         780;
  camera[0].height     =         400;
  camera[0].trigger    =       FALSE; // no trigger here
  camera[0].strobe     =       FALSE; // no strobe
  camera[0].sequence   =       FALSE; // no sequence

  camera[0].shutter    =         800;
  camera[0].dsporg.x   =         330;
  camera[0].dsporg.y   =         200;
  camera[0].scale      =         0.6;
  camera[0].output1    =        TRUE;

  camera[0].acq_mode   = AcquisitionMode_Continuous;
  camera[0].frame_rate =         0.0;

  camera[0].offsety    = (580-camera[0].height)/2;
  camera[0].dsporg.x  += int(camera[0].offsety*camera[0].scale);
  
//  camera[0].modedsp    = DISPROT_000;
  camera[0].modedsp    = DISPROT_090; // Ok, va bene per controllo livello riempitrice
//  camera[0].modedsp    = DISPROT_180;
//  camera[0].modedsp    = DISPROT_270;
  camera[0].textnum    =           3;
  camera[0].textwidth  =         500; // can be used to force width to some specified amount


    
  if ( Basler_initialize( 0 ) )
  {
    //size_t  num=0;
    //wchar_t txt[100];
    //mbstowcs_s( &num, txt, 100, camera[0].sn, _TRUNCATE); // conversione char=>wchar_t
    //msg.Format( string_520[lng], txt, msg_err );
    msg.Format( string_522[lng], camera[0].name, AtoW(camera[0].sn), msg_err );
    //msg.Format( string_520[lng], AtoW(camera[0].sn), msg_err );
    Message_box( msg, MBOX_ERROR );
    //return;
  }
  else
  {
    if ( Basler_parameters( 0 ) )
    {
      Message_box( msg_err, MBOX_ERROR );
      return;
    }
  }

//  Prepare_dsporgx(0,1);

  if ( Basler_display( 0 ) )
  {
    Message_box( msg_err, MBOX_ERROR );
    return;
  }

 // areainsp[0] = new CArea_adjust( this, 0, &file_manager );
 

  filling_level[0] = new CAmpoule_filling_level( 0, &file_manager );

  Invalidate( TRUE );

}
	


void CChildView::OnPaint() 
{
	CPaintDC dc(this); // device context for painting


  if ( container_main && container_main->m_hWnd )

    {
    container_main->RedrawWindow();
	  //container_main->ShowWindow( SW_SHOW );
	}
//  return;

	RECT rett;
	GetClientRect( &rett );

	dc.FillRect( &rett , &CBrush( ::GetSysColor( COLOR_APPWORKSPACE ) ) ); // 0xFFBBGGRR - COLOR_WINDOW NO
//	dc.FillRect( &rett , &CBrush( BKGRND_COL ) ); // 0xFFBBGGRR

  if ( layout_dsp && layout_dsp->visible ) 
  {
    layout_dsp->Draw_image();

	//Pour added for testing on 20201020
	//layout_dsp->Draw_status();
	//Pour added for testing on 20201020

	//Pour added for testing on 20201021
	//CBrush brush(HS_DIAGCROSS,RGB(192,192,192));//gray
	//Sleep(5000);
//	if ( f_run_automatic )
//
//	//if ( alarm_data->on )
//	{
//		  //if (alarm_data->index  == 12)
//		//{
//	CBrush brush(HS_DIAGCROSS,RGB(255,0,0)); //red
//	dc.SelectObject(&brush);
//	//dc.RoundRect(560,560,600,600,10,10);
//	dc.RoundRect(750,700,1100,900,10,10);
//		//}
//
//	}
//	else
///*
//	{
//	CBrush brush(HS_DIAGCROSS,RGB(0,255,0)); //Green
//	dc.SelectObject(&brush);
//	//dc.RoundRect(560,560,600,600,10,10);
//	dc.RoundRect(700,700,900,900,10,10);
//	}
//*/
//	{
//	//CBrush brush(HS_DIAGCROSS,RGB(255,0,0)); //Red
//	//dc.SelectObject(&brush);
//	//dc.RoundRect(560,560,600,600,10,10);
//	//dc.RoundRect(700,700,1200,800,10,10);
//
//	CFont font;
//	font.CreateFont( 23,                            // Height
//                   0,                             // Width
//                   0,                             // Escapement
//                   10,                            // Orientation
//                   500,                           // Weight
//                   FALSE,                         // Italic
//                   FALSE,                         // Underline
//                   0,                             // StrikeOut
//                   ANSI_CHARSET,                  // CharSet
//                   OUT_DEFAULT_PRECIS,            // OutPrecision
//                   CLIP_DEFAULT_PRECIS,           // ClipPrecision
//                   DEFAULT_QUALITY,               // Quality
//                   DEFAULT_PITCH | FF_SWISS,      // PitchAndFamily
//                   lng==CHINESE?L"SimSun":L"Arial" );
//
//	CFont* old_font = dc.SelectObject( &font );
//
//	  CString txt;
//
//  txt.Format( info_text_eng[0], MODEL_NAME, CString(MACHINE_ID) );
//
//  // Prepare string with machine model and number
//  if ( lng==CHINESE ) txt.Format( info_text_chn[0], MODEL_NAME, CString(MACHINE_ID) );
//  else                txt.Format( info_text_eng[0], MODEL_NAME, CString(MACHINE_ID) );
//  dc.TextOut( 800, 700, txt );
//	}
	

	//container_main->RedrawWindow();
	//CPen pen(PS_SOLID,20,RGB(255,0,0));//Red
	//dc.SelectObject(&pen);
	//dc.Rectangle(560,560,600,600);


	// put back the old objects
   //pDC->SelectObject(pOldBrush);
   //pDC->SelectObject(pOldPen);

   //Pour added for testing on 20201021

    for ( UINT i=0 ; i<uplist_num ; i++ ) if ( uplist[i].item_rt ) uplist[i].item_rt->RedrawWindow();
    return;
  }

  for ( UINT i=0 ; i<num_tlc ; i++ )
  {
    if ( image_dsp[i] && image_dsp[i]->visible ) image_dsp[i]->Draw_image(); // TRUE 
  }  
	
}



/*
void CChildView::On_load_image()
{
	// TODO: Add your command handler code here
//  char* img_name = "bande.png" ;
  //char* img_name = "bande2.png";
  //if (!PathFileExists(img_name))
  wchar_t* img_name = L"bande2.png";
  if (!PathFileExists(img_name))
  {
 		//msg_err.Format("File <%s> non trovato", img_name);
// 		msg_err.Format( L"File <%s> non trovato", img_name);
 		swprintf( msg_err, L"File <%s> non trovato", img_name);
//    MessageBox( msg_err, "ERRORE:" , MB_OK|MB_ICONERROR );
    Message_box( msg_err, MBOX_ERROR );
    return;
  }

//	int i=0;
	FCObjImage   img_acq;


  img_acq.Load ( img_name );

  if (!img_acq.IsValidImage())
  {
		//msg_err.Format("Impossibile caricare immagine");
//		msg_err.Format( L"Impossibile caricare immagine" );
		swprintf( msg_err, L"Impossibile caricare immagine" );
//		MessageBox( msg_err , "ERRORE:" , MB_OK|MB_ICONERROR );
    Message_box( msg_err, MBOX_ERROR );
    return;
  }

//	msg.Format("Image <%s> loaded.\r\n%dx%dx%d", img_name, img.Width(), img.Height(), img.ColorBits() );
//  MessageBox( msg , "Info:" , MB_OK );
	Invalidate();

}

*/


void CChildView::On_process_image()
{
	// TODO: Add your command handler code here
//	int x, y;

//	int i=0;
	FCObjImage   img_acq;

  if (!img_acq.IsValidImage())
  {
		//msg_err.Format("Formato immagine non valido");
//		msg_err.Format( L"Formato immagine non valido" );
		swprintf( msg_err, 200, L"Formato immagine non valido" );
//		MessageBox( msg_err , "ERRORE:" , MB_OK|MB_ICONERROR );
    Message_box( msg_err, MBOX_ERROR );
    return;
  }
  
//	timer.reset();

}







void CChildView::On_exit_prog()
{


	if ( Message_box( string_002[lng] , MBOX_YESNO ) != IDYES ) return;

  #ifndef _DEBUG
  	//if ( ( password_mngr && password_mngr->current_level < SUPERVISOR_LEVEL ) || ( !debug && Message_box( string_004[lng] , MBOX_YESNO ) == IDYES ) )
	if ( ( password_mngr && password_mngr->current_level < MAINTENANCE_LEVEL ) || ( !debug && Message_box( string_004[lng] , MBOX_YESNO ) == IDYES ) )//changed for Baiyu on 20201105
    {
      if ( logger ) logger->Add_string( L"Exit and shutdown requested" );

      HANDLE hToken;
      TOKEN_PRIVILEGES tkp;
      if (!OpenProcessToken(GetCurrentProcess(),TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken)) TRACE("Errore:OpenProcessToken\n");
      LookupPrivilegeValue(NULL, SE_SHUTDOWN_NAME , &tkp.Privileges[0].Luid);
      tkp.PrivilegeCount = 1;
      tkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
      AdjustTokenPrivileges(hToken, false, &tkp, 0, (PTOKEN_PRIVILEGES)NULL, 0);
      if (GetLastError() != ERROR_SUCCESS)   TRACE("AdjustTokenPrivileges\n");
      if (!ExitWindowsEx(EWX_SHUTDOWN | EWX_FORCE, 0))  TRACE("ExitWindowsEx");
    }
  #endif
 
  #ifdef HGA_DATAREC
    if ( hgadatarec_on ) HGAdata_record(0); // if still active, call handler to disable
  #endif

  if ( logger ) logger->Add_string( L"Exit requested" );

  if ( machine_txt && machine_txt->m_hWnd ) machine_txt->SetWindowTextW( string_070[lng] );
  if ( alarm_txt   && alarm_txt->m_hWnd   ) alarm_txt  ->SetWindowTextW( L"" );
  if ( warning_txt && warning_txt->m_hWnd ) warning_txt->SetWindowTextW( L"" );

  Inspection_startstop( 20 );
  Movie_startstop( 20 );

//  if ( datarec_on ) Data_record(0); // if datarec active, stop it!

	// Terminate all running threads
  thread_exit = 0xFFFFFFFF;
  TRACE("CChildView::On_exit_prog: thread_exit set to 0xFFFFFFFF\n");


  #ifdef WORKER_THREAD  // if defined uses worker threads to speed-up processing
    //AfxBeginThread( processing_thread , LPVOID(0) , THREAD_PRIORITY_HIGHEST ); // first worker thread
    for ( int i=0 ; i<2 ; i++ )
    {
      img_ptr = NULL;
      if ( processing_start[i] ) processing_start[i]->SetEvent(); // set event to force exit
      if ( processing_done [i] ) processing_done [i]->SetEvent(); // set event to force exit
    }
  #endif

/*  while ( thread_status )
  {
    MSG msg;
    PeekMessage( &msg , NULL , 0 , 0 , PM_REMOVE );
    Sleep(100);
    TRACE(".");
  } */

  CTimer timer;
  while ( thread_status && timer.elapsed_sec()<10 )
  {
    MSG msg; 
    PeekMessage( &msg, NULL,  0, 0, PM_REMOVE);
    Sleep(5);
  }
  if ( thread_status )
  {
    swprintf( msg_err, 200, L"On_exit_prog: timeout while waiting thread_status (%d)", thread_status );
    Message_box( msg_err );
  }




  TRACE("CChildView::On_exit_prog: thread_status=%d\n",thread_status);

  if ( file_manager.Save_all( DEFAULT_FILE ) )
  {
    msg.Format( string_028[lng], file_manager.msg_err );
    Message_box( msg, MBOX_ERROR );
	}

	
  Deallocate();

	theApp.m_pMainWnd->DestroyWindow();

  delete theApp.m_pMainWnd;

//		m_pMainWnd 
//	theApp.ExitInstance();

  //added by Pour on 20200422 to shield access to windows 
//==============================
  StopMaskKey(); // stop masking key 
  // enable Task Manager
  DWORD value = 0;
  if ( WriteReg(_T("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System"), _T("DisableTaskMgr"),value))
	 //Message_box( _T("Failed to enable Task manager"), MBOX_ERROR );
//==============================	


	PostQuitMessage( 0 );

	//CWinApp::ExitInstance();

}





//Pour removed for Sunho on 20200510
//int CChildView::Show_logfile( wchar_t* name ) // CString &name )
//{
//
//  Close_all_menus();
//
//  CLog_viewer log(name);
////  log.Open_file( name );
//  log.DoModal();
//
//
///*  CEdit edit_wnd;
//
//  RECT rett = { 100, 100, 400, 400 };
//
//  edit_wnd.Create( ES_READONLY | ES_MULTILINE | WS_CHILD | WS_VISIBLE | WS_TABSTOP | WS_BORDER, CRect( 10, 10, 800, 500), this, 1);
//  edit_wnd.SetWindowText( L"123456789\r\nabcdefg" );
//
//  Sleep(2000); */
//
//  return 0;
//}
//Pour removed for Sunho on 20200510

//Pour added for Sunho on 20200510
int CChildView::Show_logfile( wchar_t* name ) // CString &name )
{

  Close_all_menus();
  if ( !wcscmp(name, ALARMLOG_FILE_NAME )/* || !wcscmp( name, NEWALARMLOG_FILE_NAME )*/)
  { 
	CLog_viewer alarmlog(name);
	alarmlog.DoModal();
  }
  else 
  {
	CLog_viewer log(name);
	//  log.Open_file( name );
	log.DoModal();

  }


  return 0;
}
